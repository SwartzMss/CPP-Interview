{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CPP-Interview","text":"<p>\u6b22\u8fce\u6765\u5230C++\u9762\u8bd5\u6307\u5357\u3002\u672c\u6307\u5357\u6db5\u76d6\u4e86C++\u7684\u91cd\u8981\u7279\u6027\u4ee5\u53ca\u5e38\u89c1\u9762\u8bd5\u95ee\u9898\u3002</p>"},{"location":"language/condition_variable_single_waiter/","title":"\u6761\u4ef6\u53d8\u91cf\u4f7f\u7528\u89c4\u8303\uff08\u5355\u7b49\u5f85\u8005/\u70b9\u5bf9\u70b9\uff09","text":"","tags":["concurrency","condition_variable"]},{"location":"language/condition_variable_single_waiter/#_1","title":"\u95ee\u9898","text":"<p>\u53ea\u6709\u4e00\u4e2a\u7b49\u5f85\u7ebf\u7a0b\u4e0e\u4e00\u4e2a\u901a\u77e5\u7ebf\u7a0b\u65f6\uff0c\u6761\u4ef6\u53d8\u91cf\u5e94\u5982\u4f55\u6b63\u786e\u4f7f\u7528\uff0c\u65e2\u8981\u6297\u865a\u5047\u5524\u9192\u3001\u9632\u4e22\u5524\u9192\uff0c\u53c8\u4fdd\u6301\u5b9e\u73b0\u7b80\u6d01\uff1f</p>","tags":["concurrency","condition_variable"]},{"location":"language/condition_variable_single_waiter/#_2","title":"\u56de\u7b54","text":"<p>\u6838\u5fc3\u89c4\u8303\uff08\u5355\u7b49\u5f85\u8005/\u70b9\u5bf9\u70b9\uff09\uff1a\u540c\u9501\u4fdd\u62a4\u7684\u53ef\u91cd\u7b97\u8c13\u8bcd + while\uff08\u6216 <code>wait(lock, pred)</code>\uff09\u7b49\u5f85 + \u5148\u6539\u72b6\u6001\u540e\u901a\u77e5\uff08<code>notify_one</code>\uff09\u3002</p>","tags":["concurrency","condition_variable"]},{"location":"language/condition_variable_single_waiter/#_3","title":"\u9002\u7528\u8303\u56f4","text":"<ul> <li>\u4e00\u4e2a\u7b49\u5f85\u7ebf\u7a0b\u4e0e\u4e00\u4e2a\u901a\u77e5\u7ebf\u7a0b\uff0c\u65e0\u201c\u60ca\u7fa4\u201d\uff08thundering herd\uff09\u95ee\u9898\u3002</li> <li>\u5178\u578b\uff1a\u70b9\u5bf9\u70b9\u4ea4\u4ed8\u3001\u5355\u751f\u4ea7\u8005-\u5355\u6d88\u8d39\u8005\u3002</li> </ul>","tags":["concurrency","condition_variable"]},{"location":"language/condition_variable_single_waiter/#_4","title":"\u6838\u5fc3\u89c4\u5219","text":"<ul> <li>\u540c\u9501\u4fdd\u62a4\uff1a\u8c13\u8bcd\u53ea\u4f9d\u8d56\u540c\u4e00\u628a\u4e92\u65a5\u9501\u4fdd\u62a4\u7684\u6570\u636e\u3002</li> <li>\u6297\u865a\u5047\u5524\u9192\uff1a<code>while(!pred()) cv.wait(lock);</code> \u6216\u4f7f\u7528 <code>cv.wait(lock, pred)</code>\u3002</li> <li>\u9632\u4e22\u5524\u9192\uff1a\u901a\u77e5\u65b9\u5728\u540c\u9501\u5185\u5148\u628a\u72b6\u6001\u6539\u5230\u201c\u8c13\u8bcd\u4e3a\u771f\u201d\uff0c\u518d\u89e3\u9501\u5e76 <code>notify_one()</code>\u3002</li> <li>\u901a\u77e5\u7b56\u7565\uff1a\u53ea\u6709\u4e00\u4e2a\u7b49\u5f85\u8005\uff0c\u9ed8\u8ba4 <code>notify_one</code>\uff1b\u505c\u673a/\u5173\u95ed\u9700\u8981\u6240\u6709\u7b49\u5f85\u8005\u524d\u8fdb\u65f6\u7528 <code>notify_all</code>\u3002</li> </ul>","tags":["concurrency","condition_variable"]},{"location":"language/condition_variable_single_waiter/#_5","title":"\u8c13\u8bcd\u8bbe\u8ba1\uff08\u53ef\u91cd\u7b97\uff09","text":"<ul> <li>\u5355\u69fd\uff1a<code>has_item == true</code></li> <li>\u961f\u5217\uff1a\u6d88\u8d39\u8005 <code>!queue.empty()</code>\uff1b\u751f\u4ea7\u8005 <code>queue.size() &lt; cap</code></li> <li>\u505c\u6b62\uff1a<code>stop/closed</code> \u5e76\u5165\u8c13\u8bcd\uff0c\u7edf\u4e00\u9000\u51fa\u901a\u9053</li> </ul>","tags":["concurrency","condition_variable"]},{"location":"language/condition_variable_single_waiter/#_6","title":"\u7b49\u5f85/\u901a\u77e5\u6d41\u7a0b","text":"<ul> <li>\u7b49\u5f85\u65b9\uff1a\u9501 \u2192 <code>cv.wait(lk, [&amp;]{ return stop || pred(); });</code> \u2192 \u5904\u7406 \u2192 \u6539\u72b6\u6001\uff08\u4f7f\u8c13\u8bcd\u53d8\u5047\uff09</li> <li>\u901a\u77e5\u65b9\uff1a\u9501\u5185\u6539\u72b6\u6001\uff08\u4f7f\u8c13\u8bcd\u53d8\u771f\uff09\u2192 \u89e3\u9501 \u2192 <code>cv.notify_one()</code></li> </ul>","tags":["concurrency","condition_variable"]},{"location":"language/condition_variable_single_waiter/#_7","title":"\u505c\u673a\u4e0e\u8d85\u65f6","text":"<ul> <li>\u505c\u673a\uff1a<code>{ lock; stop=true; } cv.notify_all();</code>\uff08\u786e\u4fdd\u5c3d\u5feb\u5524\u9192\u9000\u51fa\uff09</li> <li>\u8d85\u65f6\uff1a<code>wait_for/until</code> \u8fd4\u56de\u540e\u4ecd\u9700 while \u91cd\u68c0\u8c13\u8bcd\uff08\u8fd4\u56de\u503c\u4ec5\u4f5c\u8f85\u52a9\uff09</li> </ul>","tags":["concurrency","condition_variable"]},{"location":"language/condition_variable_single_waiter/#_8","title":"\u5e38\u89c1\u8bef\u533a","text":"<ul> <li>\u7528 <code>if</code> \u66ff\u4ee3 <code>while</code> \u68c0\u67e5\u8c13\u8bcd\u3002</li> <li>\u7b49\u5f85\u4e0e\u901a\u77e5\u4f7f\u7528\u4e0d\u540c\u7684\u9501\uff0c\u6216\u8c13\u8bcd\u672a\u53d7\u8be5\u9501\u4fdd\u62a4\u3002</li> <li>\u4e0d\u7ef4\u62a4\u53ef\u91cd\u7b97\u72b6\u6001\uff0c\u4ec5\u4f9d\u8d56\u201c\u88ab\u901a\u77e5\u8fc7\u201d\u3002</li> <li>\u5148\u901a\u77e5\u540e\u6539\u72b6\u6001\uff0c\u6216\u72b6\u6001\u672a\u6539\u53d8\u5374\u8c03\u7528 <code>notify_*</code>\u3002</li> </ul>","tags":["concurrency","condition_variable"]},{"location":"language/condition_variable_single_waiter/#_9","title":"\u793a\u4f8b\uff08\u5355\u69fd\u4fe1\u7bb1\uff0c\u70b9\u5bf9\u70b9\u4ea4\u4ed8\uff09","text":"<p>\u8bf4\u660e\uff1a\u4ec5\u5c55\u793a\u6838\u5fc3\u903b\u8f91\uff0c\u7701\u7565\u5934\u6587\u4ef6\uff1b\u4e00\u4e2a\u7ebf\u7a0b <code>send</code>\uff0c\u4e00\u4e2a\u7ebf\u7a0b <code>recv</code>\u3002</p> <pre><code>template &lt;class T&gt;\nclass SingleSlotMailbox {\npublic:\n  bool send(T v) {\n    std::unique_lock&lt;std::mutex&gt; lk(m_);\n    cv_.wait(lk, [&amp;]{ return stop_ || !slot_.has_value(); });\n    if (stop_) return false;\n    slot_.emplace(std::move(v));   // \u6539\u72b6\u6001\uff1a\u69fd\u53d8\u975e\u7a7a\n    lk.unlock();\n    cv_.notify_one();              // \u5524\u9192\u63a5\u6536\u8005\n    return true;\n  }\n\n  bool recv(T&amp; out) {\n    std::unique_lock&lt;std::mutex&gt; lk(m_);\n    cv_.wait(lk, [&amp;]{ return stop_ || slot_.has_value(); });\n    if (!slot_) return false;      // stop_ \u4e14\u65e0\u503c\n    out = std::move(*slot_);\n    slot_.reset();                 // \u6539\u72b6\u6001\uff1a\u69fd\u53d8\u7a7a\n    lk.unlock();\n    cv_.notify_one();              // \u5524\u9192\u53d1\u9001\u8005\n    return true;\n  }\n\n  void stop() {\n    { std::lock_guard&lt;std::mutex&gt; lk(m_); stop_ = true; }\n    cv_.notify_all();              // \u5e7f\u64ad\u9000\u51fa\n  }\n\nprivate:\n  std::mutex m_;\n  std::condition_variable cv_;\n  std::optional&lt;T&gt; slot_;\n  bool stop_ = false;\n};\n</code></pre> <p>\u8981\u70b9\u56de\u987e\uff1a</p> <ul> <li>\u8c13\u8bcd\uff08\u53ef\u91cd\u7b97\uff09\uff1a\u53d1\u9001\u4fa7\u201c\u69fd\u4e3a\u7a7a\u201d\uff0c\u63a5\u6536\u4fa7\u201c\u69fd\u975e\u7a7a\u201d\uff0c\u4e24\u8005\u90fd\u5e76\u5165 <code>stop_</code>\u3002</li> <li><code>cv.wait(lock, pred)</code> \u7b49\u4ef7\u4e8e while+wait\uff0c\u6297\u865a\u5047\u5524\u9192\u3002</li> <li>\u6539\u72b6\u6001\u5728\u9501\u5185\u5b8c\u6210\uff0c\u5148\u6539\u540e\u901a\u77e5\uff0c\u907f\u514d\u4e22\u5524\u9192\u3002</li> </ul> <p>\u5ef6\u4f38\u9605\u8bfb\uff1a</p> <ul> <li>\u60ca\u7fa4\u95ee\u9898\u4e0e\u907f\u514d\u7b56\u7565\uff08\u6761\u4ef6\u53d8\u91cf/IO\uff09\uff1alanguage/thundering_herd.md</li> </ul>","tags":["concurrency","condition_variable"]},{"location":"language/explicit/","title":"<code>explicit</code> \u5173\u952e\u5b57\u7684\u4f5c\u7528","text":"<p><code>explicit</code> \u7528\u4e8e\u4fee\u9970\u6784\u9020\u51fd\u6570\u6216\u7c7b\u578b\u8f6c\u6362\u8fd0\u7b97\u7b26\uff0c\u7981\u6b62\u7f16\u8bd1\u5668\u8fdb\u884c\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362\uff0c\u8ba9\u201c\u81ea\u52a8\u201d\u53d8\u4e3a\u201c\u624b\u52a8\u201d\u3002</p>","tags":["language"]},{"location":"language/explicit/#explicit_1","title":"\u4f55\u65f6\u9700\u8981 <code>explicit</code>","text":"<ul> <li>\u4f1a\u88ab\u5f53\u4f5c\u201c\u9690\u5f0f\u8f6c\u6362\u5165\u53e3\u201d\u7684\u6784\u9020\u51fd\u6570</li> <li>\u5355\u53c2\u6570\u6784\u9020\u51fd\u6570\uff1a<code>struct T { explicit T(int); };</code></li> <li>\u591a\u53c2\u6570\u4f46\u9664\u4e00\u4e2a\u4ee5\u5916\u90fd\u6709\u9ed8\u8ba4\u503c\uff1a<code>explicit T(int x, int y = 0);</code></li> <li><code>std::initializer_list</code> \u6784\u9020\u51fd\u6570\uff08\u672c\u8d28\u662f\u5355\u53c2\u6570\uff09</li> <li>\u7c7b\u578b\u8f6c\u6362\u8fd0\u7b97\u7b26</li> <li>\u4f8b\u5982 <code>explicit operator bool() const;</code>\uff0c\u907f\u514d\u5bf9\u8c61\u88ab\u5f53\u4f5c\u6574\u6570\u53c2\u4e0e\u7b97\u672f\u6216\u6bd4\u8f83</li> <li>\u5f3a\u7c7b\u578b/\u8bed\u4e49\u7ea6\u675f</li> <li>\u5982 <code>Id{int}</code>\u3001\u5355\u4f4d/\u8d27\u5e01\u3001\u53e5\u67c4\u7b49\u573a\u666f\uff0c\u7981\u6b62\u201c\u770b\u8d77\u6765\u80fd\u8f6c\u5176\u5b9e\u4e0d\u5bf9\u201d\u7684\u9690\u5f0f\u8f6c\u6362</li> <li>\u5b58\u5728\u4fe1\u606f\u4e22\u5931\u6216\u4ee3\u4ef7\u9ad8\u6602\u7684\u8f6c\u6362</li> <li>\u5982 <code>Big(Tiny)</code> \u53ef\u80fd\u622a\u65ad\uff0c\u6216\u6784\u9020\u6210\u672c\u8f83\u9ad8</li> </ul>","tags":["language"]},{"location":"language/explicit/#_1","title":"\u884c\u4e3a\u89c4\u5f8b\uff08\u8bb0\u5fc6\u5361\uff09","text":"<ul> <li>\u7981\u6b62\u9690\u5f0f\u8f6c\u6362\u4e0e\u590d\u5236\u521d\u59cb\u5316\uff1a<code>T t = 1;</code>\u3001<code>f(1)</code> \u90fd\u4f1a\u5931\u8d25</li> <li>\u5141\u8bb8\u76f4\u63a5\u521d\u59cb\u5316\uff1a<code>T t(1);</code>\u3001<code>T t{1};</code>\u3001<code>f(T{1})</code> \u53ef\u7528</li> <li>\u5217\u8868\u521d\u59cb\u5316\u6ce8\u610f\uff1a<code>T t = {1};</code> \u5c5e\u4e8e\u201c\u590d\u5236\u5217\u8868\u521d\u59cb\u5316\u201d\uff0c\u540c\u6837\u4f1a\u53d7 <code>explicit</code> \u9650\u5236</li> <li>C++20 \u8d77\u652f\u6301\u201c\u6761\u4ef6 explicit\u201d\uff1a<code>explicit(constant-expression)</code></li> </ul> <pre><code>template&lt;class U&gt;\nstruct Box {\n    // \u975e\u6574\u578b\u53c2\u6570\u65f6\u8981\u6c42\u663e\u5f0f\u6784\u9020\n    explicit(!std::is_integral_v&lt;U&gt;) Box(U);\n};\n</code></pre>","tags":["language"]},{"location":"language/explicit/#_2","title":"\u5178\u578b\u793a\u4f8b","text":"<pre><code>struct Foo {\n    explicit Foo(int x, int y = 0); // \u770b\u4f3c\u53cc\u53c2\uff0c\u4f46\u53ef\u88ab\u5355\u5b9e\u53c2\u8c03\u7528\n};\n\nvoid bar(Foo);\n\nint main() {\n    // bar(10);        // \u274c \u7981\u6b62\u9690\u5f0f\uff1a\u9700\u8981\u663e\u5f0f\u6784\u9020\n    bar(Foo(10));      // \u2705 \u76f4\u63a5\u521d\u59cb\u5316\n    Foo a{10};         // \u2705 \u76f4\u63a5\u5217\u8868\u521d\u59cb\u5316\n    // Foo b = {10};   // \u274c \u590d\u5236\u5217\u8868\u521d\u59cb\u5316\u540c\u6837\u88ab\u7981\u6b62\n}\n</code></pre> <p>\u7c7b\u578b\u8f6c\u6362\u8fd0\u7b97\u7b26\u914d\u5408 <code>explicit</code>\uff1a</p> <pre><code>struct Socket {\n    int fd;\n    explicit operator bool() const noexcept { return fd &gt;= 0; }\n};\n\nvoid f(const Socket&amp; s) {\n    if (s) { /* \u2705 \u5408\u6cd5\u7684\u6761\u4ef6\u5224\u65ad */ }\n    // int x = s + 1;  // \u274c \u4e0d\u5141\u8bb8\u88ab\u9690\u5f0f\u8f6c\u6362\u4e3a\u6574\u6570\u53c2\u4e0e\u7b97\u672f\n}\n</code></pre>","tags":["language"]},{"location":"language/explicit/#_3","title":"\u5e38\u89c1\u9677\u9631\u4e0e\u6ce8\u610f","text":"<ul> <li><code>std::initializer_list</code> \u91cd\u8f7d\u4e0e\u82b1\u62ec\u53f7\uff1a\u5f53\u5b58\u5728 <code>initializer_list</code> \u6784\u9020\u65f6\uff0c<code>T{...}</code> \u66f4\u503e\u5411\u5339\u914d\u5b83\uff1b\u82e5\u5b83\u88ab\u6807\u8bb0\u4e3a <code>explicit</code>\uff0c<code>T t = { ... }</code> \u5c06\u88ab\u7981\u7528\uff0c\u9700\u8981\u4f7f\u7528 <code>T t{ ... }</code> \u6216\u663e\u5f0f\u6784\u9020\u3002</li> <li>\u4e0d\u8981\u5c06\u590d\u5236/\u79fb\u52a8\u6784\u9020\u51fd\u6570\u6807\u8bb0\u4e3a <code>explicit</code>\uff1a\u4f1a\u7834\u574f\u5e38\u89c1\u7528\u6cd5\uff08\u4f8b\u5982\u5bb9\u5668\u7684\u503c\u8bed\u4e49\uff09\u3002</li> <li>\u4ec5\u5728\u660e\u786e\u5e0c\u671b\u7981\u6b62\u201c\u9690\u5f0f\u8f6c\u6362\u201d\u7684 API \u4e0a\u4f7f\u7528\uff1a\u6709\u4e9b\u8f7b\u91cf\u9002\u914d\u5668\u7c7b\u5c31\u662f\u4e3a\u4e86\u201c\u9690\u5f0f\u201d\u800c\u751f\uff0c\u5e94\u7edf\u4e00\u6743\u8861\u56e2\u961f\u98ce\u683c\u3002</li> </ul>","tags":["language"]},{"location":"language/explicit/#_4","title":"\u4f55\u65f6\u4e0d\u5fc5\uff08\u6216\u4e0d\u5b9c\uff09\u7528","text":"<ul> <li>\u4f60\u786e\u5b9e\u5e0c\u671b\u5b58\u5728\u9690\u5f0f\u4ece\u201c\u8f7b\u91cf\u7c7b\u578b\u201d\u5230\u201c\u91cd\u7c7b\u578b\u201d\u7684\u4fbf\u6377\u8fc7\u6e21\uff0c\u5e76\u4e14\u8f6c\u6362\u5b89\u5168\u6e05\u6670\u3002</li> <li>\u5386\u53f2\u60ef\u4f8b\u6216\u751f\u6001\u4f9d\u8d56\u9690\u5f0f\u8f6c\u6362\u7684\u7c7b\u578b\uff08\u9700\u4e0e\u56e2\u961f\u4e00\u81f4\u6027\u4fdd\u6301\u4e00\u81f4\uff09\u3002</li> </ul>","tags":["language"]},{"location":"language/explicit/#_5","title":"\u9762\u8bd5\u603b\u7ed3","text":"<ul> <li><code>explicit</code> \u4e0d\u4ec5\u4ec5\u7528\u4e8e\u201c\u5355\u53c2\u6570\u201d\uff0c\u51e1\u662f\u53ef\u80fd\u88ab\u5355\u5b9e\u53c2\u8c03\u7528\u7684\u6784\u9020\u3001\u4ee5\u53ca\u7c7b\u578b\u8f6c\u6362\u8fd0\u7b97\u7b26\u90fd\u5e94\u8003\u8651\u3002</li> <li>\u89c4\u5219\uff1a\u7981\u6b62\u9690\u5f0f/\u590d\u5236\u521d\u59cb\u5316\uff0c\u5141\u8bb8\u76f4\u63a5\u521d\u59cb\u5316\uff1b\u5217\u8868\u521d\u59cb\u5316\u7528 <code>=</code> \u4e5f\u4f1a\u88ab\u7981\u6b62\u3002</li> <li>C++20 \u652f\u6301\u6761\u4ef6 <code>explicit</code>\uff0c\u4fbf\u4e8e\u6a21\u677f\u5316 API \u7684\u8bed\u4e49\u7cbe\u7ec6\u5316\u3002</li> </ul>","tags":["language"]},{"location":"language/lambda_interview_summary/","title":"Lambda \u5e38\u89c1\u8003\u70b9\u603b\u7ed3","text":"","tags":["language"]},{"location":"language/lambda_interview_summary/#_1","title":"\u6982\u89c8","text":"<ul> <li>\u6355\u83b7\u65b9\u5f0f\u4e0e\u533a\u522b\uff1a\u6309\u503c\u3001\u6309\u5f15\u7528\u3001\u9690\u5f0f\u6355\u83b7\u3001\u521d\u59cb\u5316\u6355\u83b7\u3002</li> <li>\u4e0e\u51fd\u6570\u5bf9\u8c61\uff08\u4eff\u51fd\u6570\uff09\u7684\u5173\u7cfb\uff1a\u95ed\u5305\u5bf9\u8c61\u3001\u672c\u8d28\u662f\u533f\u540d\u7c7b + <code>operator()</code>\u3002</li> <li>\u4e0e <code>std::function</code> \u7684\u5173\u7cfb\uff1a\u7c7b\u578b\u64e6\u9664\u7684\u4ee3\u4ef7\u4e0e\u4f7f\u7528\u573a\u666f\u3002</li> <li>\u7c7b\u578b\u4e0e\u58f0\u660e\uff1aLambda \u7684\u72ec\u7279\u7c7b\u578b\u3001<code>auto</code>\u3001<code>decltype</code>\u3001\u6cdb\u578b lambda\u3002</li> <li><code>mutable</code>\uff1a\u5141\u8bb8\u4fee\u6539\u6309\u503c\u6355\u83b7\u7684\u526f\u672c\uff08\u4ec5\u5f71\u54cd\u95ed\u5305\u5185\u90e8\u526f\u672c\uff09\u3002</li> </ul>","tags":["language"]},{"location":"language/lambda_interview_summary/#_2","title":"\u6355\u83b7\u65b9\u5f0f\u4e0e\u533a\u522b","text":"<ul> <li>\u6309\u503c\u6355\u83b7 <code>[x]</code>\uff1a\u628a\u5916\u90e8\u53d8\u91cf\u6309\u503c\u62f7\u8d1d\u8fdb\u95ed\u5305\u5bf9\u8c61\u7684\u6210\u5458\u3002</li> <li>\u4fee\u6539\u9700\u8981 <code>mutable</code>\uff1b\u4fee\u6539\u7684\u53ea\u662f\u526f\u672c\uff0c\u5916\u90e8\u53d8\u91cf\u4e0d\u53d8\u3002</li> <li>\u6309\u5f15\u7528\u6355\u83b7 <code>[&amp;x]</code>\uff1a\u95ed\u5305\u4fdd\u5b58\u5f15\u7528/\u5730\u5740\uff0c\u8bfb\u5199\u5f71\u54cd\u5916\u90e8\u53d8\u91cf\uff1b\u9700\u786e\u4fdd\u751f\u547d\u5468\u671f\u5b89\u5168\u3002</li> <li>\u9690\u5f0f\u6355\u83b7 <code>[=]</code> / <code>[&amp;]</code>\uff1a\u7f3a\u7701\u6309\u503c / \u6309\u5f15\u7528\u6355\u83b7\u7528\u5230\u7684\u5916\u90e8\u53d8\u91cf\u3002</li> <li><code>this</code> \u5728 <code>[=]</code> \u4e0b\u4f1a\u9690\u5f0f\u6309\u5f15\u7528\uff08\u590d\u5236 this \u6307\u9488\uff09\u6355\u83b7\uff0c\u53ef\u80fd\u60ac\u5782\uff1b\u53ef\u6539\u7528 <code>[*this]</code>\uff08C++17\uff09\u6309\u503c\u62f7\u8d1d\u5bf9\u8c61\u3002</li> <li>\u521d\u59cb\u5316\u6355\u83b7\uff08C++14 \u8d77\uff09\uff1a<code>[p = std::move(ptr), i = x + 1]</code></li> <li>\u652f\u6301\u79fb\u52a8\u6355\u83b7\u3001\u91cd\u547d\u540d\u3001\u8868\u8fbe\u5f0f\u521d\u59cb\u5316\uff1b\u5e38\u7528\u4e8e\u6355\u83b7 <code>unique_ptr</code>/socket/\u6587\u4ef6\u53e5\u67c4\u7b49\u3002</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>int x = 0; \nauto f1 = [x]()      { /* \u8bfb x \u7684\u526f\u672c */ };\nauto f2 = [&amp;x]()     { x++; };                // \u5f15\u7528\u4fee\u6539\u5916\u90e8 x\nauto f3 = [=]() mutable { /* \u53ef\u4fee\u6539\u526f\u672c */ };\nauto f4 = [p = std::make_unique&lt;int&gt;(42)]() { /* \u62e5\u6709 p */ };\n</code></pre>","tags":["language"]},{"location":"language/lambda_interview_summary/#_3","title":"\u4e0e\u51fd\u6570\u5bf9\u8c61\u7684\u5173\u7cfb\uff08\u5e95\u5c42\u5b9e\u73b0\uff09","text":"<ul> <li>\u7f16\u8bd1\u5668\u628a lambda \u7f16\u8bd1\u4e3a\u201c\u533f\u540d\u7c7b\u201d\u7684\u4e00\u4e2a\u5bf9\u8c61\uff08\u95ed\u5305\u5bf9\u8c61\uff09\uff0c\u5176\u6355\u83b7\u6210\u4e3a\u8be5\u7c7b\u7684\u6570\u636e\u6210\u5458\uff0c\u51fd\u6570\u4f53\u6210\u4e3a <code>operator()</code>\u3002</li> <li>\u65e0\u6355\u83b7 lambda \u53ef\u9690\u5f0f\u8f6c\u6362\u4e3a\u51fd\u6570\u6307\u9488\uff1a<code>void(*)()</code>\u3002</li> <li>\u6709\u6355\u83b7 lambda \u7684\u7c7b\u578b\u662f\u72ec\u7279\u7684\u3001\u4e0d\u53ef\u4e66\u5199\uff1b\u53ea\u80fd\u901a\u8fc7 <code>auto</code>/\u6a21\u677f\u53c2\u6570\u627f\u63a5\u3002</li> </ul> <p>\u793a\u610f\uff08\u975e\u6807\u51c6\u8bed\u6cd5\uff0c\u4ec5\u8bf4\u660e\u672c\u8d28\uff09\uff1a</p> <pre><code>// auto lam = [a](int x){ return x + a; };\nstruct __Lambda {\n    int a;                       // \u6355\u83b7\n    int operator()(int x) const { return x + a; }\n};\n__Lambda lam{.a = a};\n</code></pre>","tags":["language"]},{"location":"language/lambda_interview_summary/#stdfunction-lambda","title":"<code>std::function</code> \u4e0e Lambda \u7684\u7ed3\u5408","text":"<ul> <li><code>std::function&lt;R(Args...)&gt;</code> \u901a\u8fc7\u7c7b\u578b\u64e6\u9664\u5b58\u653e\u4efb\u610f\u53ef\u8c03\u7528\u5bf9\u8c61\uff08\u51fd\u6570\u6307\u9488\u3001lambda\u3001\u4eff\u51fd\u6570\u3001<code>bind</code> \u7ed3\u679c\u7b49\uff09\u3002</li> <li>\u4ee3\u4ef7\uff1a\u53ef\u80fd\u53d1\u751f\u5806\u5206\u914d\uff08\u5c0f\u5bf9\u8c61\u4f18\u5316\u4f9d\u8d56\u5b9e\u73b0\uff09\uff0c\u8c03\u7528\u6709\u95f4\u63a5\u5f00\u9500\uff1b\u76ee\u6807\u9700\u53ef\u590d\u5236\uff08C++23 \u8d77\u53ef\u7528 <code>std::move_only_function</code> \u652f\u6301\u4ec5\u79fb\u52a8\uff09\u3002</li> </ul> <p>\u5efa\u8bae\uff1a - \u51fd\u6570\u6a21\u677f/\u6210\u5458\u6a21\u677f\u53c2\u6570\u4f7f\u7528\u201c\u6cdb\u578b\u53ef\u8c03\u7528\u201d\uff1a<code>template&lt;class F&gt; void run(F f);</code> \u6216 <code>auto</code> \u5f62\u53c2\uff08C++20\uff09\u3002 - \u4ec5\u5f53\u9700\u8981\u7c7b\u578b\u64e6\u9664\uff08\u8de8\u6a21\u5757\u5b58\u50a8\u3001\u5bb9\u5668\u3001\u865a\u63a5\u53e3\u66ff\u4ee3\uff09\u65f6\u518d\u7528 <code>std::function</code>\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>#include &lt;functional&gt;\n\nvoid set_callback(std::function&lt;int(int)&gt; cb) { /* \u5b58\u8d77\u6765\u7a0d\u540e\u8c03\u7528 */ }\n\nint main() {\n    int a = 10;\n    set_callback([a](int x){ return x + a; });\n}\n</code></pre>","tags":["language"]},{"location":"language/lambda_interview_summary/#_4","title":"\u7c7b\u578b\u63a8\u65ad\u4e0e\u58f0\u660e\u65b9\u5f0f","text":"<ul> <li>\u53d8\u91cf\u627f\u63a5\uff1a<code>auto f = [](int x){ return x + 1; };</code></li> <li>\u4e0d\u80fd\u76f4\u63a5\u5199\u51fa lambda \u7684\u7c7b\u578b\uff1b\u82e5\u9700\u58f0\u660e\u76f8\u540c\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u53ef\u7528 <code>decltype</code>\uff1a</li> <li><code>auto f = []{}; decltype(f) g = f;</code></li> <li>\u6cdb\u578b lambda\uff08C++14\uff09\uff1a\u5f62\u53c2\u7528 <code>auto</code>\uff0c\u76f8\u5f53\u4e8e\u5185\u7f6e\u6a21\u677f\uff1a</li> <li><code>auto g = [](auto&amp;&amp; x){ return x + x; };</code></li> <li>\u8fd4\u56de\u7c7b\u578b\u63a8\u65ad\uff1a\u5355 return \u63a8\u65ad\uff1b\u590d\u6742\u5206\u652f\u7528\u5c3e\u7f6e\u8fd4\u56de\u7c7b\u578b\uff1a</li> <li><code>auto h = [](int x){ if (x&gt;0) return x; else return 0; };</code></li> <li><code>auto h2 = [](auto x, auto y) -&gt; std::common_type_t&lt;decltype(x), decltype(y)&gt; { return x + y; };</code></li> </ul>","tags":["language"]},{"location":"language/lambda_interview_summary/#mutable","title":"<code>mutable</code>\uff1a\u4fee\u6539\u6309\u503c\u6355\u83b7\u7684\u526f\u672c","text":"<ul> <li>\u7f3a\u7701 <code>operator()</code> \u4e3a <code>const</code>\uff0c\u4e0d\u80fd\u4fee\u6539\u6309\u503c\u6355\u83b7\u7684\u6210\u5458\uff1b<code>mutable</code> \u4f7f\u5176\u53d8\u4e3a\u975e\u5e38\u91cf\uff0c\u53ef\u4fee\u6539\u526f\u672c\u3002</li> <li>\u53ea\u5f71\u54cd\u95ed\u5305\u5bf9\u8c61\u5185\u90e8\u526f\u672c\uff0c\u4e0d\u4f1a\u56de\u5199\u5230\u5916\u90e8\u53d8\u91cf\u3002</li> </ul> <pre><code>int a = 0;\nauto f = [a]() mutable { a = 42; return a; };\nint r = f();        // r = 42\n// a \u4ecd\u4e3a 0\uff08\u5916\u90e8\u53d8\u91cf\u672a\u53d8\uff09\n</code></pre>","tags":["language"]},{"location":"language/lambda_interview_summary/#_5","title":"\u5e38\u89c1\u9677\u9631\u4e0e\u5efa\u8bae","text":"<ul> <li>\u907f\u514d <code>[&amp;]</code> \u8de8\u7ebf\u7a0b/\u5f02\u6b65\u6301\u6709\u5f15\u7528\uff1b\u4f18\u5148\u503c\u6355\u83b7\u6216\u521d\u59cb\u5316\u6355\u83b7\u79fb\u52a8\u8d44\u6e90\u3002</li> <li>\u6ce8\u610f <code>[=]</code> \u4f1a\u9690\u5f0f\u6355\u83b7 <code>this</code>\uff08\u6309\u5f15\u7528\uff09\u3002\u5bf9\u8c61\u53ef\u80fd\u6790\u6784\u5bfc\u81f4\u60ac\u5782\uff1b\u9700\u8981\u5bf9\u8c61\u526f\u672c\u65f6\u7528 <code>[*this]</code>\uff08C++17\uff09\u3002</li> <li>\u5728\u56de\u8c03\u957f\u671f\u5b58\u6d3b\u7684\u573a\u666f\uff0c\u907f\u514d\u6355\u83b7\u6808\u5bf9\u8c61\u7684\u5f15\u7528\uff1b\u53ef\u6355\u83b7 <code>shared_ptr</code> \u6216\u4f7f\u7528\u6240\u6709\u6743\u8f6c\u79fb\u3002</li> <li>\u4f5c\u4e3a\u56de\u8c03\u5b58\u653e\u65f6\u82e5\u65e0\u9700\u7c7b\u578b\u64e6\u9664\uff0c\u4f18\u5148\u6a21\u677f/<code>auto</code>\uff1b\u786e\u9700\u7edf\u4e00\u63a5\u53e3\u518d\u7528 <code>std::function</code>\u3002</li> </ul>","tags":["language"]},{"location":"language/lambda_interview_summary/#_6","title":"\u901f\u8bb0","text":"<ul> <li>\u503c\u6355\u83b7=\u62f7\u8d1d\u8fdb\u95ed\u5305\uff1b\u5f15\u7528\u6355\u83b7=\u6307\u5411\u5916\u90e8\uff1b\u521d\u59cb\u5316\u6355\u83b7=\u53ef\u8868\u8fbe\u5f0f/\u53ef\u79fb\u52a8\u3002</li> <li>\u65e0\u6355\u83b7\u53ef\u8f6c\u51fd\u6570\u6307\u9488\uff1b\u6709\u6355\u83b7\u662f\u201c\u533f\u540d\u7c7b\u201d\u3002</li> <li><code>std::function</code> \u4e3a\u7c7b\u578b\u64e6\u9664\u5bb9\u5668\uff0c\u6709\u6210\u672c\uff1bC++23 \u6709 <code>move_only_function</code>\u3002</li> <li><code>mutable</code> \u4ec5\u6539\u5185\u90e8\u526f\u672c\uff0c\u4e0d\u56de\u5199\u5916\u90e8\u3002</li> </ul>","tags":["language"]},{"location":"language/memory_order_acquire_release/","title":"<code>std::memory_order_release / acquire</code> \u7684\u4f7f\u7528\u573a\u666f","text":"","tags":["language"]},{"location":"language/memory_order_acquire_release/#_1","title":"\u6838\u5fc3\u7ed3\u8bba","text":"<ul> <li>\u7528\u4e8e\u201c\u53d1\u5e03\u6570\u636e/\u83b7\u53d6\u6570\u636e\u201d\u7684\u540c\u6b65\uff1a\u5199\u7ebf\u7a0b\u5148\u5199\u4e00\u6279\u666e\u901a\u6570\u636e\uff0c\u7136\u540e\u5bf9\u67d0\u4e2a\u539f\u5b50\u53d8\u91cf\u505a release \u5199\uff1b\u8bfb\u7ebf\u7a0b\u5bf9\u540c\u4e00\u539f\u5b50\u53d8\u91cf\u505a acquire \u8bfb\uff0c\u518d\u8bfb\u90a3\u6279\u6570\u636e\uff0c\u4ece\u800c\u4fdd\u8bc1\u53ef\u89c1\u6027\u4e0e\u987a\u5e8f\uff08\u5efa\u7acb happens-before\uff09\u3002</li> <li>\u4ec5\u9002\u7528\u4e8e\u539f\u5b50\u64cd\u4f5c\u6216\u5185\u5b58\u6805\u680f\uff1a<code>std::atomic&lt;T&gt;</code> \u7684 <code>load/store/RMW/compare_exchange</code>\uff0c\u4ee5\u53ca <code>std::atomic_thread_fence</code>\u3002</li> <li>\u53ea\u5173\u5fc3\u539f\u5b50\u53d8\u91cf\u81ea\u8eab\u7684\u6570\u503c\u4e14\u4e0e\u5176\u4ed6\u6570\u636e\u65e0\u4f9d\u8d56\u65f6\uff0c\u53ef\u7528 <code>relaxed</code>\u3002</li> <li>\u9700\u8981\u5168\u5c40\u7ebf\u6027\u5316\u65f6\u7528\u9ed8\u8ba4 <code>seq_cst</code>\uff1b\u590d\u6742\u4e34\u754c\u533a\u76f4\u63a5\u7528 <code>std::mutex</code>\u3002</li> </ul>","tags":["language"]},{"location":"language/memory_order_acquire_release/#releaseacquire","title":"\u4f55\u65f6\u7528 release/acquire\uff08\u5fc3\u6cd5\uff09","text":"<ul> <li>\u5199\u7ebf\u7a0b\uff1a\u5148\u5199\u5171\u4eab\u6570\u636e \u2192 <code>flag.store(true, std::memory_order_release)</code></li> <li>\u8bfb\u7ebf\u7a0b\uff1a<code>while (!flag.load(std::memory_order_acquire))</code> \u7b49\u5c31\u7eea \u2192 \u518d\u8bfb\u5171\u4eab\u6570\u636e</li> <li>\u5fc5\u987b\u662f\u540c\u4e00\u4e2a\u201c\u540c\u6b65\u70b9\u201d\uff08\u540c\u4e00\u4e2a\u539f\u5b50\u5bf9\u8c61\uff09\u8de8\u7ebf\u7a0b\u914d\u5bf9\uff0c\u624d\u80fd\u5bf9\u524d\u540e\u666e\u901a\u8bfb\u5199\u751f\u6548\u3002</li> </ul>","tags":["language"]},{"location":"language/memory_order_acquire_release/#_2","title":"\u5178\u578b\u6a21\u5f0f\u4e0e\u793a\u4f8b","text":"","tags":["language"]},{"location":"language/memory_order_acquire_release/#1-","title":"1) \u53d1\u5e03\u5c31\u7eea\u6807\u5fd7\uff08\u53d1\u5e03-\u8ba2\u9605\uff09","text":"<pre><code>#include &lt;atomic&gt;\n#include &lt;thread&gt;\n#include &lt;string&gt;\n#include &lt;iostream&gt;\n\nstruct Payload { int x; std::string s; };\n\nPayload data;                 // \u975e\u539f\u5b50\u6570\u636e\nstd::atomic&lt;bool&gt; ready{false};\n\nvoid producer() {\n    data.x = 42;\n    data.s = \"hello\";                               // \u666e\u901a\u5199\n    ready.store(true, std::memory_order_release);    // \u53d1\u5e03\n}\n\nvoid consumer() {\n    while (!ready.load(std::memory_order_acquire)) {}// \u83b7\u53d6\n    // acquire \u4e4b\u540e\uff0c\u80fd\u770b\u89c1 producer \u5bf9 data \u7684\u5199\u5165\n    std::cout &lt;&lt; data.x &lt;&lt; \" \" &lt;&lt; data.s &lt;&lt; \"\\n\";   // \u5b89\u5168\u8bfb\u53d6 42 hello\n}\n</code></pre>","tags":["language"]},{"location":"language/memory_order_acquire_release/#2","title":"2) \u4ea4\u63a5\u6240\u6709\u6743\uff08\u53d1\u5e03\u6307\u9488/\u53e5\u67c4\uff09","text":"<pre><code>#include &lt;atomic&gt;\nstruct Node { int v; /* ... */ };\nstd::atomic&lt;Node*&gt; head{nullptr};\n\nvoid make_and_publish() {\n    Node* n = new Node{123};\n    head.store(n, std::memory_order_release); // \u53d1\u5e03\uff1a\u6784\u9020\u5bf9\u8bfb\u8005\u53ef\u89c1\n}\n\nvoid use_after_acquire() {\n    Node* n = nullptr;\n    while (!(n = head.load(std::memory_order_acquire))) {}\n    int x = n-&gt;v;  // \u5b89\u5168\u8bfb\u53d6 123\n}\n</code></pre>","tags":["language"]},{"location":"language/memory_order_acquire_release/#3-spsc","title":"3) \u5355\u751f\u4ea7\u8005\u5355\u6d88\u8d39\u8005\uff08SPSC\uff09\u73af\u5f62\u961f\u5217\u7d22\u5f15\u53d1\u5e03","text":"<pre><code>#include &lt;atomic&gt;\n#include &lt;array&gt;\nconstexpr size_t N = 1024;\nstd::array&lt;int, N&gt; buf;\nstd::atomic&lt;size_t&gt; w{0}, r{0};\n\nvoid producer(int x) {\n    auto wi = w.load(std::memory_order_relaxed);\n    auto ri = r.load(std::memory_order_acquire);            // \u770b\u5230\u6700\u65b0 r \u9632\u8d8a\u754c\n    while (((wi + 1) % N) == ri) ri = r.load(std::memory_order_acquire); // \u6ee1\n    buf[wi] = x;                                            // \u666e\u901a\u5199\n    w.store((wi + 1) % N, std::memory_order_release);       // \u53d1\u5e03\u5199\u5165\u5b8c\u6210\n}\n\nint consumer() {\n    auto ri = r.load(std::memory_order_relaxed);\n    auto wi = w.load(std::memory_order_acquire);            // \u83b7\u53d6\u4ee5\u770b\u5230 buf \u5199\u5165\n    while (ri == wi) wi = w.load(std::memory_order_acquire); // \u7a7a\n    int x = buf[ri];                                        // \u5b89\u5168\u8bfb\n    r.store((ri + 1) % N, std::memory_order_release);       // \u53d1\u5e03\u6d88\u8d39\u8fdb\u5ea6\n    return x;\n}\n</code></pre>","tags":["language"]},{"location":"language/memory_order_acquire_release/#4-acquire-release","title":"4) \u8f7b\u91cf\u81ea\u65cb\u9501\uff08\u83b7\u53d6 acquire\uff0c\u91ca\u653e release\uff09","text":"<pre><code>#include &lt;atomic&gt;\nstd::atomic_flag spin = ATOMIC_FLAG_INIT;\n\nvoid lock()   { while (spin.test_and_set(std::memory_order_acquire)) {} }\nvoid unlock() {        spin.clear(std::memory_order_release);            }\n</code></pre>","tags":["language"]},{"location":"language/memory_order_acquire_release/#5-relaxed","title":"5) \u4ec5\u8ba1\u6570/\u7edf\u8ba1\uff08\u53ef\u7528 relaxed\uff09","text":"<pre><code>#include &lt;atomic&gt;\nstd::atomic&lt;int&gt; counter{0};\n\nvoid worker() {\n    for (int i = 0; i &lt; 100000; ++i)\n        counter.fetch_add(1, std::memory_order_relaxed); // \u53ea\u9700\u6570\u503c\u6b63\u786e\n}\n</code></pre>","tags":["language"]},{"location":"language/memory_order_acquire_release/#stdatomic","title":"\u4e0e <code>std::atomic</code> \u7684\u5173\u7cfb","text":"<ul> <li>\u5185\u5b58\u5e8f\u53c2\u6570\u4ec5\u7528\u4e8e\uff1a</li> <li><code>std::atomic&lt;T&gt;</code> \u7684\u539f\u5b50\u64cd\u4f5c\uff08<code>load</code> \u53ef <code>acquire/relaxed/seq_cst</code>\uff1b<code>store</code> \u53ef <code>release/relaxed/seq_cst</code>\uff1b\u8bfb\u6539\u5199\u7c7b\u5e38\u7528 <code>acq_rel</code>\uff09\uff0c\u4ee5\u53ca</li> <li><code>std::atomic_thread_fence(order)</code>\uff08\u8de8\u591a\u4e2a\u539f\u5b50\u5efa\u7acb\u66f4\u5e7f\u4e49\u7684\u5c4f\u969c\uff0c\u5c11\u6570\u573a\u666f\u4f7f\u7528\uff09\u3002</li> <li>\u666e\u901a\u53d8\u91cf\u7684\u8bfb\u5199\u4e0d\u63a5\u53d7 <code>memory_order</code>\uff1b\u8981\u53d7\u5176\u4fdd\u62a4\uff0c\u5fc5\u987b\u901a\u8fc7\u4e0e\u4e4b\u914d\u5bf9\u7684\u539f\u5b50\u64cd\u4f5c\u5efa\u7acb\u540c\u6b65\u5173\u7cfb\u3002</li> </ul>","tags":["language"]},{"location":"language/memory_order_acquire_release/#acquirerelease","title":"\u4f55\u65f6\u4e0d\u8981\u7528 acquire/release","text":"<ul> <li>\u4ec5\u5173\u5fc3\u539f\u5b50\u81ea\u8eab\u503c\u3001\u4e0d\u4f9d\u8d56\u5176\u4ed6\u6570\u636e\u53ef\u89c1\u6027\uff1a\u7528 <code>relaxed</code> \u66f4\u5feb\u3002</li> <li>\u9700\u8981\u5168\u5c40\u65f6\u5e8f\u76f4\u89c2\u4e0e\u8c03\u8bd5\u65b9\u4fbf\uff1a\u4f7f\u7528\u9ed8\u8ba4 <code>seq_cst</code>\u3002</li> <li>\u4fdd\u62a4\u590d\u6742\u4e0d\u53d8\u91cf/\u5927\u4e34\u754c\u533a\uff1a\u7528 <code>std::mutex</code>/<code>std::lock_guard</code> \u66f4\u5b89\u5168\u3001\u7701\u5fc3\u3002</li> </ul>","tags":["language"]},{"location":"language/memory_order_acquire_release/#volatile","title":"\u8bef\u533a\uff1a<code>volatile</code> \u4e0d\u662f\u5e76\u53d1\u540c\u6b65","text":"<ul> <li><code>volatile</code> \u53ea\u610f\u5473\u7740\u201c\u6bcf\u6b21\u90fd\u771f\u7684\u8bbf\u95ee\u5185\u5b58\u201d\uff0c\u4e0d\u4fdd\u8bc1\u539f\u5b50\u6027/\u53ef\u89c1\u6027/\u987a\u5e8f\uff1b\u8de8\u7ebf\u7a0b\u5bf9\u540c\u4e00\u5bf9\u8c61\u7684\u975e\u539f\u5b50\u8bfb\u5199\uff08\u5373\u4fbf <code>volatile</code>\uff09\u662f\u6570\u636e\u7ade\u4e89\uff0c\u884c\u4e3a\u672a\u5b9a\u4e49\u3002</li> </ul> <p>\u53cd\u4f8b\u4e0e\u6b63\u786e\u505a\u6cd5\uff1a</p> <pre><code>#include &lt;thread&gt;\n#include &lt;atomic&gt;\n\nvolatile bool stop_bad = false; // \u274c \u975e\u539f\u5b50\uff0c\u5b58\u5728\u6570\u636e\u7ade\u4e89\nstd::atomic&lt;bool&gt; stop{false};  // \u2705 \u539f\u5b50\n\nint main() {\n    std::thread t1([]{\n        while (!stop.load(std::memory_order_acquire)) {}\n    });\n    stop.store(true, std::memory_order_release);\n    t1.join();\n}\n</code></pre>","tags":["language"]},{"location":"language/memory_order_acquire_release/#_3","title":"\u9762\u8bd5\u901f\u8bb0","text":"<ul> <li>\u201c\u53d1\u5e03\u5c31\u7eea\u6807\u5fd7\u7528 release\uff0c\u7b49\u5f85\u5c31\u7eea\u7528 acquire\u201d\u3002</li> <li>\u9700\u8981\u4ece\u5199\u7ebf\u7a0b\u201c\u5e26\u51fa\u201d\u5176\u4ed6\u666e\u901a\u5199\u5165\uff1a<code>store(release)</code> + <code>load(acquire)</code> \u6210\u5bf9\u4f7f\u7528\u3002</li> <li>\u53ea\u7edf\u8ba1\u4e0d\u4f9d\u8d56\u5176\u4ed6\u6570\u636e\u53ef\u89c1\u6027\uff1a<code>relaxed</code>\u3002</li> <li>\u590d\u6742\u540c\u6b65\u522b\u786c\u51f9\u5185\u5b58\u5e8f\uff1a\u7528\u9501\u6216\u4fdd\u6301 <code>seq_cst</code>\u3002</li> </ul>","tags":["language"]},{"location":"language/move_vs_forward/","title":"std::move \u4e0e std::forward \u7684\u533a\u522b\uff1f","text":"","tags":["language"]},{"location":"language/move_vs_forward/#_1","title":"\u6838\u5fc3\u533a\u522b","text":"<ul> <li><code>std::move</code>\uff1a\u65e0\u6761\u4ef6\u628a\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u53f3\u503c\uff08<code>T&amp;&amp;</code>\uff09\uff0c\u8868\u793a\u201c\u6211\u4e0d\u518d\u9700\u8981\u5b83\uff0c\u53ef\u88ab\u79fb\u8d70\u201d\u3002\u5b83\u53ea\u662f\u8f6c\u6362\uff0c\u4e0d\u4f1a\u771f\u6b63\u79fb\u52a8\u3002</li> <li><code>std::forward&lt;T&gt;</code>\uff1a\u6309\u539f\u5b9e\u53c2\u7684\u503c\u7c7b\u522b\u201c\u6761\u4ef6\u8f6c\u53f3\u503c\u201d\u3002\u4ec5\u5f53\u539f\u5b9e\u53c2\u662f\u53f3\u503c\u4e14\u6a21\u677f\u53c2\u6570 <code>T</code> \u4e0d\u662f\u5de6\u503c\u5f15\u7528\u65f6\uff0c\u624d\u8f6c\u6210\u53f3\u503c\uff1b\u5426\u5219\u4fdd\u6301\u4e3a\u5de6\u503c\u3002\u7528\u4e8e\u201c\u5b8c\u7f8e\u8f6c\u53d1\u201d\u3002</li> </ul>","tags":["language"]},{"location":"language/move_vs_forward/#_2","title":"\u4f55\u65f6\u4f7f\u7528","text":"<ul> <li>\u4f7f\u7528 <code>std::move</code>\uff08\u4f60\u5728\u5f53\u524d\u5904\u8981\u201c\u62ff\u8d70\u8d44\u6e90\u201d\uff09</li> <li>\u5bb9\u5668\u63d2\u5165/\u8d4b\u503c\uff1a<code>vec.push_back(std::move(s));</code></li> <li>\u6210\u5458\u521d\u59cb\u5316\uff1a<code>S(std::string s): s_(std::move(s)) {}</code></li> <li> <p>\u63a5\u53e3\u6309\u503c\u63a5\u6536\u518d\u843d\u5730\uff1a<code>void set(std::string v){ value_ = std::move(v); }</code></p> </li> <li> <p>\u4f7f\u7528 <code>std::forward</code>\uff08\u4f60\u53ea\u662f\u201c\u4e2d\u8f6c\u53c2\u6570\u201d\uff0c\u4fdd\u7559\u5b83\u539f\u672c\u662f\u5de6\u503c/\u53f3\u503c\uff09</p> </li> <li>\u4ec5\u5728\u201c\u8f6c\u53d1\u5f15\u7528\u201d\u6a21\u677f\u4e2d\uff1a<code>template&lt;class T&gt; void f(T&amp;&amp; x) { g(std::forward&lt;T&gt;(x)); }</code></li> <li>\u5de5\u5382/\u6784\u9020/<code>emplace</code> \u53c2\u6570\u4f20\u9012\uff1a<code>Ctor(Args&amp;&amp;... a): base_(std::forward&lt;Args&gt;(a)...) {}</code></li> </ul>","tags":["language"]},{"location":"language/move_vs_forward/#_3","title":"\u8fd4\u56de\u503c\u5efa\u8bae","text":"<ul> <li>\u8fd4\u56de\u5c40\u90e8\u5bf9\u8c61\u6309\u503c\uff1a\u4f18\u5148\u76f4\u63a5 <code>return x;</code>\uff0c\u8ba9\u7f16\u8bd1\u5668\u505a NRVO/\u590d\u5236\u7701\u7565\uff1b\u4e0d\u8981\u5f3a\u5199 <code>std::move(x)</code>\uff08\u53ef\u80fd\u6291\u5236 NRVO\uff09\u3002</li> <li>\u8fd4\u56de\u6210\u5458/\u53c2\u6570\u65f6\u9700\u8981\u660e\u786e\u79fb\u52a8\uff1a<code>return std::move(member_);</code></li> </ul>","tags":["language"]},{"location":"language/move_vs_forward/#_4","title":"\u5e38\u89c1\u6ce8\u610f\u70b9","text":"<ul> <li><code>const</code> + move \u901a\u5e38\u9000\u5316\u4e3a\u62f7\u8d1d\uff1a<code>const T</code> \u88ab\u8f6c\u6210 <code>const T&amp;&amp;</code>\uff0c\u591a\u6570\u7c7b\u578b\u7684\u79fb\u52a8\u6784\u9020/\u8d4b\u503c\u65e0\u6cd5\u7ed1\u5b9a\u5230 <code>const</code>\uff0c\u6700\u7ec8\u4f1a\u590d\u5236\u3002</li> <li>\u53ea\u5728\u201c\u8f6c\u53d1\u5f15\u7528\u201d\uff08<code>T&amp;&amp;</code> \u4e14 <code>T</code> \u53c2\u4e0e\u7c7b\u578b\u63a8\u5bfc\uff09\u4f4d\u7f6e\u4f7f\u7528 <code>std::forward</code>\uff1b\u82e5\u5f62\u53c2\u662f <code>T&amp;</code>/<code>const T&amp;</code> \u6216\u975e\u6a21\u677f\uff0c<code>forward</code> \u6ca1\u610f\u4e49\u3002</li> <li>\u79fb\u52a8\u540e\u5bf9\u8c61\u4ecd\u9700\u4fdd\u6301\u201c\u6709\u6548\u4f46\u672a\u6307\u5b9a\u72b6\u6001\u201d\uff1b\u4e0d\u8981\u4f9d\u8d56\u5176\u65e7\u503c\uff0c\u4ec5\u80fd\u6790\u6784\u6216\u91cd\u65b0\u8d4b\u503c\u3002</li> <li>\u6709\u5f02\u5e38\u4fdd\u8bc1\u8981\u6c42\u65f6\uff0c\u53ef\u8003\u8651 <code>std::move_if_noexcept</code>\uff1a\u79fb\u52a8\u53ef\u80fd\u629b\u5f02\u5e38\u800c\u62f7\u8d1d\u4e0d\u629b\u65f6\u9009\u62e9\u62f7\u8d1d\u3002</li> <li>\u53f3\u503c\u4e00\u65e6\u201c\u8d77\u4e86\u540d\u5b57\u201d\u5c31\u6210\u4e86\u5de6\u503c\u8868\u8fbe\u5f0f\uff0c\u82e5\u8981\u7ee7\u7eed\u6309\u53f3\u503c\u4f20\u9012\uff0c\u9700\u8981 <code>std::move</code>/<code>std::forward</code> \u7ef4\u6301\u53f3\u503c\u6027\u3002</li> </ul>","tags":["language"]},{"location":"language/move_vs_forward/#_5","title":"\u6700\u5c0f\u793a\u4f8b\uff08\u4ec5\u4fdd\u7559\u5173\u952e\u5934\u6587\u4ef6\uff09","text":"<pre><code>#include &lt;string&gt;\n#include &lt;utility&gt; // std::move, std::forward\n\n// \u7528\u4e8e\u533a\u5206\u5de6\u503c/\u53f3\u503c\u8c03\u7528\u8def\u5f84\uff08\u7a7a\u5b9e\u73b0\u5373\u53ef\uff09\ninline void f(const std::string&amp;) {}\ninline void f(std::string&amp;&amp;) {}\n\ntemplate&lt;class T&gt;\nvoid forwarder(T&amp;&amp; x) {\n    // \u5b8c\u7f8e\u8f6c\u53d1\uff1a\u5de6\u503c\u4ecd\u662f\u5de6\u503c\uff0c\u53f3\u503c\u4ecd\u662f\u53f3\u503c\n    f(std::forward&lt;T&gt;(x));\n}\n\nstruct Holder {\n    std::string m;\n    std::string take() { return std::move(m); } // \u660e\u786e\u628a\u6210\u5458\u79fb\u51fa\n};\n\n// \u8fd4\u56de\u503c\uff1a\u4f18\u5148\u8ba9\u7f16\u8bd1\u5668\u505a NRVO\uff08\u4e0d\u8981\u5f3a\u5199 std::move\uff09\ninline std::string make() {\n    std::string t = \"xyz\";\n    return t; // NRVO/\u590d\u5236\u7701\u7565\n}\n\ninline void demo() {\n    // std::forward\uff1a\u4ec5\u5728\u201c\u8f6c\u53d1\u5f15\u7528\u201d\u6a21\u677f\u4e2d\u4f7f\u7528\n    std::string a = \"A\";\n    forwarder(a);                   // \u5de6\u503c -&gt; f(const&amp;)\n    forwarder(std::string(\"B\"));    // \u53f3\u503c -&gt; f(&amp;&amp;)\n    auto tmp = std::string(\"C\");\n    forwarder(std::move(tmp));      // \u547d\u540d\u5bf9\u8c61\u53f3\u503c\u5316 -&gt; f(&amp;&amp;)\n\n    // std::move\uff1a\u5f53\u4e0b\u5c31\u8981\u79fb\u4ea4\u8d44\u6e90\n    std::string name = \"alice\";\n    f(std::move(name));             // name \u8fdb\u5165\u201c\u6709\u6548\u4f46\u672a\u6307\u5b9a\u201d\u72b6\u6001\n\n    // const + move\uff1a\u901a\u5e38\u9000\u5316\u4e3a\u62f7\u8d1d\uff08\u591a\u6570\u7c7b\u578b\u5bf9 const \u4e0d\u63d0\u4f9b\u79fb\u52a8\uff09\n    const std::string cs = \"const\";\n    f(std::move(cs));               // \u8c03\u7528 f(const&amp;)\uff08\u7b49\u4ef7\u4e8e\u62f7\u8d1d\u8bed\u4e49\uff09\n}\n</code></pre>","tags":["language"]},{"location":"language/move_vs_forward/#_6","title":"\u4e00\u53e5\u8bdd\u603b\u7ed3","text":"<p>\u4f60\u81ea\u5df1\u5728\u5f53\u524d\u8bed\u5883\u8981\u201c\u62ff\u8d70\u8d44\u6e90\u201d\u65f6\u7528 <code>std::move</code>\uff1b\u4f60\u53ea\u662f\u4e2d\u8f6c\u53c2\u6570\u3001\u5e0c\u671b\u4fdd\u7559\u5b83\u539f\u672c\u662f\u5de6\u503c\u8fd8\u662f\u53f3\u503c\u65f6\u7528 <code>std::forward&lt;T&gt;</code>\u3002</p>","tags":["language"]},{"location":"language/thundering_herd/","title":"\u60ca\u7fa4\u95ee\u9898\u4e0e\u907f\u514d\u7b56\u7565\uff08\u6761\u4ef6\u53d8\u91cf/IO\uff09","text":"","tags":["concurrency","condition_variable","synchronization","OS"]},{"location":"language/thundering_herd/#thundering-herd","title":"\u4ec0\u4e48\u662f\u201c\u60ca\u7fa4\u201d\uff08Thundering Herd\uff09\uff1f","text":"<p>\u5f53\u591a\u4e2a\u7ebf\u7a0b/\u8fdb\u7a0b\u5728\u7b49\u5f85\u540c\u4e00\u4e2a\u4e8b\u4ef6\uff08\u6761\u4ef6\uff09\u65f6\uff0c\u4e00\u6b21\u4e8b\u4ef6\u5230\u6765\u5bfc\u81f4\u5927\u91cf\u7b49\u5f85\u8005\u540c\u65f6\u88ab\u5524\u9192\uff1b\u4f46\u771f\u6b63\u80fd\u524d\u8fdb\u7684\u5f80\u5f80\u53ea\u6709\u6781\u5c11\u6570\uff0c\u5176\u4f59\u5f88\u5feb\u53c8\u7761\u56de\u53bb\u3002\u8fd9\u4f1a\u9020\u6210 CPU \u62a2\u5360\u3001\u7f13\u5b58\u6296\u52a8\u3001\u4e0a\u4e0b\u6587\u5207\u6362\u589e\u52a0\u4e0e\u5ef6\u8fdf\u4e0a\u5347\u3002</p> <p>\u5178\u578b\u573a\u666f\uff1a</p> <ul> <li>\u6761\u4ef6\u53d8\u91cf <code>notify_all</code> \u5524\u9192\u4e86\u6240\u6709\u7b49\u5f85\u8005\uff0c\u4f46\u8c13\u8bcd\u53ea\u5141\u8bb8 1 \u4e2a\u7ebf\u7a0b\u7ee7\u7eed\uff1b\u5176\u4f59\u88ab\u5524\u9192\u3001\u4e89\u9501\u3001\u53d1\u73b0\u8c13\u8bcd\u4e3a\u5047\u540e\u518d\u6b21\u7761\u7720\u3002</li> <li>\u591a\u7ebf\u7a0b/\u591a\u8fdb\u7a0b\u540c\u65f6 <code>accept</code> \u540c\u4e00\u76d1\u542c\u5957\u63a5\u5b57\uff0c\u6216\u591a\u4e2a\u7ebf\u7a0b\u5bf9\u540c\u4e00 fd \u505a <code>poll/epoll</code> \u7ade\u4e89\u4e8b\u4ef6\u3002</li> </ul>","tags":["concurrency","condition_variable","synchronization","OS"]},{"location":"language/thundering_herd/#_1","title":"\u4e3a\u4ec0\u4e48\u53d1\u751f\uff1f","text":"<ul> <li>C++ \u6761\u4ef6\u53d8\u91cf\u91c7\u7528 Mesa \u8bed\u4e49\uff1a\u88ab\u5524\u9192\u540e\u9700\u5728\u9501\u5185\u91cd\u65b0\u68c0\u67e5\u8c13\u8bcd\u3002<code>notify_all</code> \u4f1a\u5524\u9192\u5168\u90e8\u7b49\u5f85\u8005\uff1b\u53ea\u6709\u62ff\u5230\u9501\u4e14\u8c13\u8bcd\u4e3a\u771f\u7684\u5c11\u6570\u80fd\u7ee7\u7eed\uff0c\u5176\u4f59\u90fd\u4f1a\u201c\u7a7a\u8f6c\u4e00\u6b21\u201d\u3002</li> <li>\u5185\u6838/IO \u5c42\u540c\u6837\u5b58\u5728\u7c7b\u4f3c\u73b0\u8c61\uff1a\u540c\u4e00\u89e6\u53d1\u6e90\u4e0a\u6709\u591a\u4e2a\u7b49\u5f85\u8005\uff08\u8fdb\u7a0b/\u7ebf\u7a0b\uff09\uff0c\u5185\u6838\u4e00\u6b21\u4e8b\u4ef6\u5230\u6765\u4f1a\u5c1d\u8bd5\u5524\u9192\u591a\u4e2a\u7b49\u5f85\u8005\u3002</li> </ul>","tags":["concurrency","condition_variable","synchronization","OS"]},{"location":"language/thundering_herd/#_2","title":"\u901a\u7528\u907f\u514d\u7b56\u7565","text":"<ul> <li>\u9996\u9009 <code>notify_one</code> \u800c\u975e <code>notify_all</code>\uff08\u9664\u505c\u673a/\u5e7f\u64ad\u9000\u51fa\u7b49\u5fc5\u987b\u60c5\u5f62\uff09\u3002</li> <li>\u8bbe\u8ba1\u201c\u53ef\u91cd\u7b97\u8c13\u8bcd\u201d\uff0c\u4e25\u683c\u5728\u9501\u5185\u201c\u5148\u6539\u72b6\u6001\u2192\u89e3\u9501\u2192notify_one\u201d\u3002</li> <li>\u4e8b\u4ef6\u4e0e\u7b49\u5f85\u8005\u5206\u7247\uff08sharding\uff09\uff1a\u6309 key/\u961f\u5217/\u8d44\u6e90\u62c6\u5206\uff0c\u51cf\u5c11\u5171\u4eab\u7b49\u5f85\u70b9\u3002</li> <li>\u7528\u201c\u8ba1\u6570\u201d\u8868\u8fbe\u8d44\u6e90\u53ef\u7528\u5ea6\uff1a</li> <li>\u5982\u679c\u4e00\u6b21\u4f7f\u5f97 N \u4e2a\u8d44\u6e90\u53d8\u4e3a\u53ef\u7528\uff0c\u5e94\u5f53 <code>notify_one</code> \u91cd\u590d N \u6b21\uff0c\u6216\u4f7f\u7528\u201c\u8ba1\u6570\u4fe1\u53f7\u91cf\u201d\u3002</li> <li>\u4f7f\u7528 C++20 \u540c\u6b65\u539f\u8bed\uff1a<code>std::counting_semaphore</code>/<code>std::binary_semaphore</code> \u81ea\u7136\u6309\u914d\u989d\u5524\u9192\u5355\u4e2a\u7b49\u5f85\u8005\uff0c\u9002\u5408\u8d44\u6e90\u8ba1\u6570\u578b\u95ee\u9898\u3002</li> </ul>","tags":["concurrency","condition_variable","synchronization","OS"]},{"location":"language/thundering_herd/#_3","title":"\u6761\u4ef6\u53d8\u91cf\u7684\u6700\u4f73\u5b9e\u8df5\uff08\u591a\u7b49\u5f85\u8005\uff09","text":"<ul> <li>\u8fb9\u754c\u60c5\u5f62\u624d\u7528 <code>notify_all</code>\uff1a\u4ec5\u7528\u4e8e\u505c\u673a/\u5173\u95ed\u3001\u6216\u8c13\u8bcd\u53ef\u80fd\u8ba9\u201c\u591a\u6570\u7b49\u5f85\u8005\u90fd\u53d8\u771f\u201d\u7684\u60c5\u5f62\u3002</li> <li>\u5bf9\u4e8e\u6709\u754c\u961f\u5217\uff1a</li> <li>\u4e24\u4e2a\u8c13\u8bcd/\u4e24\u4e2a\u6761\u4ef6\u53d8\u91cf\uff1a<code>not_empty</code>\uff08\u6d88\u8d39\u8005\u7b49\u5f85\uff09\u3001<code>not_full</code>\uff08\u751f\u4ea7\u8005\u7b49\u5f85\uff09\u3002</li> <li>\u6bcf\u6b21\u751f\u4ea7\u5b8c\u6210\u540e <code>notify_one(not_empty)</code>\uff1b\u6bcf\u6b21\u6d88\u8d39\u5b8c\u6210\u540e <code>notify_one(not_full)</code>\u3002</li> <li>\u505c\u673a\u65f6\u5e7f\u64ad\uff1a<code>notify_all</code> \u5524\u9192\u6240\u6709\u7b49\u5f85\u8005\u9000\u51fa\u3002</li> </ul> <p>\u793a\u4f8b\uff08MPMC \u6709\u754c\u961f\u5217\uff09</p> <pre><code>template&lt;class T&gt;\nclass BoundedQueue {\npublic:\n  explicit BoundedQueue(size_t cap): cap_(cap) {}\n\n  bool push(T v) {\n    std::unique_lock&lt;std::mutex&gt; lk(m_);\n    not_full_.wait(lk, [&amp;]{ return stop_ || q_.size() &lt; cap_; });\n    if (stop_) return false;\n    q_.push(std::move(v));\n    lk.unlock();\n    not_empty_.notify_one(); // \u5524\u9192\u4e00\u4e2a\u6d88\u8d39\u8005\uff0c\u907f\u514d\u60ca\u7fa4\n    return true;\n  }\n\n  bool pop(T&amp; out) {\n    std::unique_lock&lt;std::mutex&gt; lk(m_);\n    not_empty_.wait(lk, [&amp;]{ return stop_ || !q_.empty(); });\n    if (q_.empty()) return false; // stop\n    out = std::move(q_.front());\n    q_.pop();\n    lk.unlock();\n    not_full_.notify_one(); // \u5524\u9192\u4e00\u4e2a\u751f\u4ea7\u8005\uff0c\u907f\u514d\u60ca\u7fa4\n    return true;\n  }\n\n  void stop() {\n    { std::lock_guard&lt;std::mutex&gt; lk(m_); stop_ = true; }\n    not_empty_.notify_all();\n    not_full_.notify_all();\n  }\n\nprivate:\n  std::mutex m_;\n  std::condition_variable not_empty_, not_full_;\n  std::queue&lt;T&gt; q_;\n  size_t cap_;\n  bool stop_ = false;\n};\n</code></pre> <p>\u8bf4\u660e\uff1a\u6bcf\u6b21\u53ea\u5524\u9192\u201c\u9700\u8981\u524d\u8fdb\u7684\u4e00\u4e2a\u7b49\u5f85\u8005\u201d\uff0c\u628a\u53ef\u7528\u5ea6\u7684\u9012\u589e\u6309\u5355\u4f4d\u8f6c\u5316\u4e3a\u4e00\u6b21 <code>notify_one</code>\u3002\u8fd9\u80fd\u5728\u4fdd\u8bc1\u6b63\u786e\u6027\u7684\u540c\u65f6\u663e\u8457\u51cf\u5c11\u65e0\u8c13\u5524\u9192\u3002</p>","tags":["concurrency","condition_variable","synchronization","OS"]},{"location":"language/thundering_herd/#io","title":"IO \u5c42\u9762\u7684\u60ca\u7fa4\u4e0e\u7f13\u89e3","text":"<ul> <li>\u591a\u7ebf\u7a0b <code>accept</code> \u540c\u4e00\u76d1\u542c\u5957\u63a5\u5b57\uff1a</li> <li>\u5355\u7ebf\u7a0b accept + \u4efb\u52a1\u6d3e\u53d1\uff08\u961f\u5217/\u7ba1\u9053\u4ea4\u7ed9\u5de5\u4f5c\u7ebf\u7a0b\uff09\u3002</li> <li>Linux: <code>SO_REUSEPORT</code> \u8ba9\u5185\u6838\u505a\u8fde\u63a5\u5206\u6d41\uff1b\u6216 epoll \u4f7f\u7528 <code>EPOLLEXCLUSIVE</code>\uff084.5+\uff09\u964d\u4f4e\u60ca\u7fa4\u3002</li> <li><code>epoll</code>/<code>kqueue</code> \u7b49\uff1a\u4f18\u5148\u4f7f\u7528\u201c\u72ec\u5360/\u516c\u5e73\u201d\u5524\u9192\u673a\u5236\uff1b\u907f\u514d\u591a\u4e2a\u5faa\u73af\u5b9e\u4f53\u7ade\u4e89\u540c\u4e00\u4e8b\u4ef6\u3002</li> </ul>","tags":["concurrency","condition_variable","synchronization","OS"]},{"location":"language/thundering_herd/#notify_all","title":"\u4f55\u65f6\u53ef\u4ee5\u63a5\u53d7 <code>notify_all</code>\uff1f","text":"<ul> <li>\u505c\u673a/\u53d6\u6d88\u5e7f\u64ad\uff0c\u5fc5\u987b\u5524\u9192\u6240\u6709\u7b49\u5f85\u8005\u4ee5\u5c3d\u5feb\u9000\u51fa\u3002</li> <li>\u8c13\u8bcd\u53d8\u5316\u4f7f\u5f97\u201c\u51e0\u4e4e\u6240\u6709\u7b49\u5f85\u8005\u90fd\u6ee1\u8db3\u6761\u4ef6\u201d\uff0c\u4e14\u5524\u9192\u6210\u672c\u53ef\u63a5\u53d7\u3002</li> </ul>","tags":["concurrency","condition_variable","synchronization","OS"]},{"location":"language/thundering_herd/#_4","title":"\u5feb\u901f\u8981\u70b9","text":"<ul> <li>\u5355\u7b49\u5f85\u8005/\u70b9\u5bf9\u70b9\uff1a<code>notify_one</code> + \u5148\u6539\u72b6\u6001\u540e\u901a\u77e5\uff1b\u89c1\u300c\u6761\u4ef6\u53d8\u91cf\u4f7f\u7528\u89c4\u8303\uff08\u5355\u7b49\u5f85\u8005/\u70b9\u5bf9\u70b9\uff09\u300d\u3002</li> <li>\u591a\u7b49\u5f85\u8005\uff1a\u6309\u8d44\u6e90\u589e\u91cf\u5524\u9192\u540c\u7b49\u6570\u91cf\u7684\u7b49\u5f85\u8005\uff1b\u4f18\u5148\u4fe1\u53f7\u91cf\u6216\u91cd\u590d <code>notify_one</code>\u3002</li> <li>IO\uff1a\u4f7f\u7528 <code>SO_REUSEPORT</code>/<code>EPOLLEXCLUSIVE</code> \u6216\u96c6\u4e2d accept \u5206\u53d1\u3002</li> </ul>","tags":["concurrency","condition_variable","synchronization","OS"]},{"location":"language/type_conversion/","title":"C++ \u56db\u79cd\u7c7b\u578b\u8f6c\u6362","text":"<p>\u4e00\u56fe\u901f\u89c8\uff1aC++ \u56db\u79cd\u7c7b\u578b\u8f6c\u6362</p> \u8f6c\u6362 \u7528\u9014 \u68c0\u67e5\u65f6\u673a \u9650\u5236 \u98ce\u9669 <code>static_cast</code> \u57fa\u672c\u8f6c\u6362 / \u4e0a\u884c\u8f6c\u578b \u7f16\u8bd1\u671f \u4e0d\u6539 <code>const</code> / \u65e0\u8fd0\u884c\u65f6\u68c0\u67e5 \u4e2d <code>dynamic_cast</code> \u591a\u6001\u4e0b\u884c\u8f6c\u578b \u8fd0\u884c\u671f \u9700\u865a\u51fd\u6570\uff1b\u5931\u8d25\u8fd4\u56de\u7a7a/\u629b\u5f02\u5e38 \u4f4e <code>const_cast</code> \u6539 <code>const</code>/<code>volatile</code> \u7f16\u8bd1\u671f \u771f\u5e38\u91cf\u4e0d\u53ef\u6539 \u89c6\u7528\u6cd5 <code>reinterpret_cast</code> \u5e95\u5c42\u91cd\u89e3\u91ca \u7f16\u8bd1\u671f \u4e0d\u505a\u68c0\u67e5 \u9ad8","tags":["language"]},{"location":"language/type_conversion/#_1","title":"\u5173\u952e\u8981\u70b9","text":"<ul> <li><code>static_cast</code>\uff1a\u57fa\u672c\u7c7b\u578b\u8f6c\u6362\uff1b\u5411\u4e0a\u8f6c\u578b\u5b89\u5168\uff1b\u4e0d\u80fd\u53bb\u6389 <code>const/volatile</code>\u3002</li> <li><code>dynamic_cast</code>\uff1a\u9700\u591a\u6001\uff0c\u5b89\u5168\u4e0b\u884c\uff1b\u5931\u8d25\u65f6\u6307\u9488\u4e3a <code>nullptr</code> \u6216\u629b\u5f02\u5e38\u3002</li> <li><code>const_cast</code>\uff1a\u53ea\u6539\u9650\u5b9a\u7b26\uff0c\u4fee\u6539\u771f\u5e38\u91cf\u672a\u5b9a\u4e49\u3002</li> <li><code>reinterpret_cast</code>\uff1a\u4f4d\u7ea7\u91cd\u89e3\u91ca\uff0c\u98ce\u9669\u6700\u9ad8\uff0c\u614e\u7528\u3002</li> </ul>","tags":["language"]},{"location":"language/type_conversion/#_2","title":"\u5b9e\u6218\u5efa\u8bae","text":"<ol> <li>\u80fd\u4e0d\u7528\u5c31\u4e0d\u7528\uff0c\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u8f6c\u6362\u3002</li> <li>\u9996\u9009 <code>static_cast</code>\uff1b\u5411\u4e0b\u8f6c\u578b\u9700 <code>dynamic_cast</code>\u3002</li> <li>\u4ec5\u6539\u9650\u5b9a\u7b26\u7528 <code>const_cast</code>\u3002</li> <li><code>reinterpret_cast</code> \u53ea\u5728\u5e95\u5c42\u9700\u6c42\u4e14\u660e\u786e\u540e\u679c\u65f6\u4f7f\u7528\u3002</li> </ol> <p>\u76f8\u5173\u9605\u8bfb\uff1a\u5173\u4e8e\u7981\u6b62\u9690\u5f0f\u8f6c\u6362\u4e0e\u6761\u4ef6 <code>explicit</code> \u7684\u7528\u6cd5\u4e0e\u9677\u9631\uff0c\u89c1\u300cexplicit \u5173\u952e\u5b57\u7684\u4f5c\u7528\u300d\u3002</p>","tags":["language"]},{"location":"language/type_conversion/#_3","title":"\u4ee3\u7801\u6a21\u5f0f\u8bb0\u5fc6\u5361","text":"<pre><code>if (auto p = dynamic_cast&lt;Derived*&gt;(base)) {\n    // use p\n}\n\ntry {\n    auto&amp; d = dynamic_cast&lt;Derived&amp;&gt;(base);\n} catch (const std::bad_cast&amp;) {\n    // \u5931\u8d25\u5904\u7406\n}\n\nconst int* p = /* ... */;\nint* q = const_cast&lt;int*&gt;(p); // \u53bb const\uff08\u8c28\u614e\uff09\nint x = 0;\nconst int* r = const_cast&lt;const int*&gt;(&amp;x); // \u52a0 const\n\nstd::uintptr_t u = reinterpret_cast&lt;std::uintptr_t&gt;(ptr);\nauto* p2 = reinterpret_cast&lt;Foo*&gt;(u);\n</code></pre>","tags":["language"]},{"location":"language/type_conversion/#static_cast","title":"<code>static_cast</code>","text":"","tags":["language"]},{"location":"language/type_conversion/#_4","title":"\u57fa\u672c\u7c7b\u578b\u8f6c\u6362","text":"<pre><code>int i = 42;\ndouble d = static_cast&lt;double&gt;(i);      // 42 -&gt; 42.0\n\ndouble pi = 3.14;\nint truncated = static_cast&lt;int&gt;(pi);   // \u7ed3\u679c: 3\n</code></pre> <p><code>static_cast</code> \u4f1a\u9075\u5faa\u65e2\u5b9a\u7684\u8f6c\u6362\u89c4\u5219\uff0c\u4f8b\u5982\u5c06\u6d6e\u70b9\u7684\u5c0f\u6570\u90e8\u5206\u820d\u5f03\u3002</p>","tags":["language"]},{"location":"language/type_conversion/#_5","title":"\u7c7b\u5c42\u6b21\u4e4b\u95f4\u7684\u8f6c\u6362","text":"<pre><code>struct Animal {\n    virtual ~Animal() = default;\n};\nstruct Dog : Animal {\n    void bark();\n};\n\nDog dog;\nAnimal* a1 = static_cast&lt;Animal*&gt;(&amp;dog);    // \u4e0a\u884c\u8f6c\u6362\uff0c\u5b89\u5168\n\nAnimal* base = &amp;dog;\nDog* d1 = static_cast&lt;Dog*&gt;(base);          // \u4e0b\u884c\u8f6c\u6362\uff0c\u9700\u786e\u4fdd base \u7684\u771f\u5b9e\u5bf9\u8c61\u786e\u5b9e\u662f Dog\n</code></pre> <p>\u5982\u679c <code>base</code> \u5b9e\u9645\u6307\u5411 <code>Animal</code> \u800c\u975e <code>Dog</code>\uff0c\u4f7f\u7528 <code>d1-&gt;bark()</code> \u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\u3002\u82e5\u65e0\u6cd5\u4fdd\u8bc1\uff0c\u8003\u8651 <code>dynamic_cast</code>\u3002</p>","tags":["language"]},{"location":"language/type_conversion/#dynamic_cast","title":"<code>dynamic_cast</code>","text":"","tags":["language"]},{"location":"language/type_conversion/#_6","title":"\u6307\u9488\u7684\u5b89\u5168\u4e0b\u884c\u8f6c\u6362","text":"<pre><code>Animal* base = new Dog{};\nif (auto* d = dynamic_cast&lt;Dog*&gt;(base)) {\n    d-&gt;bark();      // \u8f6c\u6362\u6210\u529f\n} else {\n    // base \u4e0d\u662f Dog*\uff0cd \u4e3a nullptr\n}\n</code></pre>","tags":["language"]},{"location":"language/type_conversion/#_7","title":"\u5f15\u7528\u7684\u5b89\u5168\u4e0b\u884c\u8f6c\u6362","text":"<pre><code>Animal&amp; ref = dog;  // dog \u4e0e\u4e0a\u6587\u4e00\u81f4\ntry {\n    Dog&amp; dref = dynamic_cast&lt;Dog&amp;&gt;(ref);\n    dref.bark();\n} catch (const std::bad_cast&amp;) {\n    // \u8f6c\u6362\u5931\u8d25\uff0c\u629b\u51fa\u5f02\u5e38\n}\n</code></pre> <p><code>dynamic_cast</code> \u4f9d\u8d56\u591a\u6001\u7c7b\u578b\u7684 RTTI\uff0c\u4ec5\u9002\u7528\u4e8e\u5e26\u865a\u51fd\u6570\u7684\u7c7b\uff1b\u82e5\u7c7b\u4e2d\u6ca1\u6709\u865a\u51fd\u6570\uff0c\u4f7f\u7528 <code>dynamic_cast</code> \u4f1a\u5728\u7f16\u8bd1\u671f\u62a5\u9519\u3002</p>","tags":["language"]},{"location":"language/type_conversion/#const_cast","title":"<code>const_cast</code>","text":"","tags":["language"]},{"location":"language/type_conversion/#_8","title":"\u53bb\u9664\u5e38\u91cf\u6027","text":"<pre><code>void takes_int(int*);\n\nconst int value = 10;\nint* writable = const_cast&lt;int*&gt;(&amp;value); // value \u662f\u771f\u5e38\u91cf\uff0c\u4fee\u6539\u5c06\u5bfc\u81f4 UB\n\nint n = 20;\ntakes_int(const_cast&lt;int*&gt;(&amp;n));          // n \u53ef\u5199\uff0c\u53ef\u5b89\u5168\u4fee\u6539\n</code></pre>","tags":["language"]},{"location":"language/type_conversion/#_9","title":"\u6dfb\u52a0\u5e38\u91cf\u6027","text":"<pre><code>void print(const int*);\n\nint x = 5;\nprint(const_cast&lt;const int*&gt;(&amp;x));        // \u5c06\u975e\u5e38\u91cf\u6307\u9488\u89c6\u4e3a const\n</code></pre>","tags":["language"]},{"location":"language/type_conversion/#reinterpret_cast","title":"<code>reinterpret_cast</code>","text":"","tags":["language"]},{"location":"language/type_conversion/#_10","title":"\u6307\u9488\u4e0e\u6574\u6570\u4e4b\u95f4","text":"<pre><code>int data = 0x12345678;\nstd::uintptr_t raw = reinterpret_cast&lt;std::uintptr_t&gt;(&amp;data);\nint* p = reinterpret_cast&lt;int*&gt;(raw); // raw \u518d\u8f6c\u56de\u6307\u9488\n</code></pre>","tags":["language"]},{"location":"language/type_conversion/#_11","title":"\u8bfb\u53d6\u5bf9\u8c61\u7684\u5b57\u8282\u8868\u793a","text":"<pre><code>unsigned char* bytes = reinterpret_cast&lt;unsigned char*&gt;(&amp;data);\nfor (std::size_t i = 0; i &lt; sizeof(int); ++i) {\n    std::printf(\"%02x \", bytes[i]);\n}\n</code></pre> <p><code>reinterpret_cast</code> \u4e0d\u6539\u53d8\u4f4d\u6a21\u5f0f\uff0c\u53ea\u662f\u4ece\u65b0\u7684\u89d2\u5ea6\u89e3\u8bfb\u5185\u5b58\u3002\u4f7f\u7528\u524d\u52a1\u5fc5\u786e\u8ba4\u5bf9\u9f50\u3001\u5b57\u8282\u5e8f\u7b49\u95ee\u9898\u3002</p>","tags":["language"]},{"location":"oop/heap_only_class/","title":"\u5982\u4f55\u8bbe\u8ba1\u4e00\u4e2a\u53ea\u80fd\u5728\u5806\u4e0a\u521b\u5efa\u5bf9\u8c61\u7684\u7c7b\uff1f","text":"","tags":["oop"]},{"location":"oop/heap_only_class/#_1","title":"\u95ee\u9898","text":"<p>\u5982\u4f55\u8bbe\u8ba1\u4e00\u4e2a\u53ea\u80fd\u5728\u5806\u4e0a\u521b\u5efa\u5bf9\u8c61\u7684\u7c7b\uff1f</p>","tags":["oop"]},{"location":"oop/heap_only_class/#_2","title":"\u56de\u7b54","text":"<p>\u8981\u8ba9\u7c7b\u53ea\u80fd\u5728\u5806\u4e0a\u521b\u5efa\uff0c\u5173\u952e\u662f\u963b\u6b62\u7f16\u8bd1\u5668\u5728\u6808\u4e0a\u5b8c\u6210\u6784\u9020\u6216\u6790\u6784\u3002\u5e38\u89c1\u505a\u6cd5\u6709\u4e09\u79cd\uff1a</p>","tags":["oop"]},{"location":"oop/heap_only_class/#a-deleter","title":"\u65b9\u6848 A\uff1a\u79c1\u6709/\u53d7\u4fdd\u62a4\u6790\u6784 + \u5de5\u5382 + \u81ea\u5b9a\u4e49 <code>deleter</code>","text":"<p>\u5c06\u6790\u6784\u51fd\u6570\u8bbe\u4e3a <code>private</code> \u6216 <code>protected</code>\uff0c\u6808\u5bf9\u8c61\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u7f16\u8bd1\u5668\u65e0\u6cd5\u8bbf\u95ee\u6790\u6784\u5668\uff0c\u4e8e\u662f\u7981\u6b62\u5728\u6808\u4e0a\u5b9a\u4e49\u3002\u5de5\u5382\u51fd\u6570\u5185\u90e8\u4f7f\u7528 <code>new</code> \u521b\u5efa\u5e76\u8fd4\u56de\u5e26\u81ea\u5b9a\u4e49 <code>deleter</code> \u7684\u667a\u80fd\u6307\u9488\uff0c\u4f7f <code>deleter</code> \u62e5\u6709\u8bbf\u95ee\u6790\u6784\u5668\u7684\u6743\u9650\u3002</p> <pre><code>#include &lt;memory&gt;\n\nclass HeapOnly {\npublic:\n    static std::unique_ptr&lt;HeapOnly, struct Deleter&gt; create(int x) {\n        return std::unique_ptr&lt;HeapOnly, Deleter&gt;(new HeapOnly(x));\n    }\n    int value() const { return x_; }\n\nprivate:\n    explicit HeapOnly(int x) : x_(x) {}\n    ~HeapOnly() = default;              // \u6790\u6784\u4e0d\u53ef\u89c1 -&gt; \u7981\u6808\n\n    struct Deleter {\n        void operator()(HeapOnly* p) const { delete p; }\n    };\n    friend struct Deleter;\n\n    int x_;\n};\n</code></pre> <p>\u4f18\u70b9\uff1a\u5f7b\u5e95\u7981\u6b62\u6808\u5bf9\u8c61\uff0c\u91ca\u653e\u7edf\u4e00\u4ea4\u7ed9\u667a\u80fd\u6307\u9488\u3002 \u6ce8\u610f\uff1a<code>std::make_shared</code> \u4e0d\u80fd\u7528\u4e8e\u8fd9\u79cd\u7c7b\u578b\uff0c\u9700\u8981\u81ea\u5b9a\u4e49 <code>deleter</code>\u3002</p>","tags":["oop"]},{"location":"oop/heap_only_class/#b","title":"\u65b9\u6848 B\uff1a\u79c1\u6709/\u53d7\u4fdd\u62a4\u6784\u9020 + \u9759\u6001\u5de5\u5382\u51fd\u6570","text":"<p>\u6784\u9020\u51fd\u6570\u8bbe\u4e3a <code>private</code> \u6216 <code>protected</code>\uff0c\u5916\u90e8\u65e2\u4e0d\u80fd\u5728\u6808\u4e0a\uff0c\u4e5f\u4e0d\u80fd\u76f4\u63a5 <code>new</code>\u3002\u5de5\u5382\u51fd\u6570\u5185\u90e8 <code>new</code> \u51fa\u5bf9\u8c61\u5e76\u8fd4\u56de <code>std::unique_ptr</code>\uff1b\u6790\u6784\u51fd\u6570\u53ef\u4ee5\u8bbe\u4e3a <code>public</code>\u3002</p> <pre><code>#include &lt;memory&gt;\n\nclass HeapOnly2 final {\npublic:\n    static std::unique_ptr&lt;HeapOnly2&gt; create(int x) {\n        return std::unique_ptr&lt;HeapOnly2&gt;(new HeapOnly2(x));\n    }\n\n    int value() const { return x_; }\n    ~HeapOnly2() = default;\n\nprivate:\n    explicit HeapOnly2(int x) : x_(x) {}\n    int x_;\n};\n</code></pre> <p>\u4f18\u70b9\uff1a\u5b9e\u73b0\u7b80\u6d01\uff0c\u9ed8\u8ba4\u5220\u9664\u5668\u53ef\u7528\u3002 \u6ce8\u610f\uff1a\u6700\u597d\u5c06\u7c7b\u6807\u8bb0\u4e3a <code>final</code>\uff0c\u907f\u514d\u6d3e\u751f\u7c7b\u66b4\u9732\u6784\u9020\u51fd\u6570\u7ed5\u8fc7\u9650\u5236\u3002</p>","tags":["oop"]},{"location":"oop/heap_only_class/#c-destroy","title":"\u65b9\u6848 C\uff1a\u79c1\u6709\u6790\u6784 + <code>destroy()</code>\uff08\u4f20\u7edf\u505a\u6cd5\uff09","text":"<p>\u63d0\u4f9b\u9759\u6001 <code>create()</code> \u8fd4\u56de\u88f8\u6307\u9488\uff0c\u5e76\u7531\u6210\u5458\u51fd\u6570 <code>destroy()</code> \u91ca\u653e\u3002</p> <pre><code>class HeapOnly3 {\npublic:\n    static HeapOnly3* create(int x) { return new HeapOnly3(x); }\n    void destroy() { delete this; }\n\nprivate:\n    explicit HeapOnly3(int x) : x_(x) {}\n    ~HeapOnly3() = default;            // \u7981\u6808\n    int x_;\n};\n</code></pre> <p>\u4f18\u70b9\uff1a\u5b9e\u73b0\u7b80\u5355\u3002 \u7f3a\u70b9\uff1a\u4e0d\u7b26\u5408 RAII\uff0c\u8c03\u7528\u65b9\u5fc5\u987b\u624b\u52a8 <code>destroy()</code>\uff0c\u5bb9\u6613\u6cc4\u6f0f\u6216\u91cd\u590d\u91ca\u653e\uff0c\u73b0\u4ee3 C++ \u4e0d\u63a8\u8350\u3002</p>","tags":["oop"]},{"location":"oop/heap_only_class/#_3","title":"\u5c0f\u7ed3","text":"<ul> <li>\u79c1\u6709/\u53d7\u4fdd\u62a4\u6790\u6784\u53ef\u4ee5\u7981\u6b62\u6808\u5bf9\u8c61\uff0c\u4f46\u9700\u8981\u81ea\u5b9a\u4e49 <code>deleter</code> \u6216\u663e\u5f0f <code>destroy()</code>\u3002</li> <li>\u79c1\u6709/\u53d7\u4fdd\u62a4\u6784\u9020\u914d\u5408\u5de5\u5382\u51fd\u6570\u662f\u66f4\u5e38\u89c1\u7684\u73b0\u4ee3\u65b9\u5f0f\uff0c\u5efa\u8bae\u8fd4\u56de\u667a\u80fd\u6307\u9488\u5e76\u5c06\u7c7b\u6807\u8bb0\u4e3a <code>final</code>\u3002</li> <li>\u65e0\u8bba\u54ea\u79cd\u65b9\u5f0f\uff0c\u90fd\u5e94\u4f7f\u7528 RAII \u7ba1\u7406\u751f\u547d\u5468\u671f\uff0c\u907f\u514d\u624b\u52a8 <code>delete</code>\u3002</li> </ul>","tags":["oop"]},{"location":"oop/virtual_destructor/","title":"\u4e3a\u4ec0\u4e48\u6790\u6784\u51fd\u6570\u5fc5\u987b\u662f\u865a\u51fd\u6570\uff1f\uff08\u4e24\u4e2a\u4f8b\u5b50\u770b\u61c2\uff09","text":"","tags":["oop"]},{"location":"oop/virtual_destructor/#_1","title":"\u95ee\u9898","text":"<p>\u4e3a\u4ec0\u4e48\u5728\u591a\u6001\u573a\u666f\u4e0b\u6790\u6784\u51fd\u6570\u5fc5\u987b\u58f0\u660e\u4e3a\u865a\u51fd\u6570\uff1f\u5982\u679c\u662f\u901a\u8fc7\u6d3e\u751f\u7c7b\u6307\u9488\u5220\u9664\u5bf9\u8c61\uff0c\u8fd8\u9700\u8981\u865a\u6790\u6784\u5417\uff1f</p>","tags":["oop"]},{"location":"oop/virtual_destructor/#_2","title":"\u56de\u7b54\uff08\u4e24\u4e2a\u4f8b\u5b50\uff09","text":"","tags":["oop"]},{"location":"oop/virtual_destructor/#1","title":"\u4f8b\u5b50 1\uff1a\u591a\u6001\u5220\u9664\uff08\u7ecf\u7531\u57fa\u7c7b\u6307\u9488\uff09\u2014 \u5fc5\u987b\u865a\u6790\u6784","text":"<pre><code>struct Base {\n    virtual void foo();\n    ~Base() {}                 // \u975e\u865a\u6790\u6784\uff08\u9519\u8bef\u505a\u6cd5\uff09\n};\nstruct Derived : Base {\n    ~Derived() { /* \u91ca\u653e\u6d3e\u751f\u8d44\u6e90 */ }\n};\n\nBase* p = new Derived;\ndelete p;      // \u672a\u5b9a\u4e49\u884c\u4e3a\uff1a\u53ea\u8c03\u7528 Base::~Base()\uff0cDerived \u8d44\u6e90\u672a\u91ca\u653e\n</code></pre> <p>\u6b63\u786e\u505a\u6cd5\uff1a</p> <pre><code>struct Base {\n    virtual ~Base() = default; // \u901a\u8fc7\u57fa\u7c7b\u6307\u9488\u5220\u9664\u4f1a\u52a8\u6001\u7ed1\u5b9a\u5230\u6700\u672b\u5c42\u6790\u6784\n    virtual void foo();\n};\n</code></pre> <p>\u7ed3\u8bba\uff1a\u53ea\u8981\u5bf9\u8c61\u53ef\u80fd\u201c\u7ecf\u7531\u57fa\u7c7b\u6307\u9488/\u5f15\u7528\u201d\u88ab\u9500\u6bc1\uff08\u591a\u6001\u4f7f\u7528\uff09\uff0c\u57fa\u7c7b\u6790\u6784\u5fc5\u987b\u662f <code>virtual</code>\u3002</p>","tags":["oop"]},{"location":"oop/virtual_destructor/#2","title":"\u4f8b\u5b50 2\uff1a\u901a\u8fc7\u6d3e\u751f\u7c7b\u6307\u9488\u5220\u9664\u2014\u4e0d\u4f9d\u8d56\u865a\u6790\u6784","text":"<pre><code>struct Base { ~Base() {} };      // \u975e\u865a\nstruct Derived : Base { ~Derived() {} };\n\nDerived* p = new Derived;\ndelete p;   // \u5b89\u5168\uff1a\u8c03\u7528\u987a\u5e8f\u4e3a Derived::~Derived() \u2192 Base::~Base()\n</code></pre> <p>\u7ed3\u8bba\uff1a\u5f53\u4e14\u4ec5\u5f53\u7528\u201c\u786e\u5207\u7c7b\u578b\u6307\u9488/\u5f15\u7528\u201d\u9500\u6bc1\u540c\u7c7b\u578b\u5bf9\u8c61\u672c\u8eab\u65f6\uff0c\u662f\u5426\u865a\u6790\u6784\u4e0d\u5f71\u54cd\u6b63\u786e\u6027\uff1b\u95ee\u9898\u51fa\u5728\u201c\u7ecf\u7531\u57fa\u7c7b\uff08\u53d1\u751f\u591a\u6001\u64e6\u9664\uff09\u9500\u6bc1\u201d\u3002</p>","tags":["oop"]},{"location":"perf/epoll_vs_select/","title":"epoll vs. select\uff1a\u6027\u80fd\u8981\u70b9\u4e0e\u793a\u4f8b","text":"","tags":["\u6027\u80fd","\u8c03\u8bd5","\u7f51\u7edc"]},{"location":"perf/epoll_vs_select/#_1","title":"\u6838\u5fc3\u5dee\u5f02\u6982\u89c8","text":"<ul> <li><code>select</code> \u4f7f\u7528\u4f4d\u56fe <code>fd_set</code>\uff0c\u6bcf\u6b21\u8c03\u7528\u90fd\u8981\u590d\u5236\u6574\u5757 fd \u96c6\u5408\u8fdb\u5185\u6838\u5e76\u7ebf\u6027\u626b\u63cf\uff0c\u590d\u6742\u5ea6\u8fd1\u4f3c O(\u76d1\u63a7 fd \u6570)\u3002<code>FD_SETSIZE</code>\uff08\u9ed8\u8ba4 1024\uff09\u9650\u5236\u4e86\u53ef\u76d1\u63a7\u7684 fd \u6570\uff0c\u4e14\u8de8\u7ebf\u7a0b\u5171\u4eab\u56f0\u96be\u3002</li> <li><code>epoll</code> \u7ef4\u62a4\u5185\u6838\u6001\u7ea2\u9ed1\u6811 + \u5c31\u7eea\u94fe\u8868\u3002<code>epoll_ctl</code> \u53ea\u5728\u589e\u5220\u6539\u65f6\u8c03\u6574\u7ea2\u9ed1\u6811\uff0c<code>epoll_wait</code> \u76f4\u63a5\u8fd4\u56de\u5c31\u7eea\u5217\u8868\uff0c\u590d\u6742\u5ea6\u63a5\u8fd1 O(\u5c31\u7eea fd \u6570)\u3002fd \u51e0\u4e4e\u53ea\u53d7\u7cfb\u7edf\u603b\u53e5\u67c4\u6570\u9650\u5236\u3002</li> <li>\u4e8b\u4ef6\u8bed\u4e49\uff1a<code>select</code> \u4ec5\u505a\u6c34\u5e73\u89e6\u53d1\uff1b<code>epoll</code> \u65e2\u53ef\u6c34\u5e73\u89e6\u53d1\uff08\u9ed8\u8ba4\uff0c\u5b89\u5168\uff09\u4e5f\u53ef\u8fb9\u7f18\u89e6\u53d1\uff08<code>EPOLLET</code>\uff0c\u964d\u4f4e\u5524\u9192\u4f46\u9700 drain buffer\uff09\u3002<code>EPOLLONESHOT</code>\u3001<code>EPOLLEXCLUSIVE</code> \u7b49\u6807\u5fd7\u8fdb\u4e00\u6b65\u63a7\u5236\u5e76\u53d1\u548c\u60ca\u7fa4\u3002</li> <li>\u8d44\u6e90\u5f00\u9500\u5dee\u5f02\uff1a<code>select</code> \u6bcf\u6b21\u8c03\u7528\u90fd\u91cd\u590d\u62f7\u8d1d\u548c\u626b\u63cf\uff1b<code>epoll</code> \u6ce8\u518c\u4e00\u6b21\u540e\u4e8b\u4ef6\u76f4\u63a5\u56de\u8c03\u5230 ready-list\uff0c\u5185\u6838\u7a7a\u95f4\u6309 fd \u5206\u914d\u5c11\u91cf\u8282\u70b9\u7ed3\u6784\u3002</li> </ul>","tags":["\u6027\u80fd","\u8c03\u8bd5","\u7f51\u7edc"]},{"location":"perf/epoll_vs_select/#_2","title":"\u5178\u578b\u4f7f\u7528\u573a\u666f","text":"<ul> <li>\u8fde\u63a5\u89c4\u6a21 &lt; 1K\u3001\u9700\u8981\u5feb\u901f\u539f\u578b\u6216\u8de8\u5e73\u53f0\uff08\u4f8b\u5982 POSIX\u3001\u8001 Unix\u3001Windows\uff09\u65f6\uff0c<code>select</code>/<code>poll</code> \u8db3\u591f\u4e14 API \u7b80\u5355\u3002</li> <li>Linux \u4e0a\u7684\u9ad8\u5e76\u53d1\u957f\u8fde\u63a5\uff08IM\u3001\u63a8\u9001\u3001\u7f51\u5173\u3001\u53cd\u5411\u4ee3\u7406\u3001\u6e38\u620f\u670d\uff09\u5e94\u4f18\u5148\u9009\u62e9 <code>epoll</code>\uff0c\u914d\u5408\u975e\u963b\u585e fd \u4e0e\u7ebf\u7a0b\u6c60/Reactor \u67b6\u6784\u6269\u5c55\u5230\u6570\u4e07\u4e43\u81f3\u66f4\u591a\u6d3b\u8dc3\u8fde\u63a5\u3002</li> <li>\u9700\u8981\u7edf\u4e00\u7f16\u7a0b\u6a21\u578b\u7684\u8de8\u5e73\u53f0\u5e93\uff08libevent\u3001boost.asio\uff09\u901a\u5e38\u5728 Linux \u4e0b\u5c01\u88c5 <code>epoll</code>\uff0c\u5728 BSD \u4e0b\u5c01\u88c5 <code>kqueue</code>\uff0c\u5728 Windows \u4e0b\u5c01\u88c5 IOCP\uff0c\u901a\u8fc7\u62bd\u8c61\u5c42\u9690\u85cf\u5dee\u5f02\u3002</li> </ul>","tags":["\u6027\u80fd","\u8c03\u8bd5","\u7f51\u7edc"]},{"location":"perf/epoll_vs_select/#_3","title":"\u6027\u80fd\u4e0e\u8c03\u8bd5\u8981\u70b9","text":"<ul> <li><code>select</code> \u6bcf\u6b21\u90fd\u91cd\u65b0\u6784\u9020 <code>fd_set</code>\uff0c\u5fd8\u8bb0\u91cd\u65b0\u6dfb\u52a0 fd \u4f1a\u76f4\u63a5\u6f0f\u4e8b\u4ef6\u3002\u8c03\u8bd5\u7b80\u5355\u4f46\u6269\u5c55\u6210\u672c\u9ad8\u3002</li> <li><code>epoll</code> \u9ed8\u8ba4\u6c34\u5e73\u89e6\u53d1\uff0c\u82e5\u5207\u6362\u5230\u8fb9\u7f18\u89e6\u53d1\u5fc5\u987b\uff1a</li> <li>\u5c06 fd \u8bbe\u4e3a\u975e\u963b\u585e\uff1b</li> <li>\u5728\u6536\u5230\u4e8b\u4ef6\u540e\u5faa\u73af <code>read</code>/<code>write</code> \u76f4\u5230\u547d\u4e2d <code>EAGAIN</code>\uff0c\u5426\u5219\u4f1a\u4e22\u4e8b\u4ef6\u3002</li> <li>\u591a\u7ebf\u7a0b\u540c\u65f6 <code>epoll_wait</code> \u540c\u4e00 fd \u53ef\u80fd\u51fa\u73b0\u60ca\u7fa4\uff0c\u53ef\u7528 <code>EPOLLEXCLUSIVE</code>\uff08Linux 4.5+\uff09\u6216\u6bcf\u7ebf\u7a0b\u72ec\u7acb <code>epoll</code> + \u63a5\u5165\u5c42\u8d1f\u8f7d\u5747\u8861\u3002</li> <li>ready-list \u82e5\u6301\u7eed\u5806\u79ef\uff0c\u8bf4\u660e\u7528\u6237\u6001\u5904\u7406\u4e0d\u8fc7\u6765\uff1a\u9700\u8981\u6269\u5c55\u7ebf\u7a0b\u6c60\u3001\u5206\u7247\u591a\u4e2a <code>epoll</code> \u5b9e\u4f8b\u6216\u9650\u6d41\u4e0a\u6e38\u8fde\u63a5\u3002</li> </ul>","tags":["\u6027\u80fd","\u8c03\u8bd5","\u7f51\u7edc"]},{"location":"perf/epoll_vs_select/#_4","title":"\u6700\u7b80\u5355\u7684\u793a\u4f8b\u4ee3\u7801","text":"<p>\u4ee5\u4e0b\u793a\u4f8b\u5c55\u793a\u4e86\u7528 <code>select</code> \u548c <code>epoll</code> \u76d1\u542c\u6807\u51c6\u8f93\u5165/\u76d1\u542c\u5957\u63a5\u5b57\u7684\u6700\u5c0f\u5316\u5199\u6cd5\uff0c\u4ec5\u4fdd\u7559\u5173\u952e\u903b\u8f91\uff0c\u7701\u7565\u4e86\u9519\u8bef\u5904\u7406\u4e0e <code>close</code>/<code>cleanup</code>\u3002</p> <pre><code>// select \u7248\u672c\uff08\u6c34\u5e73\u89e6\u53d1\uff0c\u6bcf\u6b21\u90fd\u8981\u91cd\u5efa fd \u96c6\u5408\uff09\nint main() {\n  int listen_fd = setup_listen_socket(); // \u4f2a\u51fd\u6570\uff1a\u521b\u5efa + bind + listen\n  while (true) {\n    fd_set readfds;\n    FD_ZERO(&amp;readfds);\n    FD_SET(STDIN_FILENO, &amp;readfds);\n    FD_SET(listen_fd, &amp;readfds);\n    int max_fd = std::max(STDIN_FILENO, listen_fd);\n\n    int ready = select(max_fd + 1, &amp;readfds, nullptr, nullptr, nullptr);\n    if (ready &lt;= 0) continue; // \u5b9e\u9645\u5de5\u7a0b\u8981\u533a\u5206 EINTR\n\n    if (FD_ISSET(STDIN_FILENO, &amp;readfds)) {\n      std::string line;\n      std::getline(std::cin, line);\n      handle_cli_command(line); // \u5904\u7406\u8f93\u5165\u547d\u4ee4\n    }\n\n    if (FD_ISSET(listen_fd, &amp;readfds)) {\n      int conn_fd = accept(listen_fd, nullptr, nullptr);\n      handle_new_conn(conn_fd);\n    }\n  }\n}\n</code></pre> <pre><code>// epoll \u7248\u672c\uff08\u6ce8\u518c\u4e00\u6b21\uff0cwait \u76f4\u63a5\u62ff ready-list\uff09\nint main() {\n  int listen_fd = setup_listen_socket(); // \u4f2a\u51fd\u6570\uff1a\u521b\u5efa + bind + listen\n  int epfd = epoll_create1(0);\n\n  auto add_fd = [&amp;](int fd, uint32_t events) {\n    epoll_event ev{};\n    ev.events = events;\n    ev.data.fd = fd;\n    epoll_ctl(epfd, EPOLL_CTL_ADD, fd, &amp;ev);\n  };\n\n  add_fd(STDIN_FILENO, EPOLLIN); // \u6c34\u5e73\u89e6\u53d1\n  add_fd(listen_fd, EPOLLIN);\n\n  std::array&lt;epoll_event, 16&gt; events; // \u7b80\u5316\u8d77\u89c1\n  while (true) {\n    int ready = epoll_wait(epfd, events.data(), events.size(), -1);\n    for (int i = 0; i &lt; ready; ++i) {\n      int fd = events[i].data.fd;\n      uint32_t ev = events[i].events;\n\n      if (fd == STDIN_FILENO &amp;&amp; (ev &amp; EPOLLIN)) {\n        std::string line;\n        std::getline(std::cin, line);\n        handle_cli_command(line);\n      } else if (fd == listen_fd &amp;&amp; (ev &amp; EPOLLIN)) {\n        while (true) {\n          int conn_fd = accept4(listen_fd, nullptr, nullptr, SOCK_NONBLOCK);\n          if (conn_fd &lt; 0) {\n            if (errno == EAGAIN || errno == EWOULDBLOCK) break;\n            // \u771f\u5b9e\u5de5\u7a0b\uff1a\u5904\u7406 EINTR \u7b49\n            break;\n          }\n          handle_new_conn(conn_fd);\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>\u5c0f\u8d34\u58eb</p> <ul> <li>\u82e5\u8981\u5207\u6362 <code>EPOLLET</code>\uff08\u8fb9\u7f18\u89e6\u53d1\uff09\uff0c\u9700\u8981\u5728 <code>add_fd</code> \u65f6\u6dfb\u52a0 <code>EPOLLET</code> \u5e76\u4fdd\u8bc1 <code>accept4</code>/<code>read</code>/<code>write</code> \u5faa\u73af\u8bfb\u5199\u5230 <code>EAGAIN</code> \u4e3a\u6b62\u3002</li> <li>\u793a\u4f8b\u4e2d\u7701\u7565\u4e86\u8d44\u6e90\u91ca\u653e\u4e0e\u6df1\u5165\u7684\u9519\u8bef\u5904\u7406\uff0c\u771f\u5b9e\u670d\u52a1\u9700\u4f7f\u7528 RAII\u3001<code>unique_fd</code> \u7b49\u5c01\u88c5\u4fdd\u8bc1\u5f02\u5e38\u5b89\u5168\u3002</li> </ul>","tags":["\u6027\u80fd","\u8c03\u8bd5","\u7f51\u7edc"]},{"location":"perf/epoll_vs_select/#_5","title":"\u9762\u8bd5\u7b54\u9898\u601d\u8def\uff08\u53ef\u590d\u7528\uff09","text":"<ol> <li>\u5148\u63cf\u8ff0\u591a\u8def\u590d\u7528\u95ee\u9898\uff1a\u5355\u7ebf\u7a0b\u8981\u540c\u65f6\u611f\u77e5\u591a\u4e2a fd \u7684\u53ef\u8bfb\u53ef\u5199\u3002</li> <li>\u5bf9\u6bd4 <code>select</code>/<code>poll</code> \u4e0e <code>epoll</code> \u7684\u6570\u636e\u7ed3\u6784\u3001\u590d\u6742\u5ea6\u3001\u9650\u5236\u548c\u89e6\u53d1\u65b9\u5f0f\u3002</li> <li>\u8865\u5145\u8c03\u4f18\u70b9\uff1a\u975e\u963b\u585e\u3001\u8fb9\u7f18\u89e6\u53d1\u6ce8\u610f\u4e8b\u9879\u3001\u60ca\u7fa4\u3001\u9632\u6b62 ready-list \u5806\u79ef\u3002</li> <li>\u7ed9\u51fa\u4e00\u6bb5\u5b9e\u9645\u9879\u76ee\u6848\u4f8b\uff08\u4f8b\u5982\u4ece <code>select</code> \u5347\u7ea7 <code>epoll</code> \u540e CPU \u964d\u4e86\u591a\u5c11\u3001\u5c3e\u5ef6\u8fdf\u6539\u5584\u7b49\uff09\uff0c\u7a81\u51fa\u5de5\u7a0b\u7ecf\u9a8c\u4e0e\u6392\u969c\u624b\u6bb5\u3002</li> </ol>","tags":["\u6027\u80fd","\u8c03\u8bd5","\u7f51\u7edc"]},{"location":"perf/zero_copy/","title":"C++ \u96f6\u62f7\u8d1d\u8be6\u89e3\u4e0e\u793a\u4f8b","text":"","tags":["\u6027\u80fd","\u8c03\u8bd5","I/O","\u7f51\u7edc"]},{"location":"perf/zero_copy/#_1","title":"\u6838\u5fc3\u6982\u5ff5","text":"<ul> <li>\u201c\u96f6\u62f7\u8d1d\u201d\u65e8\u5728\u5728\u5e94\u7528\u4e0e\u8bbe\u5907/\u5185\u6838\u95f4\u4f20\u8f93\u6570\u636e\u65f6\u5c3d\u91cf\u907f\u514d\u591a\u4f59\u7684\u5185\u5b58\u590d\u5236\u4e0e\u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u964d\u4f4e CPU \u4e0e\u7f13\u5b58\u5e26\u5bbd\u5360\u7528\uff0c\u63d0\u9ad8\u541e\u5410\u5e76\u964d\u4f4e\u5ef6\u8fdf\u3002</li> <li> <p>\u5e38\u89c1\u8fb9\u754c\uff1a</p> <ul> <li>\u8fdb\u7a0b\u5185\u96f6\u62f7\u8d1d\uff1a\u7ec4\u4ef6\u4e4b\u95f4\u4ec5\u4f20\u201c\u89c6\u56fe/\u5f15\u7528\u201d\uff0c\u4e0d\u590d\u5236\u5e95\u5c42\u7f13\u51b2\u3002</li> <li>\u8fdb\u7a0b\u95f4/\u6587\u4ef6\uff1a\u591a\u4e2a\u8fdb\u7a0b\u5171\u4eab\u540c\u4e00\u7269\u7406\u9875\uff08<code>mmap</code>/\u5171\u4eab\u5185\u5b58\uff09\u3002</li> <li>\u5185\u6838 I/O\uff1a\u7528\u9875\u6620\u5c04/\u5f15\u7528\u4f20\u9012/DMA\uff0c\u907f\u514d\u201c\u7528\u6237\u6001\u2190\u2192\u5185\u6838\u6001\u201d\u7684\u91cd\u590d\u62f7\u8d1d\u3002</li> <li>\u5b9e\u52a1\u4e0a\u5e38\u662f\u201c\u5c11\u62f7\u8d1d\u201d\uff0c\u800c\u975e\u7edd\u5bf9\u96f6\u3002\u76ee\u6807\u662f\u51cf\u5c11\u4e0d\u5fc5\u8981\u590d\u5236\u4e0e\u7cfb\u7edf\u8c03\u7528\u3002</li> </ul> </li> </ul>","tags":["\u6027\u80fd","\u8c03\u8bd5","I/O","\u7f51\u7edc"]},{"location":"perf/zero_copy/#_2","title":"\u5e38\u89c1\u624b\u6bb5\u4e0e\u573a\u666f","text":"<ul> <li> <p>\u8fdb\u7a0b\u5185</p> <ul> <li><code>std::string_view</code>/<code>std::span</code>\uff1a\u53ea\u4f20\u89c6\u56fe\u4e0d\u590d\u5236\uff1b\u5fc5\u987b\u4fdd\u8bc1\u88ab\u5f15\u7528\u7f13\u51b2\u751f\u547d\u5468\u671f\u8db3\u591f\u957f\u3002</li> <li>\u79fb\u52a8\u8bed\u4e49 <code>std::move</code>\uff1a\u8f6c\u79fb\u6240\u6709\u6743\u907f\u514d\u590d\u5236\uff08\u4e0d\u8de8\u5185\u6838\u8fb9\u754c\uff09\u3002</li> <li>\u5f15\u7528\u8ba1\u6570\u7f13\u51b2\uff1a<code>std::shared_ptr&lt;uint8_t[]&gt;</code> \u6216\u81ea\u5b9a\u4e49 buffer pool\uff0c\u964d\u4f4e\u590d\u5236\u4e0e\u5206\u914d\u6210\u672c\u3002</li> </ul> </li> <li> <p>\u8fdb\u7a0b\u95f4/\u6587\u4ef6</p> <ul> <li><code>mmap</code> \u6587\u4ef6\u6216\u5171\u4eab\u5185\u5b58\uff08<code>shm_open</code>/<code>memfd_create</code>\uff09\uff1a\u591a\u8fdb\u7a0b\u5171\u4eab\u9875\uff0c\u907f\u514d read \u590d\u5236\u5230\u7528\u6237\u6001\u3002</li> </ul> </li> <li> <p>\u7f51\u7edc/\u5185\u6838 I/O\uff08Linux\uff09</p> <ul> <li><code>sendfile(out_sock, in_fd, ...)</code>\uff1a\u6587\u4ef6\u2192\u5957\u63a5\u5b57\u96f6\u62f7\u8d1d\uff08\u9875\u7f13\u5b58\u2192NIC DMA\uff09\u3002</li> <li><code>splice</code>/<code>tee</code>/<code>vmsplice</code>\uff1a\u5728 fd \u95f4\u79fb\u52a8\u9875\u5f15\u7528\uff08\u7ba1\u9053/\u5957\u63a5\u5b57/\u6587\u4ef6\uff09\u3002</li> <li><code>readv</code>/<code>writev</code>\uff1a\u5206\u6563/\u805a\u96c6 I/O\uff0c\u51cf\u5c11\u7cfb\u7edf\u8c03\u7528\u6b21\u6570\uff08\u4ecd\u53ef\u80fd\u4e00\u6b21\u5185\u6838\u590d\u5236\uff09\u3002</li> <li><code>MSG_ZEROCOPY</code>\uff08<code>SO_ZEROCOPY</code> + <code>sendmsg</code>\uff09\uff1a\u5927\u62a5\u6587\u7531 DMA \u76f4\u63a5\u4ece\u7528\u6237\u9875\u53d1\u9001\uff0c\u5185\u6838\u901a\u8fc7\u9519\u8bef\u961f\u5217\u901a\u77e5\u5b8c\u6210\uff1b\u9002\u5408\u5927\u541e\u5410\u53d1\u9001\u3002</li> <li><code>io_uring</code>\uff1a\u6ce8\u518c\u56fa\u5b9a\u7f13\u51b2\u4e0e\u90e8\u5206 <code>*_ZC</code> \u64cd\u4f5c\uff0c\u8fdb\u4e00\u6b65\u51cf\u5c11\u62f7\u8d1d\u4e0e\u7cfb\u7edf\u8c03\u7528\u3002</li> </ul> </li> <li> <p>\u9ad8\u6027\u80fd\u7528\u6237\u6001\u6808\uff08\u5ef6\u4f38\uff09</p> <ul> <li>DPDK\u3001SPDK\uff1bRDMA/verbs\u3001AF_XDP\uff1bFolly <code>IOBuf</code>\u3001Cap\u2019n Proto\uff08in\u2011place\uff09\u3002</li> </ul> </li> </ul>","tags":["\u6027\u80fd","\u8c03\u8bd5","I/O","\u7f51\u7edc"]},{"location":"perf/zero_copy/#_3","title":"\u4ee3\u7801\u793a\u4f8b","text":"<p>\u8bf4\u660e\uff1a\u4ee5\u4e0b\u793a\u4f8b\u4e3a\u8bb2\u89e3\u91cd\u70b9\uff0c\u7701\u7565\u4e86\u5e38\u89c4\u5934\u6587\u4ef6\u4e0e\u5b8c\u6574\u9519\u8bef\u5904\u7406\uff0c\u4ec5\u4fdd\u7559\u5173\u952e\u8c03\u7528\u4e0e\u7ed3\u6784\uff1b\u5b9e\u9645\u5de5\u7a0b\u4e2d\u8bf7\u8865\u9f50\u5fc5\u8981\u7684 include\u3001\u68c0\u67e5\u4e0e\u4e8b\u4ef6\u5faa\u73af\u3002</p>","tags":["\u6027\u80fd","\u8c03\u8bd5","I/O","\u7f51\u7edc"]},{"location":"perf/zero_copy/#_4","title":"\u8fdb\u7a0b\u5185\uff1a\u53ea\u4f20\u89c6\u56fe\uff08\u4e0d\u590d\u5236\uff09","text":"<p>\u9002\u7528\uff1a\u6a21\u5757\u95f4\u4f20\u9012\u53ea\u8bfb\u6570\u636e\uff1b\u6ce8\u610f\u4fdd\u8bc1\u539f\u7f13\u51b2\u5b58\u6d3b\u3002</p> <pre><code>void handle_text(std::string_view sv) {/* \u53ea\u8bfb\u4f7f\u7528 */}\nvoid handle_bytes(std::span&lt;const uint8_t&gt; sp) {/* \u53ea\u8bfb\u4f7f\u7528 */}\n\nstd::string data = \"hello zero-copy\";\nhandle_text(std::string_view{data});          // \u65e0\u62f7\u8d1d\uff1bdata \u9700\u5b58\u6d3b\n\nstd::vector&lt;uint8_t&gt; buf{1,2,3,4};\nhandle_bytes(std::span&lt;const uint8_t&gt;(buf));  // \u65e0\u62f7\u8d1d\uff1bbuf \u9700\u5b58\u6d3b\n</code></pre>","tags":["\u6027\u80fd","\u8c03\u8bd5","I/O","\u7f51\u7edc"]},{"location":"perf/zero_copy/#mmap","title":"\u6587\u4ef6\u6620\u5c04\uff1ammap\uff08\u8de8\u8fdb\u7a0b/\u53ea\u8bfb\u5171\u4eab\uff09","text":"<p>\u9002\u7528\uff1a\u5927\u6587\u4ef6\u53ea\u8bfb\u5904\u7406\uff0c\u591a\u8fdb\u7a0b\u5171\u4eab\u9875\u7f13\u5b58\uff0c\u907f\u514d read\u2192\u7528\u6237\u6001\u590d\u5236\u3002</p> <pre><code>const char* path = \"big.bin\";\nint fd = open(path, O_RDONLY);\nstruct stat st{}; fstat(fd, &amp;st);\nvoid* p = mmap(nullptr, st.st_size, PROT_READ, MAP_PRIVATE, fd, 0);\nclose(fd);\n\nstd::string_view sv(static_cast&lt;const char*&gt;(p), st.st_size);\n// \u76f4\u63a5\u5728 sv \u4e0a\u89e3\u6790\uff0c\u4e0d\u4ea7\u751f\u590d\u5236\n\nmunmap(p, st.st_size);\n</code></pre>","tags":["\u6027\u80fd","\u8c03\u8bd5","I/O","\u7f51\u7edc"]},{"location":"perf/zero_copy/#socketsendfile","title":"\u6587\u4ef6\u2192socket\uff1asendfile\uff08\u7ecf\u5178\u96f6\u62f7\u8d1d\uff09","text":"<p>\u9002\u7528\uff1a\u9759\u6001\u6587\u4ef6\u5206\u53d1\uff08HTTP\uff09\uff1b\u907f\u514d\u7528\u6237\u6001\u8bfb\u5199\u3002</p> <pre><code>// \u5c06\u6587\u4ef6 path \u53d1\u9001\u5230\u5957\u63a5\u5b57 sockfd\uff08\u7701\u7565\u9519\u8bef\u5904\u7406\u4e0e\u7b49\u5f85\u53ef\u5199\uff09\nint send_file_zerocopy(int sockfd, const char* path) {\n  int fd = open(path, O_RDONLY);\n  struct stat st{}; fstat(fd, &amp;st);\n  off_t off = 0;\n  while (off &lt; st.st_size) {\n    ssize_t n = sendfile(sockfd, fd, &amp;off, st.st_size - off);\n    if (n &lt;= 0) break; // \u5b9e\u9645\u5de5\u7a0b\uff1a\u5904\u7406 EINTR/EAGAIN\n  }\n  close(fd);\n  return 0;\n}\n</code></pre>","tags":["\u6027\u80fd","\u8c03\u8bd5","I/O","\u7f51\u7edc"]},{"location":"perf/zero_copy/#splicefd","title":"\u5185\u6838\u9875\u79fb\u52a8\uff1asplice\uff08fd \u95f4\u79fb\u52a8\u9875\u5f15\u7528\uff09","text":"<p>\u9002\u7528\uff1a\u9700\u8981\u5728\u591a\u4e2a fd \u4e4b\u95f4\u201c\u4e32\u63a5\u201d\uff08\u6587\u4ef6\u2192\u7ba1\u9053\u2192socket\uff09\uff0c\u4fdd\u6301\u96f6\u62f7\u8d1d\u8def\u5f84\u3002</p> <pre><code>int splice_file_to_sock(int sockfd, const char* path) {\n  int fd = open(path, O_RDONLY | O_NONBLOCK);\n  int pfd[2]; pipe(pfd);\n  off_t off = 0; struct stat st{}; fstat(fd, &amp;st);\n  const size_t chunk = 64 * 1024;\n  while (off &lt; st.st_size) {\n    ssize_t n = splice(fd, &amp;off, pfd[1], nullptr, chunk, SPLICE_F_MORE);\n    size_t left = (n &gt; 0 ? (size_t)n : 0);\n    while (left) {\n      ssize_t m = splice(pfd[0], nullptr, sockfd, nullptr, left, SPLICE_F_MORE);\n      if (m &lt;= 0) break; left -= (size_t)m;\n    }\n    if (n &lt;= 0) break; // \u5b9e\u9645\u5de5\u7a0b\uff1a\u5904\u7406 EINTR/EAGAIN\n  }\n  close(fd); close(pfd[0]); close(pfd[1]);\n  return 0;\n}\n</code></pre>","tags":["\u6027\u80fd","\u8c03\u8bd5","I/O","\u7f51\u7edc"]},{"location":"perf/zero_copy/#ioreadvwritev-syscall","title":"\u5206\u6563/\u805a\u96c6 I/O\uff1areadv/writev\uff08\u5c11 syscall\uff09","text":"<p>\u9002\u7528\uff1a\u5c0f\u5305/\u591a\u6bb5\u7f13\u51b2\u7ec4\u5408\uff0c\u51cf\u5c11\u7cfb\u7edf\u8c03\u7528\u4e0e\u4e00\u6b21\u5185\u6838\u590d\u5236\u3002</p> <pre><code>ssize_t write_http_resp(int sockfd, const char* hdr, size_t hlen,\n                        const void* body, size_t blen) {\n  iovec iov[2];\n  iov[0].iov_base = const_cast&lt;char*&gt;(hdr);\n  iov[0].iov_len  = hlen;\n  iov[1].iov_base = const_cast&lt;void*&gt;(body);\n  iov[1].iov_len  = blen;\n  return writev(sockfd, iov, 2);\n}\n</code></pre>","tags":["\u6027\u80fd","\u8c03\u8bd5","I/O","\u7f51\u7edc"]},{"location":"perf/zero_copy/#msg_zerocopy-dma","title":"\u7f51\u7edc\u53d1\u9001\uff1aMSG_ZEROCOPY\uff08\u5927\u62a5\u6587 DMA \u76f4\u63a5\u53d6\u7528\u6237\u9875\uff09","text":"<p>\u9002\u7528\uff1a\u7528\u6237\u7f13\u51b2\u2192\u7f51\u5361\uff0c\u5927\u5305/\u5927\u541e\u5410\uff1b\u9700 Linux \u2265 4.14 \u4e14\u9a71\u52a8\u652f\u6301\uff1b\u8981\u5904\u7406\u9519\u8bef\u961f\u5217\u786e\u8ba4\u3002</p> <p>\u8981\u70b9\uff1a</p> <ul> <li>\u5bf9 socket \u8c03\u7528 <code>setsockopt(SOL_SOCKET, SO_ZEROCOPY, ...)</code> \u5f00\u542f\u3002</li> <li>\u4ee5 <code>sendmsg(..., MSG_ZEROCOPY)</code> \u53d1\u9001\uff1b\u5185\u6838\u5728\u9519\u8bef\u961f\u5217\uff08<code>MSG_ERRQUEUE</code>\uff09\u8fd4\u56de\u5b8c\u6210\u901a\u77e5\u3002</li> <li>\u5c0f\u62a5\u6587\u4e0d\u5212\u7b97\uff1b\u9700\u8981\u8f6e\u8be2/\u4e8b\u4ef6\u8bfb\u53d6\u9519\u8bef\u961f\u5217\u6765\u56de\u6536\u4e0e\u7edf\u8ba1\u5b8c\u6210\u3002</li> </ul> <pre><code>static int enable_zerocopy(int sockfd) {\n  int one = 1;\n  return setsockopt(sockfd, SOL_SOCKET, SO_ZEROCOPY, &amp;one, sizeof(one));\n}\n\n// \u8bfb\u53d6\u9519\u8bef\u961f\u5217\uff0c\u7edf\u8ba1 zerocopy \u5b8c\u6210\u4e2a\u6570\uff08\u793a\u610f\uff09\nstatic int drain_errqueue(int sockfd) {\n  int completions = 0;\n  while (true) {\n    char ctrl[256]; msghdr msg{}; iovec iov{}; char dummy;\n    iov.iov_base = &amp;dummy; iov.iov_len = sizeof(dummy);\n    msg.msg_iov = &amp;iov; msg.msg_iovlen = 1; msg.msg_control = ctrl; msg.msg_controllen = sizeof(ctrl);\n    ssize_t n = recvmsg(sockfd, &amp;msg, MSG_ERRQUEUE | MSG_DONTWAIT);\n    if (n &lt;= 0) break; // \u5b9e\u9645\u5de5\u7a0b\uff1a\u533a\u5206 EAGAIN/EWOULDBLOCK\n    for (cmsghdr* cmsg = CMSG_FIRSTHDR(&amp;msg); cmsg; cmsg = CMSG_NXTHDR(&amp;msg, cmsg)) (void)cmsg, ++completions;\n  }\n  return completions;\n}\n\nstatic ssize_t send_big_zerocopy(int sockfd, const void* buf, size_t len) {\n  msghdr msg{}; iovec iov{}; iov.iov_base = const_cast&lt;void*&gt;(buf); iov.iov_len = len;\n  msg.msg_iov = &amp;iov; msg.msg_iovlen = 1;\n  return sendmsg(sockfd, &amp;msg, MSG_ZEROCOPY);\n}\n\n// \u8fde\u63a5\u3001\u542f\u7528 SO_ZEROCOPY \u540e\uff1a\nchar* big = (char*)aligned_alloc(4096, 8u * 1024 * 1024);\nmemset(big, 'Z', 8u * 1024 * 1024);\nsend_big_zerocopy(sockfd, big, 8u * 1024 * 1024);\nint done = drain_errqueue(sockfd);\nfree(big);\n</code></pre>","tags":["\u6027\u80fd","\u8c03\u8bd5","I/O","\u7f51\u7edc"]},{"location":"perf/zero_copy/#io_uring","title":"io_uring\uff08\u6ce8\u518c\u7f13\u51b2\u4e0e\u4f4e\u5f00\u9500\u63d0\u4ea4\uff09","text":"<p>\u9002\u7528\uff1a\u964d\u4f4e\u7cfb\u7edf\u8c03\u7528\u5f00\u9500\uff0c\u7ed3\u5408\u56fa\u5b9a\u7f13\u51b2/\u6587\u4ef6\u63cf\u8ff0\u7b26\uff1b\u90e8\u5206\u5185\u6838\u548c\u5e93\u63d0\u4f9b <code>SENDZC</code>/<code>*_ZC</code> \u80fd\u529b\u4ee5\u8fdb\u4e00\u6b65\u51cf\u5c11\u590d\u5236\u3002</p> <p>\u8981\u70b9\uff1a</p> <ul> <li>\u9884\u6ce8\u518c\u56fa\u5b9a\u7f13\u51b2\uff08<code>IORING_REGISTER_BUFFERS</code>\uff09\u548c/\u6216\u56fa\u5b9a\u6587\u4ef6\uff1b\u63d0\u4ea4 <code>send</code>/<code>recv</code>/<code>splice</code> \u7b49 SQE\uff1b\u4ece CQE \u8bfb\u53d6\u5b8c\u6210\u3002</li> <li>\u4e0e <code>MSG_ZEROCOPY</code> \u5e76\u975e\u4e92\u65a5\uff1a\u53d1\u9001\u5927\u5757\u7528\u6237\u7f13\u51b2\u53ef\u8003\u8651\u4e8c\u8005\u914d\u5408\uff08\u4f9d\u5185\u6838\u7248\u672c\u4e0e\u63a5\u53e3\u652f\u6301\uff09\u3002</li> </ul> <pre><code>// \u4f2a\u4ee3\u7801\uff08liburing\uff09\uff0c\u6f14\u793a\u5173\u952e\u6b65\u9aa4\uff0c\u7701\u7565\u9519\u8bef\u5904\u7406\nio_uring ring; io_uring_queue_init(256, &amp;ring, 0);\n\n// \u6ce8\u518c\u56fa\u5b9a\u7f13\u51b2\uff08\u53ef\u9009\uff09\niovec bufs[1]; bufs[0].iov_base = big_buf; bufs[0].iov_len = big_len;\nio_uring_register_buffers(&amp;ring, bufs, 1);\n\n// \u5efa\u7acb\u8fde\u63a5\uff08\u7565\uff09\uff0c\u53ef\u5bf9 socket \u542f\u7528 SO_ZEROCOPY\uff08\u53ef\u9009\uff0c\u89c6\u5185\u6838/\u9a71\u52a8\u800c\u5b9a\uff09\n\n// \u63d0\u4ea4 send\nio_uring_sqe* sqe = io_uring_get_sqe(&amp;ring);\nio_uring_prep_send(sqe, sockfd, big_buf, big_len, 0);\n// \u82e5\u4f7f\u7528\u56fa\u5b9a\u7f13\u51b2\uff1aio_uring_prep_send(sqe, sockfd, nullptr, big_len, 0);\n// \u5e76\u8bbe\u7f6e sqe-&gt;buf_index = 0; sqe-&gt;flags |= IOSQE_BUFFER_SELECT;\nio_uring_submit(&amp;ring);\n\n// \u53d6\u5b8c\u6210\nio_uring_cqe* cqe; io_uring_wait_cqe(&amp;ring, &amp;cqe);\nint res = cqe-&gt;res; io_uring_cqe_seen(&amp;ring, cqe);\n\nio_uring_queue_exit(&amp;ring);\n</code></pre> <p>\u63d0\u793a\uff1aio_uring \u9700\u8981\u8f83\u65b0\u7684\u5185\u6838\uff08\u22655.10 \u66f4\u6210\u719f\uff09\uff0c\u90e8\u7f72\u65f6\u5173\u6ce8\u6743\u9650\u3001<code>RLIMIT_MEMLOCK</code>\u3001\u6ce8\u518c\u7f13\u51b2\u6570\u91cf\u9650\u5236\u4ee5\u53ca\u56de\u9000\u8def\u5f84\uff08\u51fa\u9519\u65f6\u9000\u56de\u5e38\u89c4 <code>send</code>\uff09\u3002</p>","tags":["\u6027\u80fd","\u8c03\u8bd5","I/O","\u7f51\u7edc"]},{"location":"perf/zero_copy/#_5","title":"\u9009\u62e9\u5efa\u8bae","text":"<ul> <li>\u9759\u6001\u6587\u4ef6/\u5927\u5bf9\u8c61\u4e0b\u53d1\uff1a\u4f18\u5148 <code>sendfile</code>\uff1b\u82e5\u9700\u7ba1\u9053\u7f16\u6392\uff0c\u8003\u8651 <code>splice</code>\u3002</li> <li>\u9ad8\u541e\u5410\u7f51\u7edc\uff08\u226510GbE\uff09\u4e14\u6570\u636e\u6765\u81ea\u7528\u6237\u7f13\u51b2\uff1a<code>MSG_ZEROCOPY</code> \u6216 <code>io_uring</code> + \u6ce8\u518c\u7f13\u51b2\u3002</li> <li>\u591a\u8fdb\u7a0b\u5171\u4eab\u5927\u5757\u53ea\u8bfb\u6570\u636e\uff1a<code>mmap</code> \u6587\u4ef6\u6216 <code>shm_open</code> \u5171\u4eab\u5185\u5b58\u3002</li> <li>\u5c0f\u62a5\u6587/\u7e41\u6742\u63a7\u5236\u6d41\uff1a<code>readv</code>/<code>writev</code> \u964d\u4f4e syscall \u5f00\u9500\uff0c\u6536\u76ca\u7a33\u5b9a\u4e14\u5b9e\u73b0\u7b80\u5355\u3002</li> <li>\u8fdb\u7a0b\u5185\u7ec4\u4ef6\u4f20\u53c2\uff1a<code>string_view</code>/<code>span</code>/\u5f15\u7528\u8ba1\u6570\u7f13\u51b2\uff0c\u907f\u514d\u590d\u5236\u4e0e\u91cd\u590d\u5206\u914d\u3002</li> </ul>","tags":["\u6027\u80fd","\u8c03\u8bd5","I/O","\u7f51\u7edc"]},{"location":"perf/zero_copy/#_6","title":"\u5751\u4e0e\u6743\u8861","text":"<ul> <li>\u751f\u547d\u5468\u671f\u4e0e\u5e76\u53d1\uff1a\u89c6\u56fe/\u5171\u4eab\u9875\u6613\u60ac\u6302\uff1b\u5fc5\u987b\u6e05\u6670\u7ea6\u5b9a\u6240\u6709\u6743\u4e0e\u5b58\u7eed\u671f\u3002</li> <li>\u5c0f\u5305\u4e0d\u5212\u7b97\uff1a<code>MSG_ZEROCOPY</code> \u5bf9\u5c0f\u6570\u636e\u53ef\u80fd\u66f4\u6162\uff08\u7ba1\u7406\u5f00\u9500\u3001\u5b8c\u6210\u901a\u77e5\u6210\u672c\uff09\u3002</li> <li>\u9875\u56fa\u5b9a\u4e0e\u5185\u5b58\u538b\u529b\uff1a\u96f6\u62f7\u8d1d\u5e38\u9700 pin page\uff0c\u8fc7\u91cf\u4f1a\u5f71\u54cd\u7cfb\u7edf\u56de\u6536\u4e0e NUMA \u884c\u4e3a\u3002</li> <li>\u53ef\u89c2\u6d4b\u6027\uff1a\u9700\u8981\u7edf\u8ba1\u96f6\u62f7\u8d1d\u547d\u4e2d\u7387\u3001\u5931\u8d25\u56de\u9000\u8def\u5f84\u4e0e\u91cd\u4f20\u6210\u672c\u3002</li> </ul>","tags":["\u6027\u80fd","\u8c03\u8bd5","I/O","\u7f51\u7edc"]},{"location":"perf/zero_copy/#_7","title":"\u6027\u80fd\u4e0e\u8c03\u8bd5","text":"<ul> <li> <p>\u5ea6\u91cf\u6307\u6807</p> <ul> <li>CPU \u4f7f\u7528\uff08\u7cfb\u7edf\u6001 vs \u7528\u6237\u6001\uff09\u3001\u6bcf\u6838\u541e\u5410\uff08Gbps / Mbps\uff09\u3001P99/P999 \u5ef6\u8fdf\u3002</li> <li>socket \u5c42\u7edf\u8ba1\uff1a\u53d1\u9001\u961f\u5217\u957f\u5ea6\u3001\u91cd\u4f20\u3001<code>tcp_info</code>\uff08<code>getsockopt(TCP_INFO)</code>\uff09\u3002</li> <li>\u96f6\u62f7\u8d1d\u547d\u4e2d\u7387\uff1a<code>MSG_ERRQUEUE</code> \u5b8c\u6210\u6570 / \u53d1\u9001\u6570\uff1bsendfile/splice \u6210\u529f\u8fd4\u56de\u4e0e\u56de\u9000\u8def\u5f84\u7edf\u8ba1\u3002</li> </ul> </li> <li> <p>\u89c2\u5bdf\u5de5\u5177</p> <ul> <li><code>perf record/report</code>\uff1a\u91c7\u6837\u70ed\u70b9\u3001\u7cfb\u7edf\u8c03\u7528\u4e0e cache-miss\u3002</li> <li><code>perf trace</code>/<code>strace -k</code>\uff1a\u8ddf\u8e2a syscalls \u4e0e\u963b\u585e\u70b9\u3002</li> <li><code>bpftool</code>/<code>bcc</code>\uff1akprobe/tracepoint \u89c2\u6d4b TCP\u3001<code>sendfile</code>\u3001<code>splice</code> \u8def\u5f84\u3002</li> <li><code>sar</code>/<code>iostat</code>/<code>vmstat</code>\uff1a\u78c1\u76d8/CPU/\u5185\u5b58\u603b\u4f53\u538b\u529b\u3002</li> </ul> </li> <li> <p>\u5e38\u89c1\u5b9a\u4f4d\u601d\u8def</p> <ul> <li>\u541e\u5410\u4e0d\u5347\uff1a\u68c0\u67e5\u662f\u5426\u547d\u4e2d\u96f6\u62f7\u8d1d\uff08\u9519\u8bef\u961f\u5217\u56de\u6267/\u7edf\u8ba1\uff09\u3001\u662f\u5426\u88ab\u5c0f\u5305\u5316/\u5408\u5e76\u963b\u788d\uff08Nagle\u3001GSO/TSO\uff09\u3002</li> <li>\u5ef6\u8fdf\u53d8\u5dee\uff1a\u68c0\u67e5\u9875\u7f3a\u9875/\u7f3a\u4e4f\u5bf9\u9f50\u3001NUMA \u8fdc\u7aef\u8bbf\u95ee\u3001pin \u8fc7\u591a\u5bfc\u81f4\u56de\u6536\u538b\u529b\u3002</li> <li>CPU \u5c45\u9ad8\uff1a\u786e\u8ba4\u662f\u5426\u4ecd\u5728\u7528\u6237\u6001\u505a memcpy\uff0c\u6216\u5b58\u5728\u8fc7\u591a syscalls\uff08\u8003\u8651\u805a\u5408 I/O\uff09\u3002</li> </ul> </li> </ul>","tags":["\u6027\u80fd","\u8c03\u8bd5","I/O","\u7f51\u7edc"]},{"location":"qt/","title":"Qt \u4e13\u680f\u6982\u89c8","text":"<p>\u6536\u5f55\u5e38\u89c1 Qt \u9762\u8bd5/\u5b9e\u8df5\u8981\u70b9\u4e0e\u793a\u4f8b\uff0c\u805a\u7126\u4fe1\u53f7\u69fd\u4e0e\u8de8\u7ebf\u7a0b UI \u5b89\u5168\u66f4\u65b0\u3002</p> <ul> <li>\u4fe1\u53f7\u69fd\u673a\u5236\u4e0e\u8fde\u63a5\u7c7b\u578b\uff1a</li> <li>\u57fa\u7840\u539f\u7406\uff08moc\u3001QMetaObject\u3001\u4e8b\u4ef6\u5faa\u73af\uff09</li> <li>\u8fde\u63a5\u7c7b\u578b Auto/Direct/Queued/BlockingQueued\u3001UniqueConnection</li> <li>Direct \u4e0d\u7b49\u4e8e\u540c\u7ebf\u7a0b\uff1b\u8de8\u7ebf\u7a0b Direct \u7684\u98ce\u9669\u4e0e\u66ff\u4ee3\u65b9\u6848</li> <li>\u793a\u4f8b\u4e0e\u5e38\u89c1\u5751\u4f4d</li> <li> <p>\u8be6\u89c1\u300aQt \u4fe1\u53f7\u69fd\u673a\u5236\u4e0e\u8fde\u63a5\u7c7b\u578b\uff1f\u300b</p> </li> <li> <p>\u8de8\u7ebf\u7a0b\u66f4\u65b0 UI \u7684\u5b89\u5168\u65b9\u5f0f\uff1a</p> </li> <li>\u4fe1\u53f7\u69fd\uff08Queued\uff09\u3001invokeMethod\u3001singleShot\u3001postEvent</li> <li>QThread + Worker \u67b6\u6784\u3001QtConcurrent + QFutureWatcher</li> <li>\u91cd\u8d1f\u8f7d\u69fd\u5904\u7406\u4e0e\u5207\u7247\u66f4\u65b0\u3001\u907f\u514d\u6b7b\u9501</li> <li>\u8be6\u89c1\u300a\u8de8\u7ebf\u7a0b\u66f4\u65b0 UI \u7684\u5b89\u5168\u65b9\u5f0f\uff1f\u300b</li> </ul>","tags":["qt"]},{"location":"qt/connection_types/","title":"Qt \u8fde\u63a5\u7c7b\u578b\u8be6\u89e3","text":"","tags":["qt"]},{"location":"qt/connection_types/#_1","title":"\u95ee\u9898","text":"<p>Qt \u4e2d\u6709\u54ea\u4e9b\u8fde\u63a5\u7c7b\u578b\uff1f\u5b83\u4eec\u5206\u522b\u5728\u54ea\u4e2a\u7ebf\u7a0b\u8c03\u7528\u69fd\uff1f\u5982\u4f55\u6b63\u786e\u9009\u578b\uff1f</p>","tags":["qt"]},{"location":"qt/connection_types/#_2","title":"\u56de\u7b54","text":"","tags":["qt"]},{"location":"qt/connection_types/#1","title":"1) \u884c\u4e3a\u5b9a\u4e49\uff08\u5728\u54ea\u4e2a\u7ebf\u7a0b\u8fd0\u884c\u69fd\uff09","text":"<ul> <li>Qt::AutoConnection\uff08\u9ed8\u8ba4\uff09</li> <li>\u540c\u7ebf\u7a0b\u65f6\u7b49\u540c Direct\uff1b\u4e0d\u540c\u7ebf\u7a0b\u65f6\u7b49\u540c Queued\u3002</li> <li>Qt::DirectConnection\uff08\u76f4\u63a5\uff09</li> <li>\u69fd\u5728\u201c\u53d1\u5c04\u4fe1\u53f7\u7684\u7ebf\u7a0b\u201d\u91cc\u540c\u6b65\u6267\u884c\u3002Direct \u4e0d\u7b49\u4e8e\u201c\u540c\u7ebf\u7a0b\u201d\u3002\u82e5\u63a5\u6536\u8005\u5c5e\u4e8e\u5176\u4ed6\u7ebf\u7a0b\uff0c\u5219\u4f1a\u51fa\u73b0\u201c\u8de8\u7ebf\u7a0b Direct\u201d\uff0c\u5bb9\u6613\u8d8a\u7ebf\u7a0b\u8bbf\u95ee\u63a5\u6536\u8005\u5bf9\u8c61\u3002</li> <li>Qt::QueuedConnection\uff08\u961f\u5217\uff09</li> <li>\u8c03\u7528\u88ab\u5c01\u88c5\u4e3a\u4e8b\u4ef6\uff0c\u6295\u9012\u5230\u201c\u63a5\u6536\u8005\u6240\u5c5e\u7ebf\u7a0b\u201d\u7684\u4e8b\u4ef6\u5faa\u73af\uff1b\u69fd\u5728\u63a5\u6536\u8005\u7ebf\u7a0b\u5f02\u6b65\u6267\u884c\u3002</li> <li>Qt::BlockingQueuedConnection\uff08\u963b\u585e\u961f\u5217\uff09</li> <li>\u4e0e Queued \u76f8\u540c\uff0c\u4f46\u53d1\u5c04\u7ebf\u7a0b\u4f1a\u963b\u585e\u7b49\u5f85\u69fd\u6267\u884c\u5b8c\u6210\u3002\u4ec5\u7528\u4e8e\u4e0d\u540c\u7ebf\u7a0b\u4e4b\u95f4\uff1b\u540c\u7ebf\u7a0b\u4f1a\u6b7b\u9501\u3002</li> <li>Qt::UniqueConnection\uff08\u53bb\u91cd\u6807\u5fd7\uff09</li> <li>\u4e0e\u4e0a\u8ff0\u6309\u4f4d\u6216\u4f7f\u7528\uff08\u5982 <code>Qt::AutoConnection | Qt::UniqueConnection</code>\uff09\uff0c\u907f\u514d\u91cd\u590d\u8fde\u63a5\u3002</li> </ul> <p>\u7ebf\u7a0b\u4eb2\u548c\u6027\uff1a<code>QObject::thread()</code> \u6307\u660e\u5bf9\u8c61\u5f52\u5c5e\u7ebf\u7a0b\u3002Queued/BlockingQueued \u4f1a\u628a\u8c03\u7528\u642c\u5230\u63a5\u6536\u8005\u7ebf\u7a0b\uff1bDirect \u5219\u4e0d\u4f1a\u642c\u8fd0\uff0c\u59cb\u7ec8\u5728\u53d1\u5c04\u7ebf\u7a0b\u6267\u884c\u3002</p>","tags":["qt"]},{"location":"qt/connection_types/#2","title":"2) \u53c2\u6570\u4e0e\u7c7b\u578b\u8981\u6c42","text":"<ul> <li>\u5bf9\u4e8e\u961f\u5217\u8fde\u63a5\uff0c\u4fe1\u53f7\u53c2\u6570\u4f1a\u88ab\u62f7\u8d1d\u5e76\u8de8\u7ebf\u7a0b\u4f20\u9012\uff1b\u81ea\u5b9a\u4e49\u7c7b\u578b\u9700\u8981 <code>Q_DECLARE_METATYPE(T)</code> \u5e76\u5728\u8fd0\u884c\u65f6 <code>qRegisterMetaType&lt;T&gt;(\"T\")</code>\u3002</li> <li>\u5927\u5bf9\u8c61\u53c2\u6570\u5efa\u8bae\u4f20\u5171\u4eab\u6307\u9488\u6216\u8f7b\u91cf\u6570\u636e\u4ee5\u51cf\u5c11\u62f7\u8d1d\u6210\u672c\u3002</li> </ul>","tags":["qt"]},{"location":"qt/connection_types/#3","title":"3) \u9009\u578b\u5efa\u8bae","text":"<ul> <li>\u9ed8\u8ba4\uff1aAuto\u3002</li> <li>\u8de8\u7ebf\u7a0b\u5207\u56de UI\uff1aQueued\u3002</li> <li>\u8de8\u7ebf\u7a0b\u4e14\u9700\u8981\u7b49\u5f85\u7ed3\u679c\uff1aBlockingQueued\uff08\u8c28\u614e\u3001\u907f\u514d\u6b7b\u9501\uff09\u3002</li> <li>\u9632\u91cd\u590d\u8fde\u63a5\uff1aUniqueConnection\u3002</li> <li>\u91cd\u8d1f\u8f7d\u69fd\uff1a\u4e0d\u8981 Direct\uff1b\u653e\u5230 Worker \u7ebf\u7a0b\u6216\u4f7f\u7528 Queued\u3002</li> </ul>","tags":["qt"]},{"location":"qt/connection_types/#4","title":"4) \u793a\u4f8b","text":"<p>\u8de8\u7ebf\u7a0b Direct\uff08\u53cd\u4f8b\uff0c\u4e0d\u63a8\u8350\uff09\uff1a</p> <pre><code>QThread th; Worker w; w.moveToThread(&amp;th); th.start();\n// \u69fd\u4f1a\u5728 sender \u6240\u5728\u7ebf\u7a0b\u6267\u884c\uff0c\u800c w \u5f52 th \u7ebf\u7a0b =&gt; \u8d8a\u7ebf\u7a0b\u8bbf\u95ee\nQObject::connect(&amp;sender, &amp;Sender::sig, &amp;w, &amp;Worker::slot, Qt::DirectConnection);\n</code></pre> <p>\u6b63\u786e\uff1a\u4f7f\u7528 Auto/Queued\uff0c\u69fd\u5728\u63a5\u6536\u8005\u7ebf\u7a0b\uff1a</p> <pre><code>QObject::connect(&amp;sender, &amp;Sender::sig, &amp;w, &amp;Worker::slot); // Auto =&gt; Queued\n</code></pre> <p>\u963b\u585e\u7b49\u5f85\u5de5\u4f5c\u7ebf\u7a0b\u8fd4\u56de\uff08\u8c28\u614e\uff09\uff1a</p> <pre><code>QObject::connect(&amp;sender, &amp;Sender::sig, &amp;w, &amp;Worker::slot, Qt::BlockingQueuedConnection);\n</code></pre>","tags":["qt"]},{"location":"qt/connection_types/#5","title":"5) \u5173\u8054\u4e3b\u9898","text":"<ul> <li>\u673a\u5236\u4e0e\u8bed\u6cd5\uff1a\u53c2\u89c1\u300aQt \u4fe1\u53f7\u69fd\u673a\u5236\uff08\u539f\u7406\u4e0e\u8bed\u6cd5\uff09\u300b</li> <li>\u8de8\u7ebf\u7a0b UI \u5b89\u5168\u66f4\u65b0\uff1a\u53c2\u89c1\u300a\u8de8\u7ebf\u7a0b\u66f4\u65b0 UI \u7684\u5b89\u5168\u65b9\u5f0f\uff1f\u300b</li> <li>\u5751\u4f4d\u6e05\u5355\uff1a\u53c2\u89c1\u300a\u4fe1\u53f7\u69fd\u5e38\u89c1\u5751\u4e0e\u6700\u4f73\u5b9e\u8df5\u300b</li> </ul>","tags":["qt"]},{"location":"qt/cross_thread_ui_update/","title":"\u8de8\u7ebf\u7a0b\u66f4\u65b0 UI \u7684\u5b89\u5168\u65b9\u5f0f\uff1f","text":"","tags":["qt"]},{"location":"qt/cross_thread_ui_update/#_1","title":"\u95ee\u9898","text":"<p>\u5728 Qt \u4e2d\u5982\u4f55\u5b89\u5168\u5730\u4ece\u5de5\u4f5c\u7ebf\u7a0b\u66f4\u65b0 UI\uff08QWidget/QML\uff09\uff1f\u6709\u54ea\u4e9b\u63a8\u8350\u624b\u6bb5\u4e0e\u5e38\u89c1\u5751\uff1f</p>","tags":["qt"]},{"location":"qt/cross_thread_ui_update/#_2","title":"\u56de\u7b54","text":"","tags":["qt"]},{"location":"qt/cross_thread_ui_update/#1","title":"1) \u6838\u5fc3\u539f\u5219","text":"<ul> <li>\u4ec5\u5728 GUI \u7ebf\u7a0b\u8bbf\u95ee/\u4fee\u6539 UI \u5bf9\u8c61\uff08<code>QWidget</code>\u3001<code>QWindow</code>\u3001<code>QQuickItem</code> \u7b49\uff09\u3002</li> <li>\u8de8\u7ebf\u7a0b\u65f6\uff0c\u5c06\u66f4\u65b0\u8bf7\u6c42\u201c\u6295\u9012\u201d\u5230 GUI \u7ebf\u7a0b\u5904\u7406\uff08\u6d88\u606f/\u961f\u5217\u8c03\u7528\uff09\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u8c03\u7528 UI \u63a5\u53e3\u3002</li> </ul>","tags":["qt"]},{"location":"qt/cross_thread_ui_update/#2","title":"2) \u63a8\u8350\u65b9\u5f0f","text":"<ul> <li>\u4fe1\u53f7\u69fd\uff08<code>Qt::AutoConnection</code>/<code>Qt::QueuedConnection</code>\uff09</li> <li>\u8de8\u7ebf\u7a0b\u81ea\u52a8\u53d8\u4e3a\u961f\u5217\u8fde\u63a5\uff0c\u69fd\u5728\u63a5\u6536\u8005\uff08UI\uff09\u7ebf\u7a0b\u5f02\u6b65\u6267\u884c\u3002</li> <li><code>QMetaObject::invokeMethod</code></li> <li>\u6307\u5b9a <code>Qt::QueuedConnection</code>\uff0c\u628a\u8c03\u7528\u6392\u961f\u5230\u63a5\u6536\u8005\u6240\u5c5e\u7ebf\u7a0b\u3002</li> <li><code>QTimer::singleShot(0, ...)</code></li> <li>\u5c06\u4e00\u4e2a 0ms \u5b9a\u65f6\u4efb\u52a1\u52a0\u5165\u63a5\u6536\u8005\u7ebf\u7a0b\u7684\u4e8b\u4ef6\u961f\u5217\uff0c\u5e38\u7528\u4e8e\u5207\u56de\u4e3b\u7ebf\u7a0b\u3002</li> <li><code>QtConcurrent</code> + <code>QFutureWatcher</code></li> <li>\u8ba1\u7b97\u5728\u7ebf\u7a0b\u6c60\u6267\u884c\uff0c\u901a\u8fc7 <code>finished()</code>\u3001<code>progressValueChanged()</code> \u7b49\u4fe1\u53f7\u5728 UI \u7ebf\u7a0b\u5904\u7406\u7ed3\u679c\u3002</li> <li>\u81ea\u5b9a\u4e49\u4e8b\u4ef6</li> <li><code>QCoreApplication::postEvent(target, ...)</code> + \u8986\u76d6 <code>event()</code>/<code>customEvent()</code>\u3002</li> </ul>","tags":["qt"]},{"location":"qt/cross_thread_ui_update/#3-qthread-worker","title":"3) \u5b89\u5168\u67b6\u6784\uff08QThread + Worker \u5bf9\u8c61\uff09","text":"<ul> <li>\u4e0d\u8981\u5c06 UI \u5bf9\u8c61\u79fb\u5230\u5b50\u7ebf\u7a0b\uff1b\u4ec5\u79fb\u52a8\u201c\u5de5\u4f5c\u5bf9\u8c61\u201d\u5230\u5b50\u7ebf\u7a0b\uff1a<code>worker-&gt;moveToThread(&amp;thread)</code>\u3002</li> <li>\u8fde\u63a5 Worker \u7684\u4fe1\u53f7\u5230 UI \u69fd\u4f7f\u7528\u9ed8\u8ba4 <code>Auto</code> \u6216\u663e\u5f0f <code>Queued</code>\uff0c\u4fdd\u8bc1\u5728 UI \u7ebf\u7a0b\u8fd0\u884c\u3002</li> <li>\u786e\u4fdd\u63a5\u6536\u8005\u7ebf\u7a0b\u6709\u4e8b\u4ef6\u5faa\u73af\uff08GUI \u7ebf\u7a0b\u5929\u7136\u6709\uff1b\u5b50\u7ebf\u7a0b\u9700\u8981\u8c03\u7528 <code>exec()</code> \u8fdb\u5165\u5faa\u73af\uff09\u3002</li> </ul>","tags":["qt"]},{"location":"qt/cross_thread_ui_update/#4","title":"4) \u4ee3\u7801\u793a\u4f8b","text":"<p>\u5de5\u4f5c\u7ebf\u7a0b\u8ba1\u7b97\uff0cUI \u7ebf\u7a0b\u66f4\u65b0\uff1a</p> <pre><code>class Worker : public QObject {\n    Q_OBJECT\nsignals:\n    void progress(QString msg);\npublic slots:\n    void doWork() {\n        // ...\u8017\u65f6\u4efb\u52a1...\n        emit progress(\"50%\");\n    }\n};\n\nQThread th;\nauto* worker = new Worker;\nworker-&gt;moveToThread(&amp;th);\nQObject::connect(&amp;th, &amp;QThread::started, worker, &amp;Worker::doWork);\n\n// \u8de8\u7ebf\u7a0b\uff1aAuto =&gt; Queued\uff0c\u69fd\u5728 GUI \u7ebf\u7a0b\u6267\u884c\nQObject::connect(worker, &amp;Worker::progress, label, [label](const QString&amp; s){\n    label-&gt;setText(s);\n});\n\nth.start();\n</code></pre> <p>\u76f4\u63a5\u628a\u8c03\u7528\u6392\u961f\u5230 GUI \u7ebf\u7a0b\uff1a</p> <pre><code>QMetaObject::invokeMethod(\n    label,                                // \u63a5\u6536\u8005\u51b3\u5b9a\u76ee\u6807\u7ebf\u7a0b\n    [label]{ label-&gt;setText(\"done\"); },   // Qt 5.10+ functor \u8bed\u6cd5\n    Qt::QueuedConnection\n);\n</code></pre> <p>0ms \u5b9a\u65f6\u5207\u56de\u4e3b\u7ebf\u7a0b\uff1a</p> <pre><code>QTimer::singleShot(0, QApplication::instance(), [w]{ w-&gt;updateUI(); });\n</code></pre> <p>\u65e7\u7248\u5b57\u7b26\u4e32\u69fd\u5199\u6cd5\uff1a</p> <pre><code>QMetaObject::invokeMethod(window, \"updateStatus\",\n                          Qt::QueuedConnection,\n                          Q_ARG(QString, text));\n</code></pre>","tags":["qt"]},{"location":"qt/cross_thread_ui_update/#5","title":"5) \u5e38\u89c1\u8bef\u7528","text":"<ul> <li>\u5728\u5b50\u7ebf\u7a0b\u76f4\u63a5\u8c03\u7528 <code>label-&gt;setText()</code>\uff1a\u672a\u5b9a\u4e49\u884c\u4e3a/\u5d29\u6e83\u3002</li> <li>\u5c06 <code>QWidget</code>/<code>QQuickItem</code> \u8c03\u7528 <code>moveToThread()</code>\uff1a\u7981\u6b62\uff0cUI \u5fc5\u987b\u7559\u5728 GUI \u7ebf\u7a0b\u3002</li> <li>\u5b50\u7ebf\u7a0b\u6ca1\u6709\u4e8b\u4ef6\u5faa\u73af\u5374\u4f7f\u7528\u961f\u5217\u8fde\u63a5\uff1a\u69fd\u4e0d\u4f1a\u6267\u884c\uff08\u9700\u8981 <code>QThread::exec()</code>\uff09\u3002</li> <li><code>Qt::BlockingQueuedConnection</code> \u5728\u540c\u7ebf\u7a0b\u6216\u9501\u987a\u5e8f\u4e0d\u5f53\u5bfc\u81f4\u6b7b\u9501\uff1a\u8c28\u614e\u4f7f\u7528\u3002</li> <li>\u961f\u5217\u8fde\u63a5\u4f20\u9012\u81ea\u5b9a\u4e49\u7c7b\u578b\u672a\u6ce8\u518c <code>QMetaType</code>\uff1a\u9700 <code>Q_DECLARE_METATYPE</code> + <code>qRegisterMetaType&lt;T&gt;()</code>\u3002</li> <li>lambda \u6355\u83b7\u60ac\u5782\u6307\u9488\uff1a\u5c06\u63a5\u6536\u8005\u5bf9\u8c61\u4f5c\u4e3a <code>connect</code> \u7684\u4e0a\u4e0b\u6587\uff0c\u6216\u4f7f\u7528 <code>QPointer</code>\u3002</li> </ul>","tags":["qt"]},{"location":"qt/cross_thread_ui_update/#6","title":"6) \u9009\u578b\u5c0f\u8d34\u58eb","text":"<ul> <li>\u9ed8\u8ba4 <code>Qt::AutoConnection</code> \u8db3\u591f\uff0c\u8de8\u7ebf\u7a0b\u81ea\u52a8\u6392\u961f\uff0c\u6027\u80fd/\u6b63\u786e\u6027\u5e73\u8861\u3002</li> <li>\u5927\u5bf9\u8c61\u7ed3\u679c\u907f\u514d\u9891\u7e41\u62f7\u8d1d\uff1a\u4f20 <code>QSharedPointer</code>\u3001\u8f7b\u91cf\u7ed3\u6784\uff0c\u6216\u4ec5\u4f20\u7d22\u5f15/\u53e5\u67c4\u3002</li> <li>QML/Qt Quick \u540c\u7406\uff1a\u53ea\u5728 GUI \u7ebf\u7a0b\u89e6\u78b0 QML \u5bf9\u8c61\uff1b\u7528\u4fe1\u53f7/<code>invokeMethod</code> \u5207\u56de\u3002</li> </ul>","tags":["qt"]},{"location":"qt/cross_thread_ui_update/#7","title":"7) \u4e0e\u201c\u4fe1\u53f7\u69fd\u8fde\u63a5\u7c7b\u578b\u201d\u7684\u5173\u7cfb\u4e0e\u91cd\u8d1f\u8f7d\u69fd\u5904\u7406","text":"<ul> <li>\u4ea4\u53c9\u9605\u8bfb\uff1a</li> <li>\u8fde\u63a5\u7c7b\u578b\u8be6\u89e3\uff1a\u89c1\u300aQt \u8fde\u63a5\u7c7b\u578b\u8be6\u89e3\u300b</li> <li>\u5751\u4f4d\u6e05\u5355\uff1a\u89c1\u300aQt \u4fe1\u53f7\u69fd\u5e38\u89c1\u5751\u4e0e\u6700\u4f73\u5b9e\u8df5\u300b</li> <li>Direct \u4e0d\u7b49\u4e8e\u201c\u540c\u7ebf\u7a0b\u201d\uff1a<code>Qt::DirectConnection</code> \u59cb\u7ec8\u5728\u201c\u53d1\u5c04\u7ebf\u7a0b\u201d\u540c\u6b65\u6267\u884c\uff0c\u5373\u4f7f\u63a5\u6536\u8005\u5c5e\u4e8e\u5176\u4ed6\u7ebf\u7a0b\u4e5f\u4e0d\u4f1a\u8fc1\u79fb\u5230\u63a5\u6536\u8005\u7ebf\u7a0b\uff1b\u56e0\u6b64\u53ef\u80fd\u8d8a\u7ebf\u7a0b\u8bbf\u95ee\u63a5\u6536\u8005\u5bf9\u8c61\uff08UI/QObject\uff09\uff0c\u98ce\u9669\u5f88\u9ad8\u3002</li> <li>\u91cd\u8d1f\u8f7d\u69fd\u4e0d\u8981\u7528 <code>DirectConnection</code>\uff08\u6216\u540c\u7ebf\u7a0b\u4e0b\u7684 <code>Auto</code> \u4f1a\u9000\u5316\u4e3a Direct\uff09\uff0c\u5426\u5219\u4f1a\u5728\u53d1\u5c04\u70b9\u540c\u6b65\u6267\u884c\u5e76\u963b\u585e\uff08\u53ef\u80fd\u662f UI \u7ebf\u7a0b\uff09\u3002</li> <li>\u5efa\u8bae\uff1a</li> <li>\u628a\u91cd\u6d3b\u653e\u5230 <code>Worker</code>\uff08\u5b50\u7ebf\u7a0b\uff09\u91cc\u6267\u884c\uff1b\u7ed3\u679c\u518d\u901a\u8fc7\u4fe1\u53f7\u56de\u5230 UI \u7ebf\u7a0b\u3002</li> <li>\u6216\u663e\u5f0f\u4f7f\u7528 <code>Qt::QueuedConnection</code>\uff0c\u8ba9\u8c03\u7528\u5f02\u6b65\u5316\uff0c\u907f\u514d\u963b\u585e\u53d1\u5c04\u7ebf\u7a0b\u3002</li> <li>\u9700\u8981\u7b49\u5f85\u7ed3\u679c\u65f6\u518d\u8003\u8651 <code>Qt::BlockingQueuedConnection</code>\uff0c\u8c28\u614e\u907f\u514d\u6b7b\u9501\u3002</li> </ul> <p>\u793a\u4f8b\uff1a<code>QtConcurrent</code> + <code>QFutureWatcher</code> \u4e0b\u653e\u8ba1\u7b97\uff0c\u5b8c\u6210\u540e\u5728 UI \u7ebf\u7a0b\u66f4\u65b0\u3002</p> <pre><code>#include &lt;QtConcurrent&gt;\n#include &lt;QFutureWatcher&gt;\n\nauto task = [] {\n    // heavy work...\n    return QString(\"result\");\n};\n\nQFuture&lt;QString&gt; future = QtConcurrent::run(task);\nauto* watcher = new QFutureWatcher&lt;QString&gt;(parent);\n\nQObject::connect(watcher, &amp;QFutureWatcher&lt;QString&gt;::finished, ui, [=]{\n    // QFutureWatcher \u7684\u4fe1\u53f7\u5728\u5176\u6240\u5728\u7ebf\u7a0b\uff08\u901a\u5e38\u662f GUI \u7ebf\u7a0b\uff09\u53d1\u51fa\n    ui-&gt;label-&gt;setText(watcher-&gt;future().result());\n    watcher-&gt;deleteLater();\n});\n\nwatcher-&gt;setFuture(future);\n</code></pre> <p>\u793a\u4f8b\uff1a\u540c\u7ebf\u7a0b\u4f46\u5e0c\u671b\u907f\u514d\u4e00\u6b21\u957f\u963b\u585e\uff0c\u53ef\u7528\u961f\u5217\u8fde\u63a5\u6216 0ms \u5b9a\u65f6\u5207\u7247\u5904\u7406\u3002</p> <pre><code>QObject::connect(obj, &amp;Obj::sig, obj, &amp;Obj::slot, Qt::QueuedConnection);\n// \u6216\nQTimer::singleShot(0, obj, [obj]{ obj-&gt;slot(); });\n</code></pre> <p>\u793a\u4f8b\uff1a\u5371\u9669\u7684\u201c\u8de8\u7ebf\u7a0b Direct\u201d\u5199\u6cd5\uff08\u5e94\u907f\u514d\uff09\u3002</p> <pre><code>QThread th;\nWorker w;\nw.moveToThread(&amp;th);\nth.start();\n\n// \u69fd\u4f1a\u5728 sender \u6240\u5728\u7ebf\u7a0b\u91cc\u6267\u884c\uff0c\u800c w \u5f52\u5c5e th \u7ebf\u7a0b\n// =&gt; \u8de8\u7ebf\u7a0b Direct\uff0c\u53ef\u80fd\u8d8a\u7ebf\u7a0b\u8bbf\u95ee w \u7684\u72b6\u6001/\u6210\u5458\nQObject::connect(&amp;sender, &amp;Sender::sig, &amp;w, &amp;Worker::slot, Qt::DirectConnection);\n\n// \u6b63\u786e\u5199\u6cd5\uff1a\u4f7f\u7528 Auto/Queued\uff0c\u6216\u628a\u91cd\u6d3b\u653e\u5165 Worker\uff0c\u901a\u8fc7\u4fe1\u53f7\u56de\u5230 UI\n</code></pre>","tags":["qt"]},{"location":"qt/how_to_stop_thread_safely/","title":"\u5982\u4f55\u5b89\u5168\u5730\u505c\u6b62\u6b63\u5728\u8fd0\u884c\u7684\u7ebf\u7a0b\u4efb\u52a1\uff1f","text":"","tags":["qt"]},{"location":"qt/how_to_stop_thread_safely/#_1","title":"\u95ee\u9898","text":"<p>Qt \u4e2d\u5982\u4f55\u5b89\u5168\u505c\u6b62\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u540e\u53f0\u4efb\u52a1\uff1f</p>","tags":["qt"]},{"location":"qt/how_to_stop_thread_safely/#_2","title":"\u56de\u7b54","text":"","tags":["qt"]},{"location":"qt/how_to_stop_thread_safely/#_3","title":"\u6838\u5fc3\u539f\u5219","text":"<ul> <li>\u534f\u4f5c\u5f0f\u53d6\u6d88\uff1a\u4efb\u52a1\u5468\u671f\u6027\u68c0\u67e5\u201c\u662f\u5426\u8bf7\u6c42\u4e2d\u65ad/\u505c\u6b62\u201d\uff0c\u5728\u5b89\u5168\u70b9\u6709\u5e8f\u9000\u51fa\u3002</li> <li>\u907f\u514d\u5f3a\u6740\uff1a\u786c\u7ec8\u6b62\u53ef\u80fd\u9020\u6210\u8d44\u6e90\u6cc4\u6f0f\u3001\u6b7b\u9501\u6216\u72b6\u6001\u4e0d\u4e00\u81f4\u3002</li> </ul>","tags":["qt"]},{"location":"qt/how_to_stop_thread_safely/#_4","title":"\u5e38\u89c1\u624b\u6bb5","text":"<ul> <li><code>QThread::requestInterruption()</code> + <code>isInterruptionRequested()</code>\uff1a</li> </ul> <pre><code>void Worker::doWork() {\n    while (...) {\n        if (QThread::currentThread()-&gt;isInterruptionRequested()) break;\n        // ... \u6267\u884c\u4e00\u5c0f\u6b65 ...\n    }\n    emit finished();\n}\n\n// \u8bf7\u6c42\u505c\u6b62\nthread-&gt;requestInterruption();\nthread-&gt;quit();\nthread-&gt;wait();\n</code></pre> <ul> <li>\u539f\u5b50\u6807\u5fd7\uff1a</li> </ul> <pre><code>std::atomic_bool stop{false};\n// \u5faa\u73af\u4e2d\u68c0\u67e5 stop.load()\uff1b\u5916\u90e8\u8bbe\u7f6e stop.store(true)\n</code></pre> <ul> <li>\u53ef\u4e2d\u65ad\u7b49\u5f85\uff1a</li> <li>\u4f7f\u7528\u5e26\u8d85\u65f6\u7684\u7b49\u5f85\u51fd\u6570\uff08\u5982 <code>waitFor...</code>\uff09\uff0c\u5468\u671f\u6027\u8fd4\u56de\u68c0\u67e5\u4e2d\u65ad\u3002</li> <li>I/O \u6216\u963b\u585e\u8bfb\uff1a\u5173\u95ed\u5957\u63a5\u5b57/\u7ba1\u9053\u5524\u9192\u963b\u585e\uff0c\u518d\u8d70\u6b63\u5e38\u6e05\u7406\u8def\u5f84\u3002</li> </ul>","tags":["qt"]},{"location":"qt/how_to_stop_thread_safely/#ui","title":"UI \u6536\u5c3e\u4e0e\u8d44\u6e90\u91ca\u653e","text":"<ul> <li>\u5728 <code>finished</code> \u69fd\u4e2d\u56de\u6536\u8d44\u6e90\u3001\u66f4\u65b0 UI \u72b6\u6001\u3002</li> <li>\u4f7f\u7528 <code>deleteLater()</code> \u9500\u6bc1\u5f52\u5c5e\u4e8e\u5b50\u7ebf\u7a0b\u7684\u5bf9\u8c61\uff1b\u7ebf\u7a0b\u7528 <code>quit()+wait()</code> \u6536\u5c3e\u3002</li> </ul>","tags":["qt"]},{"location":"qt/how_to_stop_thread_safely/#qtconcurrent","title":"\u7ebf\u7a0b\u6c60/QtConcurrent \u4efb\u52a1","text":"<ul> <li>\u4f7f\u7528 <code>QFuture</code>\uff1a</li> <li>Qt6\uff1a<code>QFuture::cancel()</code>/<code>isCanceled()</code>\uff1bQt5 \u9700\u81ea\u7ba1\u6807\u5fd7\u3002</li> <li><code>QFutureWatcher::finished()</code> \u5728 UI \u7ebf\u7a0b\u901a\u77e5\uff0c\u505a\u5584\u540e\u3002</li> </ul>","tags":["qt"]},{"location":"qt/how_to_stop_thread_safely/#_5","title":"\u53cd\u4f8b\u4e0e\u98ce\u9669","text":"<ul> <li>\u76f4\u63a5 <code>terminate()</code>\uff1a\u4e0d\u53ef\u53d6\uff0c\u53ef\u80fd\u4e2d\u65ad\u5728\u5173\u952e\u533a\uff0c\u5bfc\u81f4\u6570\u636e\u7834\u574f\u3002</li> <li>\u5728 UI \u7ebf\u7a0b\u7b49\u5f85\u672a\u53ef\u4e2d\u65ad\u7684\u957f\u4efb\u52a1\uff1a\u754c\u9762\u5361\u6b7b\uff1b\u6539\u7528\u540e\u53f0\u6267\u884c + \u534f\u4f5c\u5f0f\u53d6\u6d88\u3002</li> </ul>","tags":["qt"]},{"location":"qt/how_to_stop_thread_safely/#_6","title":"\u5173\u8054","text":"<ul> <li>\u300aQThread \u6b63\u786e\u4f7f\u7528\u59ff\u52bf\u4e0e\u5e38\u89c1\u8bef\u533a\u300b</li> <li>\u300a\u8de8\u7ebf\u7a0b\u66f4\u65b0 UI \u7684\u5b89\u5168\u65b9\u5f0f\uff1f\u300b</li> </ul>","tags":["qt"]},{"location":"qt/pitfalls_best_practices/","title":"Qt \u4fe1\u53f7\u69fd\u5e38\u89c1\u5751\u4e0e\u6700\u4f73\u5b9e\u8df5","text":"","tags":["qt"]},{"location":"qt/pitfalls_best_practices/#_1","title":"\u5e38\u89c1\u5751\u4f4d","text":"<ul> <li>\u91cd\u8d1f\u8f7d\u69fd\u914d Direct/\u540c\u7ebf\u7a0b Auto\uff1a</li> <li>\u5361\u4f4f\u53d1\u5c04\u7ebf\u7a0b\uff08\u53ef\u80fd\u662f UI\uff09\uff1b\u6539\u4e3a Queued \u6216\u4e0b\u653e\u5230 Worker\u3002</li> <li>\u8de8\u7ebf\u7a0b Direct\uff1a</li> <li>\u69fd\u5728\u53d1\u5c04\u7ebf\u7a0b\u6267\u884c\uff0c\u53ef\u80fd\u8d8a\u7ebf\u7a0b\u8bbf\u95ee\u63a5\u6536\u8005\uff1b\u8de8\u7ebf\u7a0b\u5e94\u7528 Queued/BlockingQueued\u3002</li> <li>\u5b50\u7ebf\u7a0b\u65e0\u4e8b\u4ef6\u5faa\u73af\uff1a</li> <li>Queued \u7684\u69fd\u4e0d\u6267\u884c\uff1b\u5b50\u7ebf\u7a0b\u9700\u8fdb\u5165 <code>QThread::exec()</code>\u3002</li> <li>\u81ea\u5b9a\u4e49\u53c2\u6570\u672a\u6ce8\u518c\uff1a</li> <li>\u961f\u5217\u8fde\u63a5\u8de8\u7ebf\u7a0b\u4f20\u53c2\u9700 <code>Q_DECLARE_METATYPE</code> + <code>qRegisterMetaType&lt;T&gt;()</code>\u3002</li> <li>\u8bef\u7528 BlockingQueued\uff1a</li> <li>\u540c\u7ebf\u7a0b\u6b7b\u9501\uff1b\u4e0d\u540c\u7ebf\u7a0b\u4e5f\u53ef\u80fd\u56e0\u9501\u987a\u5e8f\u9519\u8bef\u6b7b\u9501\uff1b\u4ec5\u5728\u786e\u9700\u540c\u6b65\u7b49\u5f85\u65f6\u4f7f\u7528\u3002</li> <li>\u91cd\u590d\u8fde\u63a5\uff1a</li> <li>\u5bfc\u81f4\u69fd\u591a\u6b21\u89e6\u53d1\uff1b\u7528 <code>Qt::UniqueConnection</code> \u6216\u5728\u8fde\u63a5\u524d\u65ad\u5f00\u65e7\u8fde\u63a5\u3002</li> <li>lambda \u6355\u83b7\u60ac\u5782\uff1a</li> <li>\u6355\u83b7\u88f8\u6307\u9488\u751f\u547d\u5468\u671f\u4e0d\u53d7\u63a7\uff1b\u4f7f\u7528\u63a5\u6536\u8005\u4f5c\u4e3a\u4e0a\u4e0b\u6587\u5bf9\u8c61\uff08\u81ea\u52a8\u65ad\u8fde\uff09\u6216 <code>QPointer</code>\u3002</li> <li>\u5728\u5b50\u7ebf\u7a0b\u89e6\u78b0 UI \u5bf9\u8c61\uff1a</li> <li>\u672a\u5b9a\u4e49\u884c\u4e3a\uff1b\u6240\u6709 UI \u66f4\u65b0\u5207\u56de GUI \u7ebf\u7a0b\u3002</li> </ul>","tags":["qt"]},{"location":"qt/pitfalls_best_practices/#_2","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ul> <li>\u8fde\u63a5\u7c7b\u578b\u9009\u578b\uff1a\u9ed8\u8ba4 Auto\uff1b\u8de8\u7ebf\u7a0b\u663e\u5f0f Queued\uff1b\u7b49\u5f85\u7ed3\u679c\u7528 BlockingQueued\uff08\u8c28\u614e\uff09\u3002</li> <li>\u7ebf\u7a0b\u67b6\u6784\uff1aWorker \u5bf9\u8c61\u79fb\u5230\u5b50\u7ebf\u7a0b\uff1b\u7ed3\u679c\u901a\u8fc7\u4fe1\u53f7\u56de UI\u3002</li> <li>\u8f7b\u91cd\u5206\u79bb\uff1a\u8017\u65f6\u4efb\u52a1\u653e\u540e\u53f0\uff1bUI \u7ebf\u7a0b\u4ec5\u505a\u8f7b\u91cf\u66f4\u65b0\uff1b\u9700\u8981\u65f6\u5207\u7247\uff08<code>QTimer::singleShot(0, ...)</code>\uff09\u3002</li> <li>\u53c2\u6570\u4f20\u9012\uff1a\u8de8\u7ebf\u7a0b\u907f\u514d\u5927\u5bf9\u8c61\u62f7\u8d1d\uff0c\u4f18\u5148\u8f7b\u91cf\u6570\u636e\u6216\u5171\u4eab\u6307\u9488\u3002</li> <li>\u8fde\u63a5\u7ba1\u7406\uff1a\u4fdd\u5b58 <code>QMetaObject::Connection</code> \u4ee5\u4fbf\u65ad\u5f00\uff1b\u6216\u7528\u4e0a\u4e0b\u6587\u5bf9\u8c61\u81ea\u52a8\u65ad\u8fde\u3002</li> <li>\u8bed\u6cd5\u9009\u62e9\uff1a\u4f18\u5148\u201c\u65b0\u8bed\u6cd5\u201d\uff08\u51fd\u6570\u6307\u9488/\u6210\u5458\u6307\u9488\uff09\u83b7\u5f97\u7f16\u8bd1\u671f\u68c0\u67e5\uff1b\u91cd\u8f7d\u4fe1\u53f7\u7528 <code>QOverload&lt;&gt;</code> \u8f85\u52a9\u3002</li> </ul>","tags":["qt"]},{"location":"qt/pitfalls_best_practices/#_3","title":"\u53c2\u8003\u4e0e\u5173\u8054","text":"<ul> <li>\u300aQt \u4fe1\u53f7\u69fd\u673a\u5236\uff08\u539f\u7406\u4e0e\u8bed\u6cd5\uff09\u300b</li> <li>\u300aQt \u8fde\u63a5\u7c7b\u578b\u8be6\u89e3\u300b</li> <li>\u300a\u8de8\u7ebf\u7a0b\u66f4\u65b0 UI \u7684\u5b89\u5168\u65b9\u5f0f\uff1f\u300b</li> </ul>","tags":["qt"]},{"location":"qt/qtconcurrent_vs_qthreadpool/","title":"QtConcurrent \u548c QThreadPool \u7684\u533a\u522b\u4e0e\u9009\u62e9\uff1f","text":"","tags":["qt"]},{"location":"qt/qtconcurrent_vs_qthreadpool/#_1","title":"\u95ee\u9898","text":"<p><code>QtConcurrent</code> \u548c <code>QThreadPool</code> \u6709\u4ec0\u4e48\u533a\u522b\uff1f\u5728\u4ec0\u4e48\u573a\u666f\u4e0b\u9009\u62e9\u54ea\u4e00\u4e2a\uff1f</p>","tags":["qt"]},{"location":"qt/qtconcurrent_vs_qthreadpool/#_2","title":"\u56de\u7b54","text":"","tags":["qt"]},{"location":"qt/qtconcurrent_vs_qthreadpool/#1","title":"1) \u5b9a\u4f4d\u4e0e\u5173\u7cfb","text":"<ul> <li>QtConcurrent\uff1a\u9ad8\u5c42\u201c\u58f0\u660e\u5f0f\u5e76\u53d1\u201d\u63a5\u53e3\uff08run/map/mapReduced/filter \u7b49\uff09\uff0c\u8fd4\u56de <code>QFuture</code>\uff1b\u9ed8\u8ba4\u57fa\u4e8e\u5168\u5c40 <code>QThreadPool</code> \u5b9e\u73b0\u3002</li> <li>QThreadPool\uff1a\u5e95\u5c42\u201c\u7ebf\u7a0b\u6c60\u6267\u884c\u5668\u201d\uff0c\u63d0\u4ea4 <code>QRunnable</code> \u6216\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u8d1f\u8d23\u7ebf\u7a0b\u4e0e\u4efb\u52a1\u961f\u5217\u7ba1\u7406\u3002</li> </ul> <p>\u7ed3\u8bba\uff1aQtConcurrent \u901a\u5e38\u7528\u7ebf\u7a0b\u6c60\u8dd1\u4efb\u52a1\uff1bQThreadPool \u662f\u6267\u884c\u5668\uff0cQtConcurrent \u662f\u6613\u7528\u7684\u5c01\u88c5\u3002</p>","tags":["qt"]},{"location":"qt/qtconcurrent_vs_qthreadpool/#2","title":"2) \u7f16\u7a0b\u6a21\u578b\u5bf9\u6bd4","text":"<ul> <li>QtConcurrent\uff1a</li> <li>\u76f4\u63a5\u4f20\u51fd\u6570/\u5bb9\u5668\uff0c\u81ea\u52a8\u5207\u5206\u4e0e\u5e76\u884c\u8c03\u5ea6\u3002</li> <li>\u4ea7\u51fa <code>QFuture</code>\uff0c\u914d\u5408 <code>QFutureWatcher</code> \u83b7\u53d6 <code>finished/progress/canceled</code> \u7b49\u4fe1\u53f7\u3002</li> <li>\u9002\u5408\u4e00\u6b21\u6027\u77ed\u4efb\u52a1\u3001\u5e76\u884c map/reduce\u3001\u7ed3\u679c\u805a\u5408\u3002</li> <li>QThreadPool\uff1a</li> <li>\u624b\u52a8\u5c01\u88c5\u4efb\u52a1\uff08<code>QRunnable</code>/\u53ef\u8c03\u7528\uff09\uff0c\u53ef\u8bbe\u7f6e\u6700\u5927\u7ebf\u7a0b\u6570\u3001\u4f18\u5148\u7ea7\u3002</li> <li>\u65e0\u5185\u7f6e future\uff0c\u9700\u8981\u81ea\u5efa\u4fe1\u53f7/\u56de\u8c03/\u540c\u6b65\u6765\u4f20\u7ed3\u679c\u4e0e\u8fdb\u5ea6\u3002</li> <li>\u9002\u5408\u81ea\u5b9a\u4e49\u8c03\u5ea6\u7b56\u7565\u3001\u4efb\u52a1\u5206\u7247\u548c\u751f\u547d\u5468\u671f\u63a7\u5236\u3002</li> </ul> <p>\u5171\u540c\u70b9\uff1a\u7ebf\u7a0b\u6c60\u7ebf\u7a0b\u9ed8\u8ba4\u65e0\u4e8b\u4ef6\u5faa\u73af\uff1b\u5982\u9700\u4e8b\u4ef6\u9a71\u52a8/\u5b9a\u65f6\u5668\uff0c\u5e94\u6539\u7528 <code>QThread + Worker</code>\u3002</p>","tags":["qt"]},{"location":"qt/qtconcurrent_vs_qthreadpool/#3","title":"3) \u53d6\u6d88\u3001\u8fdb\u5ea6\u4e0e\u7ed3\u679c","text":"<ul> <li>QtConcurrent\uff1a</li> <li>Qt6 \u652f\u6301 <code>QFuture::cancel()/isCanceled()</code>\uff08\u4efb\u52a1\u9700\u534f\u4f5c\u68c0\u67e5\uff09\u3002</li> <li>\u81ea\u52a8\u805a\u5408\u7ed3\u679c\uff08\u5982 <code>mapped()</code>/<code>filtered()</code>\uff09\u3002</li> <li>\u901a\u8fc7 <code>QFutureWatcher</code> \u5728 UI \u7ebf\u7a0b\u5904\u7406\u5b8c\u6210\u4e0e\u8fdb\u5ea6\u3002</li> <li>QThreadPool\uff1a</li> <li>\u53d6\u6d88\u9700\u81ea\u5b9a\u4e49\u534f\u8bae\uff08\u539f\u5b50\u6807\u5fd7\u3001\u6761\u4ef6\u53d8\u91cf\u7b49\uff09\u3002</li> <li>\u7ed3\u679c\u4e0e\u8fdb\u5ea6\u9700\u81ea\u5efa\u4fe1\u53f7/\u56de\u8c03\u3002</li> </ul>","tags":["qt"]},{"location":"qt/qtconcurrent_vs_qthreadpool/#4","title":"4) \u9009\u578b\u5efa\u8bae","text":"<ul> <li>\u58f0\u660e\u5f0f\u5e76\u53d1\u3001\u8981\u7ed3\u679c/\u8fdb\u5ea6/\u53d6\u6d88\uff1a\u4f18\u5148 QtConcurrent\uff08+ QFutureWatcher\uff09\u3002</li> <li>\u7279\u522b\u5c0f\u800c\u591a\u7684\u4efb\u52a1\u3001\u9700\u8981\u7cbe\u7ec6\u63a7\u5236\u5206\u7247\u4e0e\u961f\u5217\uff1a\u7528 QThreadPool \u624b\u5de5\u6279\u5904\u7406\u66f4\u7075\u6d3b\u3002</li> <li>CPU \u5bc6\u96c6\u6279\u5904\u7406\uff1a\u4e24\u8005\u90fd\u53ef\u4ee5\uff1b\u63a7\u5236\u5e76\u53d1\u5ea6\uff08\u6c60\u5927\u5c0f\u2248\u6838\u5fc3\u6570\uff09\u3002</li> <li>\u9700\u8981\u4e8b\u4ef6\u5faa\u73af/\u957f\u671f\u9a7b\u7559\u5bf9\u8c61\uff1a\u90fd\u4e0d\u5408\u9002\uff0c\u6539\u7528 <code>QThread + Worker::moveToThread()</code>\u3002</li> </ul>","tags":["qt"]},{"location":"qt/qtconcurrent_vs_qthreadpool/#5","title":"5) \u793a\u4f8b","text":"<ul> <li>QtConcurrent\uff1a</li> </ul> <pre><code>auto fut = QtConcurrent::run([](){ /* work */ return 42; });\nauto* watcher = new QFutureWatcher&lt;int&gt;(parent);\nQObject::connect(watcher, &amp;QFutureWatcher&lt;int&gt;::finished, ui, [=]{\n    ui-&gt;showValue(fut.result());\n    watcher-&gt;deleteLater();\n});\nwatcher-&gt;setFuture(fut);\n</code></pre> <ul> <li>QThreadPool\uff1a</li> </ul> <pre><code>class Task : public QRunnable {\npublic:\n    void run() override { /* work */ /* emit via QObject bridge if needed */ }\n};\nQThreadPool::globalInstance()-&gt;start(new Task());\n// \u6216\u8bbe\u7f6e\u81ea\u5b9a\u4e49\u6c60\uff1apool.setMaxThreadCount(n); pool.start(new Task());\n</code></pre>","tags":["qt"]},{"location":"qt/qtconcurrent_vs_qthreadpool/#6","title":"6) \u5173\u8054","text":"<ul> <li>\u300aQThread \u548c\u7ebf\u7a0b\u6c60\u5982\u4f55\u9009\u62e9\uff1f\u300b</li> <li>\u300aQThread \u6b63\u786e\u4f7f\u7528\u59ff\u52bf\u4e0e\u5e38\u89c1\u8bef\u533a\u300b</li> <li>\u300a\u8de8\u7ebf\u7a0b\u66f4\u65b0 UI \u7684\u5b89\u5168\u65b9\u5f0f\uff1f\u300b</li> </ul>","tags":["qt"]},{"location":"qt/qthread_usage/","title":"QThread \u6b63\u786e\u4f7f\u7528\u59ff\u52bf\u4e0e\u5e38\u89c1\u8bef\u533a","text":"","tags":["qt"]},{"location":"qt/qthread_usage/#_1","title":"\u95ee\u9898","text":"<p>\u5982\u4f55\u6b63\u786e\u4f7f\u7528 QThread\uff1f\u63a8\u8350\u67b6\u6784\u662f\u4ec0\u4e48\uff1f\u6709\u54ea\u4e9b\u5e38\u89c1\u8bef\u533a\u4e0e\u89c4\u907f\u65b9\u5f0f\uff1f</p>","tags":["qt"]},{"location":"qt/qthread_usage/#_2","title":"\u56de\u7b54","text":"","tags":["qt"]},{"location":"qt/qthread_usage/#1","title":"1) \u4e24\u79cd\u7528\u6cd5\u4e0e\u63a8\u8350","text":"","tags":["qt"]},{"location":"qt/qthread_usage/#worker-movetothread","title":"\u63a8\u8350\uff1aWorker \u5bf9\u8c61 + <code>moveToThread()</code>","text":"<ul> <li>\u5c06\u7eaf\u4e1a\u52a1\u7684 <code>QObject</code>\uff08Worker\uff09\u79fb\u52a8\u5230\u5b50\u7ebf\u7a0b\uff1b\u901a\u8fc7\u4fe1\u53f7\u628a\u4efb\u52a1\u6295\u9012\u7ed9 Worker\uff0c\u901a\u8fc7\u4fe1\u53f7\u628a\u7ed3\u679c\u53d1\u56de UI\u3002</li> <li>\u4f18\u70b9\uff1a\u590d\u7528\u4e8b\u4ef6\u5faa\u73af\u3001\u4fbf\u4e8e\u8de8\u7ebf\u7a0b\u901a\u4fe1\u3001\u8d44\u6e90\u751f\u547d\u5468\u671f\u6e05\u6670\u3002</li> </ul>","tags":["qt"]},{"location":"qt/qthread_usage/#qthread-run","title":"\u5c11\u6570\u573a\u666f\uff1a\u7ee7\u627f QThread\uff08\u81ea\u5b9a\u4e49 <code>run()</code>/\u4e13\u7528\u7ebf\u7a0b\uff09","text":"<ul> <li>\u5728 <code>run()</code> \u4e2d\u6267\u884c\u963b\u585e\u5faa\u73af\u6216\u8bbe\u7f6e\u81ea\u5b9a\u4e49\u4e8b\u4ef6\u5faa\u73af\u7b49\u7279\u6b8a\u9700\u6c42\u3002</li> <li>\u4e0d\u8981\u5728 <code>QThread</code> \u5b50\u7c7b\u4e2d\u653e\u4e1a\u52a1\u69fd/\u5bf9\u8c61\uff1b\u4e1a\u52a1\u5bf9\u8c61\u5e94\u4e3a\u72ec\u7acb <code>QObject</code> \u5e76\u653e\u5165\u76ee\u6807\u7ebf\u7a0b\u3002</li> </ul> <p>\u7ed3\u8bba\uff1a\u7edd\u5927\u591a\u6570\u573a\u666f\u4f7f\u7528 Worker + <code>moveToThread()</code> \u5373\u53ef\u3002</p>","tags":["qt"]},{"location":"qt/qthread_usage/#2-worker-movetothread","title":"2) \u6807\u51c6\u6a21\u677f\uff08Worker + moveToThread\uff09","text":"<pre><code>class Worker : public QObject {\n    Q_OBJECT\npublic:\n    explicit Worker(QObject* parent = nullptr) : QObject(parent) {}\n\nsignals:\n    void progress(int p);\n    void finished();\n\npublic slots:\n    void doWork(QString path) {\n        for (int i = 0; i &lt; 100; ++i) {\n            if (QThread::currentThread()-&gt;isInterruptionRequested()) break;\n            // ...heavy work...\n            emit progress(i);\n        }\n        emit finished();\n    }\n};\n\n// \u4f7f\u7528\nauto* th = new QThread;                // \u65e0\u7236\u5bf9\u8c61\uff0c\u907f\u514d\u8de8\u7ebf\u7a0b\u7236\u5b50\u5173\u7cfb\nauto* w  = new Worker;                 // \u540c\u4e0a\nw-&gt;moveToThread(th);\n\nQObject::connect(th, &amp;QThread::started,  w,  [w]{ w-&gt;doWork(\"/tmp\"); });\nQObject::connect(w,  &amp;Worker::progress, ui,  [ui](int p){ ui-&gt;bar-&gt;setValue(p); });\nQObject::connect(w,  &amp;Worker::finished, th, &amp;QThread::quit);\nQObject::connect(th, &amp;QThread::finished, w,  &amp;QObject::deleteLater);\nQObject::connect(th, &amp;QThread::finished, th, &amp;QObject::deleteLater);\n\nth-&gt;start();\n\n// \u8bf7\u6c42\u7ed3\u675f\uff08\u4f8b\u5982\u7a97\u53e3\u5173\u95ed\uff09\nth-&gt;requestInterruption();\nth-&gt;quit();\nth-&gt;wait();\n</code></pre> <p>\u8981\u70b9\uff1a - \u5b50\u7ebf\u7a0b\u5bf9\u8c61\u7528 <code>deleteLater()</code> \u5728\u5176\u6240\u5c5e\u7ebf\u7a0b\u5b89\u5168\u9500\u6bc1\uff1b\u7ebf\u7a0b\u7528 <code>quit()+wait()</code> \u6536\u5c3e\u3002 - \u4f7f\u7528 <code>requestInterruption()</code>/<code>isInterruptionRequested()</code> \u534f\u4f5c\u5f0f\u53d6\u6d88\uff1b\u6216\u81ea\u5b9a\u4e49\u539f\u5b50\u6807\u5fd7\u3002 - UI \u66f4\u65b0\u5728 UI \u7ebf\u7a0b\u5b8c\u6210\uff08\u8de8\u7ebf\u7a0b\u4fe1\u53f7\u69fd\u9ed8\u8ba4 Queued\uff09\u3002</p>","tags":["qt"]},{"location":"qt/qthread_usage/#3","title":"3) \u4e8b\u4ef6\u5faa\u73af\u4e0e\u5b9a\u65f6\u5668","text":"<ul> <li><code>QThread</code> \u9ed8\u8ba4 <code>start()</code> \u540e\u8fdb\u5165\u5185\u90e8\u4e8b\u4ef6\u5faa\u73af\uff08\u9664\u975e\u81ea\u5b9a\u4e49 <code>run()</code> \u8986\u76d6\u4e86\u5b83\uff09\u3002</li> <li><code>QTimer</code> \u7b49\u4f9d\u8d56\u4e8b\u4ef6\u5faa\u73af\u7684\u7c7b\u5fc5\u987b\u5728\u6709\u4e8b\u4ef6\u5faa\u73af\u7684\u7ebf\u7a0b\u4e2d\u4f7f\u7528\uff1b\u5426\u5219\u5b9a\u65f6\u5668/\u4e8b\u4ef6\u4e0d\u4f1a\u89e6\u53d1\u3002</li> <li>\u82e5\u81ea\u5b9a\u4e49 <code>run()</code> \u6267\u884c\u957f\u963b\u585e\u5faa\u73af\uff0c\u5219\u961f\u5217\u4e8b\u4ef6\u65e0\u6cd5\u5904\u7406\uff1b\u5c3d\u91cf\u8ba9 Worker \u4f7f\u7528\u9ed8\u8ba4\u4e8b\u4ef6\u5faa\u73af\uff0c\u907f\u514d\u5728 <code>run()</code> \u4e2d\u963b\u585e\u3002</li> </ul>","tags":["qt"]},{"location":"qt/qthread_usage/#4","title":"4) \u7ebf\u7a0b\u4eb2\u548c\u6027\u4e0e\u5bf9\u8c61\u751f\u547d\u5468\u671f","text":"<ul> <li><code>QObject::thread()</code> \u8868\u793a\u5bf9\u8c61\u5f52\u5c5e\u7ebf\u7a0b\uff1b\u53ea\u80fd\u5728\u8be5\u7ebf\u7a0b\u76f4\u63a5\u8bbf\u95ee\u5176\u975e\u7ebf\u7a0b\u5b89\u5168\u72b6\u6001\u3002</li> <li>\u4e0d\u8981\u8de8\u7ebf\u7a0b\u5efa\u7acb\u7236\u5b50\u5173\u7cfb\uff08\u7236\u5728 UI \u7ebf\u7a0b\u3001\u5b50\u5728 Worker \u7ebf\u7a0b\u7b49\uff09\uff1b\u5e38\u89c1\u505a\u6cd5\u662f\u65e0\u7236\u521b\u5efa\u5bf9\u8c61\uff0c\u79fb\u52a8\u5230\u76ee\u6807\u7ebf\u7a0b\u540e\u518d\u8bbe\u7f6e\u7236\u5b50\u3002</li> <li>\u9500\u6bc1\u5bf9\u8c61\u7528 <code>deleteLater()</code> \u8ba9\u5176\u5728\u6240\u5c5e\u7ebf\u7a0b\u7684\u4e8b\u4ef6\u5faa\u73af\u4e2d\u5b8c\u6210\u3002</li> </ul>","tags":["qt"]},{"location":"qt/qthread_usage/#5","title":"5) \u5e38\u89c1\u8bef\u533a","text":"<ul> <li>\u5c06 UI \u5bf9\u8c61\u79fb\u5230\u5b50\u7ebf\u7a0b\u6216\u5728\u5b50\u7ebf\u7a0b\u76f4\u63a5\u89e6\u78b0 UI\uff1a\u672a\u5b9a\u4e49\u884c\u4e3a\u3002</li> <li>\u8de8\u7ebf\u7a0b\u4f7f\u7528 <code>Qt::DirectConnection</code>\uff1a\u69fd\u5728\u53d1\u5c04\u7ebf\u7a0b\u6267\u884c\uff0c\u8d8a\u7ebf\u7a0b\u8bbf\u95ee\u63a5\u6536\u8005\uff1b\u8de8\u7ebf\u7a0b\u4f7f\u7528 <code>Queued</code>\u3002</li> <li>\u5b50\u7ebf\u7a0b\u672a\u8fdb\u5165\u4e8b\u4ef6\u5faa\u73af\u5374\u4f7f\u7528\u961f\u5217\u8fde\u63a5\uff1a\u69fd\u4e0d\u6267\u884c\uff1b\u9700\u8981 <code>start()</code> \u540e\u8fdb\u5165 <code>exec()</code>\u3002</li> <li>\u5728 <code>run()</code> \u4e2d\u6267\u884c\u957f\u963b\u585e\u5bfc\u81f4\u4e8b\u4ef6\u65e0\u6cd5\u5904\u7406\uff1a\u6539\u4e3a Worker + \u9ed8\u8ba4\u4e8b\u4ef6\u5faa\u73af\u3002</li> <li>\u7c97\u66b4\u7ec8\u6b62\u7ebf\u7a0b\uff08\u5982\u5e73\u53f0 API \u5f3a\u6740\uff09\uff1a\u6613\u5bfc\u81f4\u8d44\u6e90\u6cc4\u6f0f\u6216\u4e0d\u4e00\u81f4\uff1b\u4f18\u5148\u534f\u4f5c\u5f0f\u53d6\u6d88\u3002</li> <li>\u7ebf\u7a0b\u4e0d\u6536\u5c3e\uff1a\u5fd8\u8bb0 <code>quit()</code>/<code>wait()</code>\uff1b\u4f1a\u6cc4\u6f0f\u6216\u5d29\u6e83\u3002</li> <li>\u5728\u9519\u8bef\u7ebf\u7a0b delete \u5bf9\u8c61\uff1a\u4f7f\u7528 <code>deleteLater()</code>\u3002</li> </ul>","tags":["qt"]},{"location":"qt/qthread_usage/#6","title":"6) \u505c\u6b62/\u53d6\u6d88\u4e0e\u4e2d\u65ad","text":"<ul> <li><code>QThread::requestInterruption()</code> + \u5728\u5faa\u73af\u4e2d\u68c0\u67e5 <code>isInterruptionRequested()</code>\u3002</li> <li>\u81ea\u5b9a\u4e49 <code>std::atomic_bool stop{false};</code> \u5e76\u5728\u70ed\u70b9\u5faa\u73af\u68c0\u67e5\u3002</li> <li>I/O \u6216\u963b\u585e\u7b49\u5f85\uff1a\u4f7f\u7528\u53ef\u4e2d\u65ad API\uff08\u5e26\u8d85\u65f6\uff09\u6216\u5728\u5916\u90e8\u5173\u95ed\u53e5\u67c4\u4ee5\u5524\u9192\u963b\u585e\u3002</li> </ul>","tags":["qt"]},{"location":"qt/qthread_usage/#7-qthreadpool-qtconcurrent","title":"7) QThreadPool / QtConcurrent","text":"<ul> <li>\u96f6\u6563\u4e00\u6b21\u6027\u4efb\u52a1\uff1a\u4f18\u5148\u4f7f\u7528 <code>QThreadPool</code> \u6216 <code>QtConcurrent::run()</code>\uff0c\u907f\u514d\u5927\u91cf <code>QThread</code> \u7ba1\u7406\u5f00\u9500\u3002</li> <li>\u6279\u91cf CPU \u5bc6\u96c6\uff1a\u63a7\u5236\u5e76\u53d1\u5ea6\uff08\u7ebf\u7a0b\u6c60\u5927\u5c0f = \u6838\u5fc3\u6570\u6216\u5408\u9002\u7684\u500d\u6570\uff09\u3002</li> <li>\u7ed3\u5408 <code>QFutureWatcher</code> \u5728 UI \u7ebf\u7a0b\u5904\u7406\u5b8c\u6210/\u8fdb\u5ea6\u4fe1\u53f7\u3002</li> </ul>","tags":["qt"]},{"location":"qt/qthread_usage/#8-qthread","title":"8) \u793a\u4f8b\uff1a\u7ee7\u627f QThread \u7684\u9002\u7528\u573a\u666f\uff08\u5c11\u89c1\uff09","text":"<pre><code>class LooperThread : public QThread {\n    void run() override {\n        QEventLoop loop;           // \u81ea\u5b9a\u4e49\u4e8b\u4ef6\u5faa\u73af\n        QTimer timer;              // \u7ed1\u5b9a\u5230\u5f53\u524d\u7ebf\u7a0b\n        QObject::connect(&amp;timer, &amp;QTimer::timeout, []{ /* ... */ });\n        timer.start(100);\n        loop.exec();               // \u9000\u51fa loop \u5373\u7ebf\u7a0b\u7ed3\u675f\n    }\n};\n</code></pre> <p>\u6ce8\u610f\uff1a\u4e0d\u8981\u628a\u4e1a\u52a1\u69fd/\u5bf9\u8c61\u585e\u8fdb <code>QThread</code> \u5b50\u7c7b\u91cc\u5e76\u671f\u671b\u81ea\u52a8\u8de8\u7ebf\u7a0b\uff1b\u4e1a\u52a1\u4ecd\u5e94\u653e\u5728 Worker \u4e2d\u3002</p>","tags":["qt"]},{"location":"qt/qthread_usage/#9","title":"9) \u5173\u8054\u4e3b\u9898","text":"<ul> <li>\u300a\u8de8\u7ebf\u7a0b\u66f4\u65b0 UI \u7684\u5b89\u5168\u65b9\u5f0f\uff1f\u300b</li> <li>\u300aQt \u8fde\u63a5\u7c7b\u578b\u8be6\u89e3\u300b</li> <li>\u300a\u4fe1\u53f7\u69fd\u5e38\u89c1\u5751\u4e0e\u6700\u4f73\u5b9e\u8df5\u300b</li> </ul>","tags":["qt"]},{"location":"qt/signals_and_slots/","title":"Qt \u4fe1\u53f7\u69fd\u673a\u5236","text":"","tags":["qt"]},{"location":"qt/signals_and_slots/#_1","title":"\u95ee\u9898","text":"<p>Qt \u7684\u4fe1\u53f7-\u69fd\u673a\u5236\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1f\u5e38\u7528\u8bed\u6cd5\u6709\u54ea\u4e9b\uff1f</p>","tags":["qt"]},{"location":"qt/signals_and_slots/#_2","title":"\u56de\u7b54","text":"","tags":["qt"]},{"location":"qt/signals_and_slots/#1-meta-object","title":"1) \u57fa\u672c\u673a\u5236\uff08Meta-Object + \u4e8b\u4ef6\u5faa\u73af\uff09","text":"<ul> <li>\u5143\u5bf9\u8c61\u7cfb\u7edf\uff1a\u542b\u6709 <code>Q_OBJECT</code> \u7684\u7c7b\u4f1a\u7ecf\u7531 <code>moc</code> \u751f\u6210\u5143\u4fe1\u606f\uff08\u4fe1\u53f7\u5217\u8868\u3001\u5c5e\u6027\u3001\u8c03\u7528\u8868\u7b49\uff09\u3002</li> <li>\u8fde\u63a5\u5efa\u7acb\uff1a<code>QObject::connect</code> \u5efa\u7acb\u4fe1\u53f7\u4e0e\u69fd\u7684\u5173\u8054\uff0c\u8fd4\u56de <code>QMetaObject::Connection</code>\uff0c\u5bf9\u8c61\u6790\u6784\u4f1a\u81ea\u52a8\u65ad\u5f00\u76f8\u5173\u8fde\u63a5\u3002</li> <li>\u53d1\u5c04\u4fe1\u53f7\uff1a\u53d1\u5c04\u672c\u8d28\u662f\u4e00\u4e2a\u666e\u901a\u6210\u5458\u51fd\u6570\u8c03\u7528\uff0c\u5185\u90e8\u901a\u8fc7 <code>QMetaObject::activate</code> \u904d\u5386\u8fde\u63a5\uff0c\u5e76\u6309\u8fde\u63a5\u7c7b\u578b\u51b3\u5b9a\u8c03\u7528\u65b9\u5f0f\u3002</li> <li>\u8de8\u7ebf\u7a0b\u4e0e\u4e8b\u4ef6\u5faa\u73af\uff1a\u961f\u5217\uff08Queued\uff09\u8fde\u63a5\u4f1a\u628a\u8c03\u7528\u5c01\u88c5\u6210\u4e8b\u4ef6\u6295\u9012\u5230\u63a5\u6536\u8005\u7ebf\u7a0b\u7684\u4e8b\u4ef6\u961f\u5217\uff0c\u7531\u8be5\u7ebf\u7a0b\u7684\u4e8b\u4ef6\u5faa\u73af\u5f02\u6b65\u5904\u7406\u3002</li> <li>\u53c2\u6570\u7c7b\u578b\u8981\u6c42\uff1a\u5bf9\u4e8e\u961f\u5217\u8fde\u63a5\uff0c\u53c2\u6570\u9700\u8981\u53ef\u62f7\u8d1d\u5e76\u53ef\u901a\u8fc7 <code>QMetaType</code> \u8bc6\u522b\uff08\u81ea\u5b9a\u4e49\u7c7b\u578b\u9700 <code>Q_DECLARE_METATYPE</code> \u5e76\u5728\u8fd0\u884c\u65f6 <code>qRegisterMetaType&lt;T&gt;()</code>\uff09\u3002</li> </ul> <p>\u5e38\u7528\u7684\u201c\u65b0\u8bed\u6cd5\u201d\u66f4\u5b89\u5168\uff08\u7f16\u8bd1\u671f\u68c0\u67e5\uff09\uff1a</p> <pre><code>connect(sender, &amp;Sender::sigName, receiver, &amp;Receiver::slotName);     // \u6210\u5458\u51fd\u6570\nconnect(sender, &amp;Sender::sigName, receiver, [=](Args... a){ ... });   // lambda \u69fd\n</code></pre>","tags":["qt"]},{"location":"qt/signals_and_slots/#2","title":"2) \u5e38\u7528\u8bed\u6cd5\u4e0e\u6280\u5de7","text":"<ul> <li>\u65b0\u8bed\u6cd5\uff08\u51fd\u6570/\u6210\u5458\u6307\u9488\uff09\uff1a\u7f16\u8bd1\u671f\u7c7b\u578b\u68c0\u67e5\u3001\u5b89\u5168\u91cd\u547d\u540d\u3002</li> <li>\u8fde\u63a5\u5230 lambda\uff1a\u4fbf\u4e8e\u5c31\u5730\u5904\u7406\u3001\u6355\u83b7\u4e0a\u4e0b\u6587\u3002</li> <li>\u6307\u5b9a\u4e0a\u4e0b\u6587\u5bf9\u8c61\uff1a<code>connect(sender, signal, context, functor)</code> \u8ba9\u8fde\u63a5\u968f\u4e0a\u4e0b\u6587\u6790\u6784\u81ea\u52a8\u65ad\u5f00\u3002</li> <li>\u65ad\u5f00\u8fde\u63a5\uff1a\u4fdd\u5b58 <code>QMetaObject::Connection</code> \u5e76\u5728\u9700\u8981\u65f6 <code>disconnect(conn)</code>\u3002</li> <li>\u91cd\u8f7d\u4fe1\u53f7/\u69fd\uff1a\u4f7f\u7528 <code>QOverload&lt;Args...&gt;::of(&amp;Class::signal)</code> \u8f85\u52a9\u9009\u62e9\u3002</li> <li>\u8fde\u63a5\u7c7b\u578b\u9009\u62e9\uff1a\u8be6\u89c1\u300aQt \u8fde\u63a5\u7c7b\u578b\u8be6\u89e3\u300b\u3002</li> </ul> <p>\u63d0\u793a\uff1aDirect \u4e0d\u4f1a\u628a\u8c03\u7528\u201c\u642c\u8fd0\u201d\u5230\u63a5\u6536\u8005\u7ebf\u7a0b\uff1b\u5b83\u59cb\u7ec8\u5728\u53d1\u5c04\u7ebf\u7a0b\u6267\u884c\u3002\u5982\u679c\u63a5\u6536\u8005\u5c5e\u4e8e\u5176\u4ed6\u7ebf\u7a0b\uff0c\u8fd9\u6837\u7684 Direct \u5c31\u662f\u8de8\u7ebf\u7a0b Direct\uff0c\u5bb9\u6613\u5bfc\u81f4\u7ebf\u7a0b\u4eb2\u548c\u6027\u8fdd\u89c4\uff08\u4f8b\u5982 UI \u5bf9\u8c61\u88ab\u975e GUI \u7ebf\u7a0b\u8bbf\u95ee\uff09\u3002</p>","tags":["qt"]},{"location":"qt/signals_and_slots/#3","title":"3) \u9009\u578b\u5efa\u8bae","text":"<ul> <li>\u540c\u7ebf\u7a0b\u3001\u5feb\u901f\u69fd\uff1a<code>Auto</code>\uff08= Direct\uff09\u3002</li> <li>\u8de8\u7ebf\u7a0b\u3001UI \u66f4\u65b0\uff1a<code>Queued</code>\uff08\u628a\u66f4\u65b0\u5207\u56de\u4e3b\u7ebf\u7a0b\uff09\u3002</li> <li>\u8de8\u7ebf\u7a0b\u4e14\u9700\u7b49\u5f85\u8fd4\u56de\uff1a<code>BlockingQueued</code>\uff0c\u8c28\u614e\u4f7f\u7528\u5e76\u6ce8\u610f\u6b7b\u9501\u3002</li> <li>\u9632\u91cd\u590d\u8fde\u63a5\uff1a\u5728 <code>connect</code> \u65f6\u52a0 <code>Qt::UniqueConnection</code>\u3002</li> <li>\u81ea\u5b9a\u4e49\u53c2\u6570\u7528\u4e8e\u961f\u5217\u8fde\u63a5\uff1a<code>Q_DECLARE_METATYPE(T)</code> + <code>qRegisterMetaType&lt;T&gt;(\"T\")</code>\u3002</li> </ul>","tags":["qt"]},{"location":"qt/signals_and_slots/#4","title":"4) \u793a\u4f8b","text":"<p>\u8de8\u7ebf\u7a0b\u8c03\u7528\uff0c\u5207\u6362\u5230\u5de5\u4f5c\u7ebf\u7a0b\u6267\u884c\uff08\u8fde\u63a5\u7c7b\u578b\u8be6\u89c1\u8fde\u63a5\u7c7b\u578b\u6587\u6863\uff09\uff1a</p> <pre><code>class Worker : public QObject {\n    Q_OBJECT\npublic slots:\n    void doWork(int v) { /* ...\u8017\u65f6\u4efb\u52a1... */ }\n};\n\nQThread th;\nWorker w;\nw.moveToThread(&amp;th);\nth.start();\n\n// \u9ed8\u8ba4 Auto\uff1a\u4e0d\u540c\u7ebf\u7a0b -&gt; \u7b49\u540c Queued\uff0c\u5728\u5de5\u4f5c\u7ebf\u7a0b\u4e2d\u6267\u884c doWork\nQObject::connect(&amp;sender, &amp;Sender::sigValue, &amp;w, &amp;Worker::doWork);\n\nsender.emitSigValue(42); // \u5f02\u6b65\u6295\u9012\u5230\u5de5\u4f5c\u7ebf\u7a0b\n</code></pre> <p>\u963b\u585e\u7b49\u5f85\u5de5\u4f5c\u7ebf\u7a0b\u5b8c\u6210\uff08\u8c28\u614e\u4f7f\u7528\uff09\uff1a</p> <pre><code>QObject::connect(\n    &amp;sender, &amp;Sender::sigValue,\n    &amp;w,      &amp;Worker::doWork,\n    Qt::BlockingQueuedConnection\n);\n// \u53d1\u5c04\u7ebf\u7a0b\u5728\u6b64\u8fde\u63a5\u4e0b\u4f1a\u7b49\u5f85 doWork \u8fd4\u56de\n</code></pre> <p>\u9632\u6b62\u91cd\u590d\u8fde\u63a5\uff1a</p> <pre><code>QObject::connect(\n    &amp;a, &amp;A::sig,\n    &amp;b, &amp;B::slot,\n    Qt::AutoConnection | Qt::UniqueConnection\n);\n</code></pre> <p>\u81ea\u5b9a\u4e49\u7c7b\u578b\u7528\u4e8e\u961f\u5217\u8fde\u63a5\uff1a</p> <pre><code>struct Foo { int x; };\nQ_DECLARE_METATYPE(Foo)\n\nint main(int argc, char** argv) {\n    qRegisterMetaType&lt;Foo&gt;(\"Foo\");\n    // \u4e4b\u540e\u5373\u53ef\u5728 Queued \u8fde\u63a5\u4e2d\u4f20\u9012 Foo\n}\n</code></pre>","tags":["qt"]},{"location":"qt/signals_and_slots/#3_1","title":"3) \u5173\u8054\u4e3b\u9898","text":"<ul> <li>\u8fde\u63a5\u7c7b\u578b\u8be6\u89e3\uff1a\u53c2\u89c1\u300aQt \u8fde\u63a5\u7c7b\u578b\u8be6\u89e3\u300b</li> <li>\u5e38\u89c1\u5751\u4e0e\u6700\u4f73\u5b9e\u8df5\uff1a\u53c2\u89c1\u300aQt \u4fe1\u53f7\u69fd\u5e38\u89c1\u5751\u4e0e\u6700\u4f73\u5b9e\u8df5\u300b</li> </ul>","tags":["qt"]},{"location":"qt/when_use_qthread_vs_threadpool/","title":"QThread \u548c\u7ebf\u7a0b\u6c60\u5982\u4f55\u9009\u62e9\uff1f","text":"","tags":["qt"]},{"location":"qt/when_use_qthread_vs_threadpool/#_1","title":"\u95ee\u9898","text":"<p>\u4ec0\u4e48\u65f6\u5019\u7528 <code>QThread</code>\uff08\u957f\u671f\u9a7b\u7559 Worker\uff09\uff0c\u4ec0\u4e48\u65f6\u5019\u7528 <code>QThreadPool</code>/<code>QtConcurrent</code>\uff08\u7ebf\u7a0b\u6c60\uff09\uff1f</p>","tags":["qt"]},{"location":"qt/when_use_qthread_vs_threadpool/#_2","title":"\u56de\u7b54","text":"","tags":["qt"]},{"location":"qt/when_use_qthread_vs_threadpool/#_3","title":"\u9009\u62e9\u5efa\u8bae","text":"<ul> <li>\u4e00\u6b21\u6027\u3001\u77ed\u4efb\u52a1\u3001\u591a\u6279\u5e76\u53d1\uff1a\u4f18\u5148 <code>QThreadPool</code> \u6216 <code>QtConcurrent::run()</code>\u3002</li> <li>\u7ebf\u7a0b\u8d44\u6e90\u590d\u7528\u3001\u521b\u5efa\u9500\u6bc1\u6210\u672c\u4f4e\uff0cAPI \u7b80\u6d01\uff1b\u914d\u5408 <code>QFutureWatcher</code> \u5728 UI \u7ebf\u7a0b\u5904\u7406\u5b8c\u6210/\u8fdb\u5ea6\u3002</li> <li>\u957f\u671f\u9a7b\u7559\u3001\u9700\u8981\u4e8b\u4ef6\u5faa\u73af/\u72b6\u6001\u673a/\u4fe1\u53f7\u4ea4\u4e92\u7684\u540e\u53f0\u5bf9\u8c61\uff1a<code>QThread + Worker::moveToThread()</code>\u3002</li> <li>\u4f8b\u5982\uff1a\u6301\u7eed\u76d1\u542c\u3001\u957f\u8fde\u63a5\u3001\u8bbe\u5907\u8bfb\u5199\u3001\u9700\u8981\u63a5\u6536\u5b9a\u65f6\u5668/\u4e8b\u4ef6\u7b49\u3002</li> <li>CPU \u5bc6\u96c6\u6279\u5904\u7406\uff1a\u4f18\u5148\u7ebf\u7a0b\u6c60\u5e76\u63a7\u5236\u5e76\u53d1\u5ea6\uff08\u6c60\u5927\u5c0f\u2248\u6838\u5fc3\u6570\uff09\u3002</li> <li>I/O \u963b\u585e\u578b\u957f\u671f\u4efb\u52a1\uff1a<code>QThread + Worker</code> \u66f4\u9002\u914d\uff0c\u53ef\u7ec6\u7c92\u5ea6\u63a7\u5236\u751f\u547d\u5468\u671f\u4e0e\u53d6\u6d88\u3002</li> </ul>","tags":["qt"]},{"location":"qt/when_use_qthread_vs_threadpool/#_4","title":"\u5bf9\u6bd4\u8981\u70b9","text":"<ul> <li>\u7ebf\u7a0b\u7ba1\u7406\uff1a\u7ebf\u7a0b\u6c60\u81ea\u52a8\u8c03\u5ea6\uff1bQThread \u9700\u624b\u52a8 <code>start/quit/wait</code> \u4e0e\u5bf9\u8c61\u6e05\u7406\u3002</li> <li>\u901a\u4fe1\u6a21\u5f0f\uff1a\u7ebf\u7a0b\u6c60\u66f4\u504f\u51fd\u6570\u5f0f\uff08future\uff09\uff0cQThread \u66f4\u504f\u5bf9\u8c61/\u4e8b\u4ef6\u5f0f\uff08signal/slot\uff09\u3002</li> <li>\u4e8b\u4ef6\u5faa\u73af\uff1a\u7ebf\u7a0b\u6c60\u4efb\u52a1\u9ed8\u8ba4\u65e0\u4e8b\u4ef6\u5faa\u73af\uff1bQThread \u7ebf\u7a0b\u6709\u4e8b\u4ef6\u5faa\u73af\uff08\u672a\u8986\u76d6 run\uff09\u3002</li> </ul>","tags":["qt"]},{"location":"qt/when_use_qthread_vs_threadpool/#_5","title":"\u793a\u4f8b","text":"<ul> <li>\u7ebf\u7a0b\u6c60\uff1a</li> </ul> <pre><code>auto fut = QtConcurrent::run([]{ /* work */ return 42; });\nauto* w = new QFutureWatcher&lt;int&gt;(parent);\nQObject::connect(w, &amp;QFutureWatcher&lt;int&gt;::finished, ui, [=]{ ui-&gt;show(fut.result()); w-&gt;deleteLater(); });\nw-&gt;setFuture(fut);\n</code></pre> <ul> <li>QThread + Worker\uff1a</li> </ul> <pre><code>QThread th; auto* worker = new Worker; worker-&gt;moveToThread(&amp;th);\nQObject::connect(&amp;th, &amp;QThread::started, worker, &amp;Worker::start);\nth.start();\n</code></pre>","tags":["qt"]},{"location":"qt/when_use_qthread_vs_threadpool/#_6","title":"\u5173\u8054","text":"<ul> <li>\u300aQThread \u6b63\u786e\u4f7f\u7528\u59ff\u52bf\u4e0e\u5e38\u89c1\u8bef\u533a\u300b</li> <li>\u300a\u8de8\u7ebf\u7a0b\u66f4\u65b0 UI \u7684\u5b89\u5168\u65b9\u5f0f\uff1f\u300b</li> <li>\u300aQt \u8fde\u63a5\u7c7b\u578b\u8be6\u89e3\u300b</li> </ul>","tags":["qt"]},{"location":"qt/why_not_put_business_in_qthread/","title":"\u4e3a\u4ec0\u4e48\u4e0d\u63a8\u8350\u628a\u4e1a\u52a1\u5bf9\u8c61/\u69fd\u653e\u5728 QThread \u5b50\u7c7b\u91cc\uff1f","text":"","tags":["qt"]},{"location":"qt/why_not_put_business_in_qthread/#_1","title":"\u95ee\u9898","text":"<p>\u5f88\u591a\u6559\u7a0b\u793a\u4f8b\u91cc\u5728\u7ee7\u627f <code>QThread</code> \u7684\u7c7b\u91cc\u5199\u69fd\u548c\u4e1a\u52a1\u903b\u8f91\uff0c\u8fd9\u6837\u53ef\u4ee5\u5417\uff1f</p>","tags":["qt"]},{"location":"qt/why_not_put_business_in_qthread/#_2","title":"\u56de\u7b54","text":"","tags":["qt"]},{"location":"qt/why_not_put_business_in_qthread/#_3","title":"\u4e0d\u63a8\u8350\u7684\u539f\u56e0","text":"<ul> <li>\u7ebf\u7a0b\u4eb2\u548c\u6027\u6df7\u6dc6\uff1a<code>QThread</code> \u662f\u201c\u7ebf\u7a0b\u53e5\u67c4\u201d\uff0c\u5176\u81ea\u8eab\u7684 <code>QObject</code> \u90e8\u5206\u5c5e\u4e8e\u521b\u5efa\u5b83\u7684\u7ebf\u7a0b\uff08\u901a\u5e38\u662f GUI \u7ebf\u7a0b\uff09\uff0c\u4e0d\u662f\u5b50\u7ebf\u7a0b\u3002</li> <li>\u4e1a\u52a1\u653e\u5728 <code>QThread</code> \u5b50\u7c7b\u91cc\uff0c\u5bb9\u6613\u8bef\u4ee5\u4e3a\u69fd\u4f1a\u81ea\u52a8\u5728\u5b50\u7ebf\u7a0b\u6267\u884c\uff0c\u5bfc\u81f4\u8de8\u7ebf\u7a0b\u8bbf\u95ee\u3001\u8d8a\u7ebf\u7a0b\u66f4\u65b0 UI \u7b49\u95ee\u9898\u3002</li> <li>\u8986\u76d6 <code>run()</code> \u540e\u5e38\u89c1\u957f\u963b\u585e\uff0c\u961f\u5217\u4e8b\u4ef6/\u5b9a\u65f6\u5668\u65e0\u6cd5\u5904\u7406\uff0c\u548c Qt \u4e8b\u4ef6\u9a71\u52a8\u6a21\u578b\u51b2\u7a81\u3002</li> </ul>","tags":["qt"]},{"location":"qt/why_not_put_business_in_qthread/#_4","title":"\u63a8\u8350\u505a\u6cd5","text":"<ul> <li>\u4f7f\u7528 Worker + <code>moveToThread()</code>\uff1a</li> <li>\u4e1a\u52a1\u5bf9\u8c61\u662f <code>QObject</code>\uff0c\u79fb\u52a8\u5230\u76ee\u6807\u7ebf\u7a0b\uff1b\u901a\u8fc7\u4fe1\u53f7\u69fd\u901a\u4fe1\uff0c\u961f\u5217\u8fde\u63a5\u4fdd\u8bc1\u5728\u6240\u5c5e\u7ebf\u7a0b\u8fd0\u884c\u3002</li> <li><code>QThread</code> \u53ea\u8d1f\u8d23\u7ebf\u7a0b\u751f\u547d\u5468\u671f\uff08\u542f\u52a8/\u9000\u51fa/\u7b49\u5f85\uff09\u3002</li> </ul>","tags":["qt"]},{"location":"qt/why_not_put_business_in_qthread/#_5","title":"\u793a\u4f8b\u5bf9\u6bd4","text":"<ul> <li>\u53cd\u4f8b\uff08\u628a\u4e1a\u52a1\u653e\u8fdb QThread\uff09\uff1a</li> </ul> <pre><code>class MyThread : public QThread {\npublic slots:\n    void doWork(); // \u69fd\u9ed8\u8ba4\u5c5e\u4e8e\u521b\u5efa\u7ebf\u7a0b\uff0c\u4e0d\u4f1a\u81ea\u52a8\u5728\u5b50\u7ebf\u7a0b\u6267\u884c\n};\n</code></pre> <ul> <li>\u6b63\u4f8b\uff1a</li> </ul> <pre><code>class Worker : public QObject { Q_OBJECT public slots: void doWork(); };\nQThread th; auto* w = new Worker; w-&gt;moveToThread(&amp;th);\nQObject::connect(&amp;th, &amp;QThread::started, w, &amp;Worker::doWork);\nth.start();\n</code></pre>","tags":["qt"]},{"location":"qt/why_not_put_business_in_qthread/#qthread","title":"\u4f55\u65f6\u9700\u8981\u7ee7\u627f QThread","text":"<ul> <li>\u9700\u8981\u81ea\u5b9a\u4e49 <code>run()</code>/\u81ea\u5b9a\u4e49\u4e8b\u4ef6\u5faa\u73af\u7684\u6781\u5c11\u6570\u573a\u666f\uff0c\u4f8b\u5982\u5185\u90e8\u7ba1\u7406\u4e13\u7528 loop \u6216\u96c6\u6210\u975e Qt \u4e8b\u4ef6\u6e90\u3002</li> <li>\u5373\u4f7f\u7ee7\u627f\uff0c\u4e5f\u5e94\u5c06\u4e1a\u52a1\u5bf9\u8c61\u4ecd\u653e\u5728\u72ec\u7acb <code>QObject</code> \u4e2d\uff0c\u907f\u514d\u5728 <code>QThread</code> \u5b50\u7c7b\u6df7\u5165\u4e1a\u52a1\u3002</li> </ul>","tags":["qt"]},{"location":"qt/why_not_put_business_in_qthread/#_6","title":"\u5173\u8054","text":"<ul> <li>\u300aQThread \u6b63\u786e\u4f7f\u7528\u59ff\u52bf\u4e0e\u5e38\u89c1\u8bef\u533a\u300b</li> <li>\u300aQt \u4fe1\u53f7\u69fd\u5e38\u89c1\u5751\u4e0e\u6700\u4f73\u5b9e\u8df5\u300b</li> </ul>","tags":["qt"]},{"location":"stl/make_shared_vs_shared_ptr/","title":"make_shared \u548c shared_ptr \u7684\u533a\u522b\uff1f","text":"","tags":["stl"]},{"location":"stl/make_shared_vs_shared_ptr/#_1","title":"\u95ee\u9898","text":"<p><code>std::make_shared</code> \u4e0e <code>std::shared_ptr&lt;T&gt;(new T)</code> \u6709\u4ec0\u4e48\u533a\u522b\uff1f</p>","tags":["stl"]},{"location":"stl/make_shared_vs_shared_ptr/#_2","title":"\u56de\u7b54","text":"","tags":["stl"]},{"location":"stl/make_shared_vs_shared_ptr/#1","title":"1. \u5185\u5b58\u5e03\u5c40","text":"<p><code>std::make_shared&lt;T&gt;(args...)</code> \u4e00\u6b21\u5206\u914d\uff1a\u5c06\u63a7\u5236\u5757\u548c\u5bf9\u8c61\u672c\u4f53\u653e\u5728\u540c\u4e00\u5757\u5806\u5185\u5b58\u4e2d\u3002</p> <pre><code>[ \u63a7\u5236\u5757 + T \u5bf9\u8c61 ]\n\u251c\u2500 ref counts, deleter, allocator\n\u2514\u2500 T \u5bf9\u8c61\u672c\u4f53\n</code></pre> <p><code>std::shared_ptr&lt;T&gt;(new T(args...))</code> \u4e24\u6b21\u5206\u914d\uff1a\u5bf9\u8c61\u548c\u63a7\u5236\u5757\u5206\u522b\u5206\u914d\u3002</p> <pre><code>[ T \u5bf9\u8c61 ]            [ \u63a7\u5236\u5757 ]\n\u2514\u2500 \u58061                 \u2514\u2500 \u58062\n</code></pre>","tags":["stl"]},{"location":"stl/make_shared_vs_shared_ptr/#2","title":"2. \u884c\u4e3a\u5dee\u5f02","text":"<ul> <li>\u6027\u80fd\u4e0e\u7f13\u5b58\uff1a<code>make_shared</code> \u5c11\u4e00\u6b21\u5806\u5206\u914d\uff0c\u63a7\u5236\u5757\u4e0e\u5bf9\u8c61\u76f8\u90bb\uff0c\u901f\u5ea6\u548c\u7f13\u5b58\u5c40\u90e8\u6027\u66f4\u597d\uff1b<code>new + shared_ptr</code> \u9700\u4e24\u6b21\u5206\u914d\u3002</li> <li>\u5f02\u5e38\u5b89\u5168\uff1a<code>make_shared</code> \u5929\u7136\u5f3a\u5f02\u5e38\u5b89\u5168\uff1b\u4f7f\u7528 <code>new</code> \u65f6\u82e5\u5206\u4e24\u884c\u5199\uff0c\u53ef\u80fd\u5728 <code>new</code> \u6210\u529f\u540e\u6784\u9020 <code>shared_ptr</code> \u524d\u629b\u5f02\u5e38\u5bfc\u81f4\u6cc4\u6f0f\u3002</li> <li>\u5927\u5bf9\u8c61\u5ef6\u8fdf\u91ca\u653e\uff1a<code>make_shared</code> \u4e2d\u5bf9\u8c61\u548c\u63a7\u5236\u5757\u540c\u5904\u4e00\u5757\u5185\u5b58\uff0c\u82e5\u5b58\u5728\u957f\u5bff\u547d <code>weak_ptr</code>\uff0c\u5bf9\u8c61\u6790\u6784\u540e\u8fd9\u5757\u5927\u5185\u5b58\u4ecd\u9700\u7b49\u5f85 <code>weak_ptr</code> \u5168\u90e8\u5931\u6548\u624d\u91ca\u653e\uff1b\u5206\u79bb\u5206\u914d\u53ef\u5728\u5f3a\u8ba1\u6570\u5f52\u96f6\u65f6\u7acb\u523b\u91ca\u653e\u5bf9\u8c61\u5185\u5b58\u3002</li> <li>\u81ea\u5b9a\u4e49\u5220\u9664\u5668/\u5206\u914d\u5668\uff1a<code>make_shared</code> \u4e0d\u80fd\u81ea\u5b9a\u4e49\u5220\u9664\u5668\uff0c\u53ef\u7528 <code>allocate_shared</code> \u6307\u5b9a\u5206\u914d\u5668\uff1b<code>new + shared_ptr</code> \u53ef\u4f20\u5165\u81ea\u5b9a\u4e49\u5220\u9664\u5668\uff0c\u9002\u5408\u7ba1\u7406\u975e <code>new</code> \u8d44\u6e90\u3002</li> </ul>","tags":["stl"]},{"location":"stl/make_shared_vs_shared_ptr/#3","title":"3. \u9009\u62e9\u6307\u5357","text":"\u573a\u666f \u63a8\u8350\u65b9\u5f0f \u666e\u901a\u5bf9\u8c61\uff0c\u8ffd\u6c42\u6027\u80fd\u4e0e\u7b80\u6d01 <code>std::make_shared</code> \u9700\u8981\u81ea\u5b9a\u4e49\u5220\u9664\u5668\uff0c\u6216\u5bf9\u8c61\u5f88\u5927\u4e14\u5b58\u5728\u957f\u671f <code>weak_ptr</code> <code>std::shared_ptr&lt;T&gt;(new T(...))</code> \u9700\u8981\u81ea\u5b9a\u4e49\u5206\u914d\u5668 <code>std::allocate_shared</code>","tags":["stl"]},{"location":"stl/make_shared_vs_shared_ptr/#4","title":"4. \u5c0f\u5b9e\u9a8c\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\n\nstruct Foo {\n    Foo()  { std::puts(\"Foo constructed\"); }\n    ~Foo() { std::puts(\"Foo destructed\"); }\n};\n\nint main() {\n    std::weak_ptr&lt;Foo&gt; w;\n\n    {\n        auto sp = std::make_shared&lt;Foo&gt;();\n        w = sp;\n        std::cout &lt;&lt; \"use_count: \" &lt;&lt; sp.use_count() &lt;&lt; '\\n';\n    } // sp \u6790\u6784\n\n    std::cout &lt;&lt; \"expired? \" &lt;&lt; w.expired() &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre> <p>\u8fd9\u4e2a\u7a0b\u5e8f\u53ef\u7528\u4e8e\u89c2\u5bdf\u63a7\u5236\u5757\u548c\u5bf9\u8c61\u7684\u91ca\u653e\u987a\u5e8f\u3002</p>","tags":["stl"]},{"location":"stl/make_shared_vs_shared_ptr/#5","title":"5. \u9762\u8bd5\u603b\u7ed3","text":"<p><code>make_shared</code> \u5c06\u63a7\u5236\u5757\u4e0e\u5bf9\u8c61\u5408\u5e76\u5206\u914d\uff0c\u6027\u80fd\u597d\u4e14\u5f02\u5e38\u5b89\u5168\uff1b<code>new + shared_ptr</code> \u652f\u6301\u81ea\u5b9a\u4e49\u5220\u9664\u5668\uff0c\u5e76\u80fd\u5728\u5927\u5bf9\u8c61\u573a\u666f\u4e0b\u66f4\u65e9\u91ca\u653e\u5bf9\u8c61\u5185\u5b58\u3002\u5e38\u89c4\u573a\u666f\u9996\u9009 <code>make_shared</code>\uff0c\u6709\u7279\u6b8a\u8d44\u6e90\u7ba1\u7406\u6216\u5185\u5b58\u5360\u7528\u65f6\u673a\u9700\u6c42\u65f6\u518d\u9009 <code>new + shared_ptr</code>\uff08\u6216 <code>allocate_shared</code>\uff09\u3002</p>","tags":["stl"]},{"location":"stl/map_vs_unordered_map/","title":"std::map vs std::unordered_map\uff1a\u4ec0\u4e48\u65f6\u5019\u7528\uff1f","text":"","tags":["stl"]},{"location":"stl/map_vs_unordered_map/#_1","title":"\u7ed3\u8bba\u5148\u884c\uff08\u600e\u4e48\u9009\uff09","text":"<ul> <li>\u53ea\u505a\u9ad8\u9891\u70b9\u67e5/\u63d2\u5165\uff0c\u987a\u5e8f\u65e0\u8981\u6c42\uff1a\u7528 <code>std::unordered_map</code></li> <li>\u9700\u8981\u6309\u952e\u6709\u5e8f\u3001\u8303\u56f4\u67e5\u8be2\u3001\u524d\u9a71/\u540e\u7ee7\u3001\u6700\u5c0f/\u6700\u5927\uff1a\u7528 <code>std::map</code></li> <li>\u9700\u8981\u7a33\u5b9a\u6700\u574f\u590d\u6742\u5ea6\u6216\u66f4\u7a33\u8fed\u4ee3\u5668\uff08\u63d2\u5165\u4e0d\u8ba9\u5176\u5b83\u8fed\u4ee3\u5668\u5931\u6548\uff09\uff1a\u7528 <code>std::map</code></li> <li>\u5927\u6279\u91cf\u5bfc\u5165\u4e14\u53ea\u70b9\u67e5\uff1a<code>std::unordered_map</code> \u5e76\u63d0\u524d <code>reserve</code></li> </ul>","tags":["stl"]},{"location":"stl/map_vs_unordered_map/#_2","title":"\u4f7f\u7528\u573a\u666f","text":"","tags":["stl"]},{"location":"stl/map_vs_unordered_map/#stdunordered_map","title":"\u4ec0\u4e48\u65f6\u5019\u7528 std::unordered_map\uff08\u54c8\u5e0c\u8868\uff09","text":"<ul> <li>\u9ad8\u9891\u201c\u6309\u952e\u76f4\u67e5\u201d\u6216\u8ba1\u6570\u5668\u3001\u7f13\u5b58\uff08ID\u2192\u5bf9\u8c61\u3001\u5b57\u7b26\u4e32\u2192\u5bf9\u8c61\uff09</li> <li>\u6570\u636e\u91cf\u5927\u3001\u8ffd\u6c42\u541e\u5410\u4e0e\u4f4e\u5ef6\u8fdf\uff0c\u952e\u5206\u5e03\u5747\u5300</li> <li>\u53ea\u9700\u8981\u5b58\u5728\u6027\u5224\u65ad/\u63d2\u5165/\u5220\u9664\uff0c\u4e0d\u9700\u8981\u6709\u5e8f\u8bed\u4e49</li> </ul> <p>\u7279\u6027\u4e0e\u8981\u70b9\uff1a - \u5747\u644a O(1) \u67e5/\u63d2/\u5220\uff1b\u65e0\u5e8f - \u53d1\u751f rehash \u65f6\uff0c\u6240\u6709\u8fed\u4ee3\u5668\u5931\u6548\uff08\u5f15\u7528/\u6307\u9488\u4ecd\u6709\u6548\uff09 - \u5927\u6279\u91cf\u63d2\u5165\u524d <code>reserve(N)</code>\uff0c\u5fc5\u8981\u65f6\u8c03 <code>max_load_factor</code></p> <p>\u793a\u4f8b\uff1a</p> <pre><code>#include &lt;unordered_map&gt;\n\nstd::unordered_map&lt;int, Info&gt; u;\nu.reserve(1'000'000);             // \u6279\u91cf\u63d2\u5165\u524d\u9884\u7559\nu.max_load_factor(0.8f);          // \u89c6\u5185\u5b58/\u6027\u80fd\u6743\u8861\n\nif (auto it = u.find(42); it != u.end()) {\n    // \u70b9\u67e5\u547d\u4e2d\n}\n</code></pre>","tags":["stl"]},{"location":"stl/map_vs_unordered_map/#stdmap","title":"\u4ec0\u4e48\u65f6\u5019\u7528 std::map\uff08\u7ea2\u9ed1\u6811\uff0c\u6709\u5e8f\uff09","text":"<ul> <li>\u9700\u8981\u6309\u952e\u6709\u5e8f\u904d\u5386\u3001\u533a\u95f4\u67e5\u8be2\uff08[l, r)\uff09\u3001\u627e\u524d\u9a71/\u540e\u7ee7</li> <li>\u9700\u8981\u968f\u65f6\u53d6\u6700\u5c0f/\u6700\u5927\u952e\u3001\u6709\u5e8f\u5bfc\u51fa\u62a5\u8868</li> <li>\u9700\u8981\u7a33\u5b9a\u4e0a\u754c\uff08\u59cb\u7ec8 O(log N)\uff09\u4e0e\u66f4\u7a33\u7684\u8fed\u4ee3\u5668\uff08\u63d2\u5165\u4e0d\u4f7f\u5176\u4ed6\u8fed\u4ee3\u5668\u5931\u6548\uff09</li> </ul> <p>\u7279\u6027\u4e0e\u8981\u70b9\uff1a - \u67e5/\u63d2/\u5220 O(log N)\uff0c\u6709\u5e8f\uff1b<code>lower_bound/upper_bound</code> \u53cb\u597d - \u63d2\u5165\u4e0d\u5931\u6548\u5176\u4ed6\u8fed\u4ee3\u5668\uff1b\u64e6\u9664\u4ec5\u4f7f\u88ab\u5220\u5143\u7d20\u5931\u6548</p> <p>\u793a\u4f8b\uff08\u533a\u95f4\u5bfc\u51fa\uff09\uff1a</p> <pre><code>#include &lt;map&gt;\n\nstd::map&lt;int, Info&gt; m;\n// ... \u63d2\u5165\u82e5\u5e72\nfor (auto it = m.lower_bound(l); it != m.end() &amp;&amp; it-&gt;first &lt; r; ++it) {\n    // \u5904\u7406 [l, r) \u533a\u95f4\n}\n</code></pre>","tags":["stl"]},{"location":"stl/map_vs_unordered_map/#_3","title":"\u7b80\u660e\u5bf9\u6bd4","text":"<ul> <li>\u6709\u5e8f\u80fd\u529b\uff1a<code>map</code> \u6709\uff1b<code>unordered_map</code> \u65e0</li> <li>\u590d\u6742\u5ea6\uff1a<code>map</code> O(log N) \u7a33\u5b9a\uff1b<code>unordered_map</code> \u5747\u644a O(1)\uff0c\u6700\u574f\u53ef\u9000\u5316</li> <li>\u8fed\u4ee3\u5668\uff1a<code>map</code> \u63d2\u5165\u4e0d\u5931\u6548\uff1b<code>unordered_map</code> rehash \u5168\u5931\u6548</li> <li>\u5185\u5b58\uff1a<code>map</code> \u8282\u70b9\u5f00\u9500\u5927\uff08\u591a\u6307\u9488\uff09\uff1b<code>unordered_map</code> \u6876+\u8282\u70b9\uff0c\u8d1f\u8f7d\u56e0\u5b50\u53ef\u8c03</li> </ul>","tags":["stl"]},{"location":"stl/map_vs_unordered_map/#_4","title":"\u81ea\u5b9a\u4e49\u201c\u7d22\u5f15\u201d\uff08\u6392\u5e8f/\u54c8\u5e0c\uff09","text":"<p>\u4e24\u8005\u90fd\u53ef\u5b9a\u5236\uff1a</p> <ul> <li><code>std::map</code> \u81ea\u5b9a\u4e49\u6bd4\u8f83\u5668\uff08\u5b9a\u5236\u6392\u5e8f\u89c4\u5219\uff0c\u7b49\u4ef7\u4e8e\u201c\u81ea\u5b9a\u4e49\u6709\u5e8f\u7d22\u5f15\u201d\uff09</li> </ul> <pre><code>struct ByLenThenLex {\n    using is_transparent = void; // \u652f\u6301 string_view \u5f02\u6784\u67e5\u627e\n    bool operator()(std::string_view a, std::string_view b) const noexcept {\n        return a.size() == b.size() ? a &lt; b : a.size() &lt; b.size();\n    }\n};\nstd::map&lt;std::string, int, ByLenThenLex&gt; m;\n// m.find(std::string_view{\"abc\"}); // \u96f6\u62f7\u8d1d\u67e5\u627e\n</code></pre> <ul> <li><code>std::unordered_map</code> \u81ea\u5b9a\u4e49\u54c8\u5e0c\u4e0e\u76f8\u7b49\uff08\u5b9a\u5236\u201c\u65e0\u5e8f\u7d22\u5f15\u201d\uff09</li> </ul> <pre><code>struct Key { int id; std::string tag; };\nstruct KeyHash {\n    size_t operator()(Key const&amp; k) const noexcept {\n        size_t h1 = std::hash&lt;int&gt;{}(k.id);\n        size_t h2 = std::hash&lt;std::string&gt;{}(k.tag);\n        return h1 ^ (h2 + 0x9e3779b97f4a7c15ULL + (h1&lt;&lt;6) + (h1&gt;&gt;2));\n    }\n};\nstruct KeyEq {\n    bool operator()(Key const&amp; a, Key const&amp; b) const noexcept {\n        return a.id == b.id &amp;&amp; a.tag == b.tag;\n    }\n};\nstd::unordered_map&lt;Key, int, KeyHash, KeyEq&gt; u;\n</code></pre> <p>\u591a\u7d22\u5f15\u9700\u6c42\uff08\u540c\u4e00\u4efd\u6570\u636e\u6309\u4e0d\u540c\u5b57\u6bb5\u67e5\uff09\uff1a\u6807\u51c6\u5bb9\u5668\u4e0d\u652f\u6301\u5185\u5efa\u591a\u7d22\u5f15\uff0c\u5e38\u89c1\u505a\u6cd5\u662f\u7ef4\u62a4\u591a\u4efd\u5bb9\u5668\uff08\u6bd4\u5982\u6309 id \u7684 <code>unordered_map</code> + \u6309\u65f6\u95f4\u7684 <code>map</code>\uff09\u5e76\u5728\u5199\u5165\u65f6\u53cc\u5199\uff1b\u6216\u4f7f\u7528 Boost.MultiIndex\u3002</p>","tags":["stl"]},{"location":"stl/map_vs_unordered_map/#_5","title":"\u5e38\u89c1\u5751\u70b9\u4e0e\u5c0f\u6280\u5de7","text":"<ul> <li><code>unordered_map</code> \u6279\u91cf\u5bfc\u5165\u8981\u4e00\u6b21\u6027 <code>reserve(N)</code>\uff0c\u907f\u514d\u591a\u6b21 rehash \u6296\u52a8</li> <li><code>unordered_map</code> rehash \u4f1a\u4f7f\u6240\u6709\u8fed\u4ee3\u5668\u5931\u6548\uff1b<code>map</code> \u65e0 rehash \u6982\u5ff5</li> <li>\u5b57\u7b26\u4e32\u952e\u60f3\u96f6\u62f7\u8d1d\u67e5\u627e\uff1a</li> <li><code>std::map&lt;std::string, T, std::less&lt;&gt;&gt;</code> \u2192 \u53ef\u7528 <code>string_view</code>/<code>char*</code> \u67e5\u627e</li> <li><code>std::unordered_map&lt;std::string, T, /*\u900f\u660e hasher*/, /*\u900f\u660e equal*/&gt;</code>\uff08C++20\uff09</li> <li>\u53ea\u9700\u201c\u63d2\u5165\u987a\u5e8f\u904d\u5386\u201d\uff1f\u4e24\u8005\u90fd\u4e0d\u4fdd\u8bc1\uff1b\u53ef\u989d\u5916\u7ef4\u62a4 <code>std::list</code> \u8bb0\u5f55\u987a\u5e8f\u6216\u7528\u7b2c\u4e09\u65b9\u201clinked hash map\u201d</li> </ul>","tags":["stl"]},{"location":"stl/map_vs_unordered_map/#_6","title":"\u5feb\u901f\u51b3\u7b56\u6e05\u5355","text":"<ul> <li>\u8981\u201c\u6709\u5e8f/\u8303\u56f4/\u524d\u9a71\u540e\u7ee7\u201d\uff1f\u2192 <code>std::map</code></li> <li>\u53ea\u8981\u5feb\u70b9\u67e5\uff0c\u6570\u636e\u91cf\u5927\uff1f\u2192 <code>std::unordered_map</code>\uff08\u8bb0\u5f97 <code>reserve</code>\uff09</li> <li>\u9700\u8981\u7a33\u5b9a\u4e0a\u754c\u6216\u66f4\u7a33\u8fed\u4ee3\u5668\uff1f\u2192 <code>std::map</code></li> <li>\u65e2\u8981\u5feb\u70b9\u67e5\u53c8\u8981\u6709\u5e8f\u5bfc\u51fa\uff1f\u2192 \u70b9\u67e5\u7528 <code>unordered_map</code>\uff0c\u5bfc\u51fa\u7ef4\u62a4\u4e00\u4efd <code>map</code>\uff08\u53cc\u7d22\u5f15\uff09</li> </ul>","tags":["stl"]},{"location":"stl/push_back_vs_emplace_back/","title":"vector\u4e2d push_back \u548c emplace_back \u7684\u533a\u522b\uff1f","text":"","tags":["stl"]},{"location":"stl/push_back_vs_emplace_back/#_1","title":"\u95ee\u9898","text":"<p>vector\u4e2d <code>push_back</code> \u548c <code>emplace_back</code> \u6709\u4ec0\u4e48\u533a\u522b\uff1f</p>","tags":["stl"]},{"location":"stl/push_back_vs_emplace_back/#_2","title":"\u56de\u7b54","text":"<p><code>push_back</code> \u63a5\u53d7\u4e00\u4e2a\u5df2\u6784\u9020\u597d\u7684\u5bf9\u8c61\u5e76\u628a\u5b83\u62f7\u8d1d\u6216\u79fb\u52a8\u5230\u5bb9\u5668\u5c3e\u90e8\uff1b <code>emplace_back</code> \u5219\u76f4\u63a5\u5728\u5bb9\u5668\u5c3e\u90e8\u539f\u5730\u6784\u9020\u5bf9\u8c61\uff0c\u907f\u514d\u521b\u5efa\u4e34\u65f6\u5bf9\u8c61\u548c\u989d\u5916\u7684\u62f7\u8d1d/\u79fb\u52a8\u5f00\u9500\u3002</p> <pre><code>struct Foo {\n    Foo(int a, int b) { /* ... */ }\n};\n\nstd::vector&lt;Foo&gt; v;\n\n// push_back\uff1a\u5bf9\u8c61\u5148\u6784\u9020\uff0c\u518d\u62f7\u8d1d/\u79fb\u52a8\u5230\u5bb9\u5668\nFoo f1(1, 2);         // \u6784\u9020\u4e00\u6b21\nv.push_back(f1);      // \u62f7\u8d1d\u4e00\u6b21\nv.push_back(Foo(3,4));// \u4e34\u65f6\u5bf9\u8c61\u6784\u9020\u4e00\u6b21\uff0c\u518d\u79fb\u52a8\u6216\u62f7\u8d1d\u4e00\u6b21\n\n// emplace_back\uff1a\u76f4\u63a5\u5728\u5bb9\u5668\u5c3e\u90e8\u6784\u9020\nv.emplace_back(5, 6); // \u539f\u5730\u6784\u9020\u4e00\u6b21\uff0c\u65e0\u989d\u5916\u62f7\u8d1d/\u79fb\u52a8\n</code></pre>","tags":["stl"]},{"location":"stl/push_back_vs_emplace_back/#_3","title":"\u8865\u5145","text":"<ul> <li>\u5982\u679c\u5df2\u6709\u5bf9\u8c61\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>push_back(std::move(obj))</code> \u6216 <code>emplace_back(std::move(obj))</code>\uff0c\u4e24\u8005\u5f00\u9500\u76f8\u8fd1\u3002</li> <li><code>emplace_back</code> \u901a\u8fc7\u5b8c\u7f8e\u8f6c\u53d1\u53c2\u6570\uff0c\u5982\u679c\u6784\u9020\u51fd\u6570\u5b58\u5728\u591a\u4e49\u6027\uff0c\u9700\u8981\u6ce8\u610f\u8c03\u7528\u662f\u5426\u6b63\u786e\u3002</li> </ul>","tags":["stl"]},{"location":"stl/string_vs_string_view_pitfalls/","title":"std::string \u4e0e std::string_view \u7684\u5e38\u89c1\u5751","text":"","tags":["stl"]},{"location":"stl/string_vs_string_view_pitfalls/#_1","title":"\u6807\u51c6\u4e0e\u517c\u5bb9\u6027","text":"<ul> <li>\u5f15\u5165\u7248\u672c\uff1aC++17\uff08\u5934\u6587\u4ef6 <code>&lt;string_view&gt;</code>\uff0c\u7c7b\u578b <code>std::string_view</code>\uff09\u3002</li> <li>\u5b9e\u9a8c\u6027\u524d\u8eab\uff1aC++14 Library Fundamentals TS\uff082015\uff09\u7684 <code>std::experimental::string_view</code>\u3002</li> <li>\u7f16\u8bd1\u5668\u652f\u6301\uff1a\u4e3b\u6d41\u7f16\u8bd1\u5668\u81ea 2017 \u5e74\u8d77\u5747\u5df2\u652f\u6301\uff1b\u65e7\u4ee3\u7801\u4e2d\u82e5\u89c1 <code>std::experimental::string_view</code>\uff0c\u5347\u7ea7\u5230 C++17+ \u53ef\u76f4\u63a5\u66ff\u6362\u4e3a\u6807\u51c6\u7248\u3002</li> <li>\u5b57\u9762\u91cf\u540e\u7f00\uff1a<code>\"abc\"sv</code> \u5728\u547d\u540d\u7a7a\u95f4 <code>std::literals::string_view_literals</code> \u4e2d\uff0c\u793a\u4f8b\uff1a</li> </ul> <p><code>cpp   using namespace std::literals::string_view_literals;   std::string_view sv = \"hello\"sv;</code></p>","tags":["stl"]},{"location":"stl/string_vs_string_view_pitfalls/#_2","title":"\u7ed3\u8bba\uff08\u5b89\u5168\u7528\u6cd5\uff09","text":"<ul> <li>\u53ea\u8bfb\u5165\u53c2\uff1a\u4f18\u5148\u7528 <code>std::string_view</code>\uff08\u4e0d\u6301\u4e45\u5316\uff0c\u4e0d\u8d8a\u8fc7\u8c03\u7528\u6808\uff09\u3002</li> <li>\u9700\u8981\u6301\u4e45\u5316/\u8de8\u7ebf\u7a0b/\u8de8\u5f02\u6b65\uff1a\u5b58\u4e3a <code>std::string</code>\uff08\u62e5\u6709\u6240\u6709\u6743\uff09\u3002</li> <li>\u4e0e C API \u4ea4\u4e92\uff08\u9700\u8981\u4ee5 <code>\\0</code> \u7ed3\u5c3e\uff09\uff1a\u8981\u4e48\u590d\u5236\u5230 <code>std::string</code>\uff0c\u8981\u4e48\u786e\u4fdd\u672b\u5c3e\u6709 <code>\\0</code> \u4e14\u6ca1\u6709\u5185\u5d4c <code>\\0</code>\u3002</li> </ul>","tags":["stl"]},{"location":"stl/string_vs_string_view_pitfalls/#_3","title":"\u9ad8\u9891\u5751\u70b9","text":"<p>1) \u60ac\u5782\u5f15\u7528\uff08\u6700\u81f4\u547d\uff09</p> <pre><code>std::string_view bad() {\n    std::string s = \"hello\"; // \u5c40\u90e8\u5bf9\u8c61\n    return std::string_view{s}; // \u8fd4\u56de\u540e s \u6790\u6784 \u2192 \u60ac\u5782\n}\n\nvoid store(std::string_view sv); // \u82e5\u5185\u90e8\u6301\u4e45\u5316\u4fdd\u5b58 sv \u2192 \u5371\u9669\nstore(std::string(\"tmp\"));       // \u4e34\u65f6 string \u9500\u6bc1\u540e\uff0csv \u60ac\u5782\n</code></pre> <p>\u4e0d\u8981\u628a <code>string_view</code> \u5b58\u8d77\u6765\uff08\u6210\u5458\u53d8\u91cf/\u5bb9\u5668/\u5f02\u6b65\u56de\u8c03\uff09\uff0c\u9664\u975e\u5b83\u5f15\u7528\u7684\u5185\u5b58\u662f\u9759\u6001\u5b58\u50a8\u671f\u6216\u4f60\u80fd\u4e25\u683c\u4fdd\u8bc1\u5176\u5b58\u7eed\u671f\u66f4\u957f\uff08\u5982\u5f15\u7528\u201c\u66f4\u5927\u7684 owning \u5b57\u7b26\u4e32\u201d\u751f\u547d\u5468\u671f\u76f8\u540c\uff09\u3002</p> <p>2) \u975e <code>\\0</code> \u7ed3\u5c3e\u4e0e\u5185\u5d4c <code>\\0</code></p> <pre><code>void c_api(const char*); // \u671f\u671b\u4ee5 \\0 \u7ed3\u5c3e\nstd::string_view sv = \"abc\\0def\"; // size() == 7\uff0c\u5305\u542b\u5185\u5d4c \\0\nc_api(sv.data());        // \u4ec5\u770b\u5230 \"abc\"\uff0c\u540e\u534a\u4e22\u5931\n</code></pre> <p><code>string_view</code> \u53ea\u662f\u201c\u6307\u9488+\u957f\u5ea6\u201d\uff0c<code>data()</code> \u4e0d\u4fdd\u8bc1\u672b\u5c3e <code>\\0</code>\u3002\u4f20\u7ed9 C API \u524d\uff0c\u9700\u62f7\u8d1d\u5230 <code>std::string</code> \u6216\u624b\u52a8\u8865 <code>\\0</code>\uff08\u4e14\u786e\u8ba4\u65e0\u5185\u5d4c <code>\\0</code>\uff09\u3002</p> <p>3) \u5e95\u5c42\u5b58\u50a8\u53d8\u5316\u5bfc\u81f4\u89c6\u56fe\u5931\u6548</p> <pre><code>std::string s = \"hello\";\nstd::string_view v = s;   // \u6307\u5411 s \u7684\u7f13\u51b2\u533a\ns += \" world\";            // \u53ef\u80fd\u89e6\u53d1 reallocate\n// v \u73b0\u5728\u53ef\u80fd\u60ac\u5782\uff08\u6307\u5411\u65e7\u7f13\u51b2\uff09\n</code></pre> <p>\u4fee\u6539 <code>std::string</code> \u53ef\u80fd\u4f7f\u6240\u6709\u6307\u5411\u5b83\u7684 <code>string_view</code> \u5931\u6548\uff08\u7279\u522b\u662f\u589e\u957f\u5bfc\u81f4\u91cd\u5206\u914d\u65f6\uff09\u3002</p> <p>4) \u4ee5\u4e3a <code>string_view</code>\u201c\u66f4\u7701\u5185\u5b58\u6240\u4ee5 everywhere \u7528\u201d</p> <p><code>string_view</code> \u4e0d\u62e5\u6709\u6570\u636e\uff0c\u4e0d\u80fd\u5ef6\u957f\u751f\u547d\u5468\u671f\uff1b\u7528\u9519\u573a\u666f\u53cd\u800c\u66f4\u5371\u9669\u3002\u89c4\u5219\uff1a - \u5f62\u53c2\u8bfb-only \u2192 \u7528\u503c\u4f20 <code>std::string_view</code>\uff1b - \u9700\u8981\u4fdd\u5b58/\u8de8\u8fb9\u754c \u2192 \u7acb\u5373\u62f7\u8d1d\u6210 <code>std::string</code>\u3002</p> <p>5) \u4e0e\u5b57\u9762\u91cf/\u7f13\u51b2\u533a\u7684\u751f\u547d\u5468\u671f</p> <pre><code>constexpr std::string_view ok = \"literal\"; // OK\uff0c\u9759\u6001\u5b58\u50a8\u671f\nstd::string_view v = std::to_string(42);   // \u5371\u9669\uff1a\u4e34\u65f6 string \u7acb\u523b\u9500\u6bc1\n</code></pre> <p>\u5bf9\u4e34\u65f6\u5b57\u7b26\u4e32\u3001\u5c40\u90e8 <code>std::string</code>\u3001<code>std::vector&lt;char&gt;</code> \u7684\u6570\u636e\u89c6\u56fe\u5728\u5bf9\u8c61\u9500\u6bc1\u6216\u91cd\u5206\u914d\u540e\u90fd\u5c06\u5931\u6548\u3002</p> <p>6) \u4e0e UTF-8/\u5b57\u7b26\u8fb9\u754c</p> <p><code>std::string</code>/<code>std::string_view</code> \u90fd\u662f\u201c\u5b57\u8282\u5e8f\u5217\u201d\uff0c\u6309\u5b57\u8282\u5207\u7247\u53ef\u80fd\u7834\u574f\u591a\u5b57\u8282\u5b57\u7b26\u8fb9\u754c\uff1b\u4e0d\u8981\u7528 <code>substr/remove_prefix</code> \u53bb\u201c\u6309\u5b57\u7b26\u201d\u5207\u591a\u5b57\u8282\u7f16\u7801\u3002</p>","tags":["stl"]},{"location":"stl/string_vs_string_view_pitfalls/#_4","title":"\u6b63\u786e\u8303\u5f0f","text":"<ul> <li>API \u8bbe\u8ba1\uff1a\u8bfb-only \u6587\u672c\u53c2\u6570\u7528 <code>std::string_view</code>\uff1b\u9700\u8981\u6301\u4e45\u5316\u5219\u5728\u51fd\u6570\u4f53\u5185 <code>std::string owned(sv);</code> \u62f7\u8d1d\u4e00\u6b21\u3002</li> <li>\u4e0e C API \u7684\u6865\u63a5\uff1a</li> </ul> <pre><code>void use_c_api(std::string_view sv) {\n    std::string tmp(sv);     // \u4fdd\u8bc1 \\0 \u7ed3\u5c3e\u4e14\u65e0\u5185\u5d4c \\0 \u5f71\u54cd\n    c_api(tmp.c_str());\n}\n</code></pre> <ul> <li>\u89c6\u56fe\u5185\u5207\u7247\u4e0d\u6539\u539f\u6570\u636e\uff1a<code>remove_prefix/remove_suffix/substr</code> \u53ea\u79fb\u52a8\u201c\u89c6\u7a97\u201d\uff0c\u4e0d\u590d\u5236\u4e0d\u4fee\u6539\u539f\u6587\u3002</li> </ul> <pre><code>std::string_view sv = \"  header: value  \";\nsv.remove_prefix(2);           // \"header: value  \"\nsv = sv.substr(0, sv.size()-2);// \"header: value\"\n</code></pre>","tags":["stl"]},{"location":"stl/string_vs_string_view_pitfalls/#_5","title":"\u4e0e\u5bb9\u5668/\u54c8\u5e0c\u8054\u52a8\uff08\u5f02\u6784\u67e5\u627e\uff09","text":"<ul> <li><code>std::map&lt;std::string, T, std::less&lt;&gt;&gt; m;</code> \u53ef\u7528 <code>string_view</code> \u76f4\u63a5\u67e5\u627e\uff1a<code>m.find(std::string_view{\"key\"});</code></li> <li><code>std::unordered_map&lt;std::string, T, /*\u900f\u660e hasher*/, /*\u900f\u660e equal*/&gt;</code>\uff08C++20\uff09\u65e2\u4fdd\u7559 <code>std::string</code> \u4f5c\u4e3a\u62e5\u6709\u952e\uff0c\u53c8\u652f\u6301\u7528 <code>string_view</code> \u96f6\u62f7\u8d1d\u67e5\u627e\uff0c\u907f\u514d\u6784\u9020\u4e34\u65f6 <code>std::string</code>\u3002</li> </ul> <p>\u793a\u4f8b\u900f\u660e hasher/equal\uff1a</p> <pre><code>struct SvHash {\n  using is_transparent = void;\n  size_t operator()(std::string_view s) const noexcept {\n    return std::hash&lt;std::string_view&gt;{}(s);\n  }\n  size_t operator()(const std::string&amp; s) const noexcept { return (*this)(std::string_view{s}); }\n  size_t operator()(const char* s) const noexcept { return (*this)(std::string_view{s}); }\n};\nstruct SvEq {\n  using is_transparent = void;\n  bool operator()(std::string_view a, std::string_view b) const noexcept { return a == b; }\n};\n// std::unordered_map&lt;std::string, T, SvHash, SvEq&gt; um;\n// um.find(std::string_view{\"key\"}); // \u96f6\u62f7\u8d1d\u67e5\u627e\n</code></pre> <p>\u6ce8\u610f\uff1a\u952e\u7c7b\u578b\u4f9d\u7136\u662f <code>std::string</code>\uff08\u62e5\u6709\u5185\u5b58\uff09\uff0c<code>string_view</code> \u4ec5\u7528\u4e8e\u67e5\u627e\u65f6\u7684\u4e34\u65f6\u89c6\u56fe\uff0c\u907f\u514d\u4e86\u60ac\u5782\u95ee\u9898\u3002</p>","tags":["stl"]},{"location":"stl/string_vs_string_view_pitfalls/#_6","title":"\u5c0f\u8d34\u58eb","text":"<ul> <li><code>string_view::data()</code> \u4e0d\u4fdd\u8bc1 <code>\\0</code>\uff1b<code>string::c_str()</code> \u624d\u4fdd\u8bc1\u3002</li> <li><code>string_view::substr()</code> \u82e5 <code>pos &gt; size()</code> \u4f1a\u629b <code>std::out_of_range</code>\uff1b<code>string::substr()</code> \u4e5f\u4f1a\uff0c\u7559\u610f\u8fb9\u754c\u3002</li> <li>\u60f3\u8981\u201c\u5ec9\u4ef7\u524d\u7f00/\u540e\u7f00\u53bb\u9664\u201d\u4f18\u5148\u7528 <code>remove_prefix/remove_suffix</code>\uff0c\u96f6\u62f7\u8d1d\u3002</li> <li>\u9700\u8981\u7ebf\u7a0b\u5b89\u5168\u7684\u957f\u671f\u4fdd\u5b58\uff0c\u52a1\u5fc5\u62f7\u8d1d\u6210 <code>std::string</code>\u3002</li> </ul>","tags":["stl"]},{"location":"stl/vector_growth_and_iterator_invalidation/","title":"vector \u7684\u589e\u957f\u7b56\u7565\u4e0e\u8fed\u4ee3\u5668\u5931\u6548\uff1f","text":"","tags":["stl"]},{"location":"stl/vector_growth_and_iterator_invalidation/#_1","title":"\u8981\u70b9","text":"<ul> <li><code>std::vector</code> \u5fc5\u987b\u4fdd\u6301\u5143\u7d20\u8fde\u7eed\u5b58\u50a8\uff1b\u5f53 <code>size()</code> \u9700\u8981\u8d85\u8fc7 <code>capacity()</code> \u65f6\uff0c\u4f1a\u91cd\u65b0\u5206\u914d\u66f4\u5927\u7684\u8fde\u7eed\u5185\u5b58\u5e76\u642c\u79fb\u5143\u7d20\u3002</li> <li>\u4e00\u65e6\u53d1\u751f\u91cd\u5206\u914d\uff08reallocate\uff09\uff0c\u6240\u6709\u6307\u5411\u65e7\u5143\u7d20\u7684\u8fed\u4ee3\u5668/\u6307\u9488/\u5f15\u7528\u5168\u90e8\u5931\u6548\uff1b\u672a\u91cd\u5206\u914d\u65f6\uff0c\u5f71\u54cd\u5c40\u90e8\uff1a<code>end()</code> \u901a\u5e38\u5931\u6548\uff0c\u67d0\u4e9b\u64cd\u4f5c\u4f1a\u4f7f\u63d2\u5165\u70b9\u53ca\u4e4b\u540e\u7684\u8fed\u4ee3\u5668\u5931\u6548\u3002</li> <li>\u6807\u51c6\u672a\u89c4\u5b9a\u5177\u4f53\u589e\u957f\u500d\u6570\uff08\u5b9e\u73b0\u76f8\u5173\uff0c\u5e38\u89c1 ~1.5x-2x\uff09\uff0c\u4f46\u4fdd\u8bc1 <code>push_back</code> \u644a\u8fd8 O(1)\u3002</li> </ul>","tags":["stl"]},{"location":"stl/vector_growth_and_iterator_invalidation/#_2","title":"\u6700\u5c0f\u793a\u4f8b\uff1a\u89c2\u5bdf\u91cd\u5206\u914d\u5bfc\u81f4\u5730\u5740\u53d8\u5316","text":"<pre><code>#include &lt;vector&gt;\n#include &lt;iostream&gt;\nint main() {\n    std::vector&lt;int&gt; v;\n    v.push_back(1);\n    auto p = v.data(); // \u4fdd\u5b58\u65e7\u7684\u5e95\u5c42\u6307\u9488\uff0c\u4e5f\u53ef\u4fdd\u5b58\u8fed\u4ee3\u5668/\u5f15\u7528\n    std::cout &lt;&lt; \"cap=\" &lt;&lt; v.capacity() &lt;&lt; \" data=\" &lt;&lt; (void*)v.data() &lt;&lt; \"\\n\";\n\n    v.push_back(2); // \u53ef\u80fd\u89e6\u53d1\u6269\u5bb9\uff08\u4ece 1 \u5230 2\uff09\n    std::cout &lt;&lt; \"cap=\" &lt;&lt; v.capacity() &lt;&lt; \" data=\" &lt;&lt; (void*)v.data() &lt;&lt; \"\\n\";\n    std::cout &lt;&lt; \"moved? \" &lt;&lt; std::boolalpha &lt;&lt; (p != v.data()) &lt;&lt; \"\\n\";\n\n    // \u82e5 moved \u4e3a true\uff0cp/\u8fed\u4ee3\u5668/\u5f15\u7528\u5747\u5df2\u5931\u6548\uff0c\u4e0d\u80fd\u518d\u89e3\u5f15\u7528\uff01\n}\n</code></pre>","tags":["stl"]},{"location":"stl/vector_growth_and_iterator_invalidation/#_3","title":"\u9884\u7559\u5bb9\u91cf\u907f\u514d\u91cd\u5206\u914d","text":"<pre><code>#include &lt;vector&gt;\n#include &lt;iostream&gt;\nint main() {\n    std::vector&lt;int&gt; v;\n    v.reserve(100);   // \u9884\u7559\u5bb9\u91cf\uff0c\u907f\u514d\u540e\u7eed\u6269\u5bb9\n    v.push_back(1);\n    auto p = v.data();\n    v.push_back(2);   // \u672a\u89e6\u53d1\u6269\u5bb9\n    std::cout &lt;&lt; std::boolalpha &lt;&lt; (p == v.data()) &lt;&lt; \"\\n\"; // true \u2192 \u8fed\u4ee3\u5668/\u6307\u9488\u4ecd\u6709\u6548\uff08end() \u9664\u5916\uff09\n}\n</code></pre>","tags":["stl"]},{"location":"stl/vector_growth_and_iterator_invalidation/#_4","title":"\u5e38\u89c1\u64cd\u4f5c\u7684\u5931\u6548\u89c4\u5219\uff08\u4e0d\u8003\u8651\u91cd\u5206\u914d\u65f6\uff09","text":"<ul> <li>push_back/emplace_back\uff1a\u5df2\u6709\u5143\u7d20\u7684\u8fed\u4ee3\u5668/\u5f15\u7528\u6709\u6548\uff1b<code>end()</code> \u5931\u6548\u3002</li> <li>insert(pos, ...)\uff1a\u63d2\u5165\u70b9\u4e4b\u524d\u7684\u8fed\u4ee3\u5668/\u5f15\u7528\u6709\u6548\uff1b\u63d2\u5165\u70b9\u53ca\u4e4b\u540e\u7684\u8fed\u4ee3\u5668\u5931\u6548\uff1b<code>end()</code> \u5931\u6548\u3002</li> <li>erase(pos, ...)\uff1a\u88ab\u5220\u4f4d\u7f6e\u8d77\u53ca\u4e4b\u540e\u7684\u8fed\u4ee3\u5668\u5931\u6548\uff1b\u8fd4\u56de\u503c\u662f\u4e0b\u4e00\u4e2a\u6709\u6548\u8fed\u4ee3\u5668\uff1b<code>end()</code> \u5931\u6548\u3002</li> <li>reserve(n)\uff1a\u82e5 n \u5927\u4e8e\u5f53\u524d capacity\uff0c\u7acb\u523b\u91cd\u5206\u914d\uff0c\u5168\u90e8\u5931\u6548\uff1b\u5426\u5219\u4e0d\u53d8\u3002</li> <li>resize(n)\uff1a\u82e5\u5bfc\u81f4\u91cd\u5206\u914d\u5219\u5168\u90e8\u5931\u6548\uff1b\u5426\u5219\u4ec5 <code>end()</code> \u53d8\u5316\uff0c\u65b0\u589e/\u88ab\u9500\u6bc1\u5143\u7d20\u7684\u5f15\u7528\u4e0d\u53ef\u7528\u3002</li> </ul>","tags":["stl"]},{"location":"stl/vector_growth_and_iterator_invalidation/#_5","title":"\u5c0f\u7ed3","text":"<ul> <li>\u201c\u662f\u5426\u91cd\u5206\u914d\u201d\u662f\u5224\u65ad\u662f\u5426\u5168\u4f53\u5931\u6548\u7684\u5173\u952e\uff1b\u80fd\u9884\u4f30\u5927\u5c0f\u65f6\u7528 <code>reserve</code> \u964d\u4f4e\u98ce\u9669\u3002</li> <li>\u9700\u8981\u7a33\u5b9a\u5730\u5740\u65f6\uff0c\u8003\u8651\u5b58\u7d22\u5f15\u800c\u4e0d\u662f\u8fed\u4ee3\u5668/\u6307\u9488\uff0c\u6216\u6539\u7528\u5176\u4ed6\u7ed3\u6784/\u5bb9\u5668\u3002</li> </ul>","tags":["stl"]},{"location":"stl/vector_memory/","title":"vector\u5bf9\u8c61\u5230\u5e95\u662f\u5728\u5806\u4e0a\u8fd8\u662f\u6808\u4e0a\uff1f","text":"","tags":["stl"]},{"location":"stl/vector_memory/#_1","title":"\u95ee\u9898","text":"<p>vector\u5bf9\u8c61\u5230\u5e95\u662f\u5728\u5806\u4e0a\u8fd8\u662f\u6808\u4e0a\uff1f</p>","tags":["stl"]},{"location":"stl/vector_memory/#_2","title":"\u56de\u7b54","text":"<p><code>std::vector</code> \u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff1a</p> <ol> <li>\u63a7\u5236\u5757\uff1a\u5305\u62ec\u4e09\u4e2a\u6307\u9488\uff08<code>begin</code> / <code>end</code> / <code>capacity_end</code>\uff09\u3001\u5c3a\u5bf8\u548c allocator \u7b49\u5143\u4fe1\u606f\u3002</li> <li>\u5143\u7d20\u5b58\u50a8\u533a\uff1a\u771f\u6b63\u653e\u5143\u7d20\u7684\u90a3\u7247\u8fde\u7eed\u5185\u5b58\u3002</li> </ol> <p>\u63a7\u5236\u5757\u7684\u5b58\u653e\u4f4d\u7f6e\u53d6\u51b3\u4e8e\u5bf9\u8c61\u7684\u58f0\u660e\u65b9\u5f0f\uff1a</p> <ul> <li>\u5728\u51fd\u6570\u4f53\u4e2d\u76f4\u63a5\u5b9a\u4e49 <code>std::vector&lt;int&gt; v;</code> \u65f6\uff0c\u63a7\u5236\u5757\u968f\u5bf9\u8c61\u4e00\u8d77\u51fa\u73b0\u5728\u6808\u4e0a\u3002</li> <li>\u901a\u8fc7 <code>new std::vector&lt;int&gt;</code> \u52a8\u6001\u521b\u5efa\u65f6\uff0c\u63a7\u5236\u5757\u4f4d\u4e8e\u5806\u4e0a\u3002</li> </ul> <p>\u4e0d\u8bba\u63a7\u5236\u5757\u5728\u54ea\u91cc\uff0c\u5143\u7d20\u5b58\u50a8\u533a\u9ed8\u8ba4\u90fd\u7531 <code>new</code> \u7533\u8bf7\u5728\u5806\u4e0a\u3002\u6269\u5bb9\u65f6\uff0c<code>vector</code> \u4f1a\u91cd\u65b0\u5728\u5806\u4e0a\u7533\u8bf7\u66f4\u5927\u7684\u7a7a\u95f4\uff0c\u5c06\u539f\u6709\u5143\u7d20\u79fb\u52a8\u8fc7\u53bb\u5e76\u91ca\u653e\u65e7\u7a7a\u95f4\u3002</p>","tags":["stl"]},{"location":"stl/vector_memory/#_3","title":"\u4e3a\u4ec0\u4e48\u5143\u7d20\u5fc5\u987b\u5728\u5806\u4e0a\uff1f","text":"<p>\u6808\u7a7a\u95f4\u5927\u5c0f\u56fa\u5b9a\uff0c\u4e14\u5176\u751f\u547d\u5468\u671f\u7531\u4f5c\u7528\u57df\u51b3\u5b9a\u3002<code>std::vector</code> \u9700\u8981\u652f\u6301\u8fd0\u884c\u65f6\u6269\u5bb9\u548c\u5143\u7d20\u4e2a\u6570\u672a\u77e5\u7684\u573a\u666f\uff0c\u56e0\u6b64\u53ea\u80fd\u628a\u5143\u7d20\u5b58\u653e\u5728\u5806\uff08\u6216\u7531\u5206\u914d\u5668\u63d0\u4f9b\u7684\"\u52a8\u6001\u5b58\u50a8\u533a\"\uff09\u4e2d\u3002</p>","tags":["stl"]},{"location":"stl/vector_memory/#_4","title":"\u4f8b\u5b50\uff1a\u89c2\u5bdf\u5730\u5740","text":"<pre><code>void demo() {\n    std::vector&lt;int&gt; v{1, 2, 3};\n\n    std::cout &lt;&lt; \"address of v: \" &lt;&lt; &amp;v &lt;&lt; '\\n';\n    std::cout &lt;&lt; \"address of elements: \" &lt;&lt; v.data() &lt;&lt; '\\n';\n}\n</code></pre> <p>\u5728\u5927\u591a\u6570 64 \u4f4d\u5e73\u53f0\u4e0a\uff0c\u6253\u5370\u7ed3\u679c\u7c7b\u4f3c\uff1a</p> <pre><code>address of v: 0x7ffd23c8e720   // \u63a7\u5236\u5757\uff0c\u5728\u6808\u4e0a\naddress of elements: 0x55b8c8d0eeb0  // \u5143\u7d20\uff0c\u5728\u5806\u4e0a\n</code></pre> <p>\u5982\u679c\u628a <code>v</code> \u6539\u4e3a <code>auto v = new std::vector&lt;int&gt;{1,2,3};</code>\uff0c\u5219 <code>&amp;v</code> \u662f\u6808\u4e0a\u7684\u6307\u9488\uff0c\u800c <code>v</code>\uff08\u63a7\u5236\u5757\uff09\u548c <code>v-&gt;data()</code>\uff08\u5143\u7d20\uff09\u90fd\u5728\u5806\u4e0a\u3002</p>","tags":["stl"]},{"location":"stl/vector_memory/#_5","title":"\u5206\u914d\u5668\u7684\u5f71\u54cd","text":"<p><code>std::vector</code> \u901a\u8fc7\u6a21\u677f\u53c2\u6570\u4e2d\u7684\u5206\u914d\u5668\u7ba1\u7406\u5143\u7d20\u5b58\u50a8\u533a\u3002\u4f7f\u7528 <code>std::pmr::monotonic_buffer_resource</code> \u7b49\u81ea\u5b9a\u4e49\u5206\u914d\u5668\u53ef\u4ee5\u8ba9\u5143\u7d20\u6765\u81ea\u5185\u5b58\u6c60\u3001\u5171\u4eab\u5185\u5b58\u751a\u81f3\u663e\u5b58\uff0c\u4f46\u672c\u8d28\u4e0a\u4ecd\u662f\u52a8\u6001\u83b7\u53d6\u7684\u5185\u5b58\uff0c\u800c\u975e\u6808\u7a7a\u95f4\u3002</p>","tags":["stl"]},{"location":"stl/vector_memory/#stdarray","title":"\u4e0e std::array \u5bf9\u6bd4","text":"<p><code>std::array&lt;int,3&gt;</code> \u7684\u5143\u7d20\u548c\u63a7\u5236\u5757\u662f\u4e00\u4e2a\u6574\u4f53\uff0c\u901a\u5e38\u4f4d\u4e8e\u6808\u4e0a\uff0c\u5927\u5c0f\u5728\u7f16\u8bd1\u671f\u5df2\u77e5\uff0c\u4e0d\u4f1a\u6269\u5bb9\u3002</p>","tags":["stl"]},{"location":"stl/vector_memory/#_6","title":"\u5c0f\u7ed3","text":"<ul> <li>\u63a7\u5236\u5757\uff08<code>std::vector</code> \u5bf9\u8c61\u672c\u8eab\uff09\u5728\u6808\u8fd8\u662f\u5806\u53d6\u51b3\u4e8e\u521b\u5efa\u65b9\u5f0f\u3002</li> <li>\u5143\u7d20\u5b58\u50a8\u533a\u9ed8\u8ba4\u5728\u5806\u4e0a\uff0c\u901a\u8fc7\u5206\u914d\u5668\u7ba1\u7406\u3002</li> <li>\u8fd9\u79cd\u8bbe\u8ba1\u4f7f <code>std::vector</code> \u652f\u6301\u8fd0\u884c\u65f6\u6269\u5bb9\u548c\u8d44\u6e90\u81ea\u52a8\u7ba1\u7406\uff08RAII\uff09\u3002</li> </ul>","tags":["stl"]}]}